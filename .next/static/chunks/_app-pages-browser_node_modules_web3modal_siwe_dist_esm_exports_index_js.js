"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_web3modal_siwe_dist_esm_exports_index_js"],{

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/index.es.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: function() { return /* binding */ C; },\n/* harmony export */   isPublishMethod: function() { return /* binding */ c; },\n/* harmony export */   isPublishParams: function() { return /* binding */ h; },\n/* harmony export */   isPublishRequest: function() { return /* binding */ P; },\n/* harmony export */   isSubscribeMethod: function() { return /* binding */ b; },\n/* harmony export */   isSubscribeParams: function() { return /* binding */ a; },\n/* harmony export */   isSubscribeRequest: function() { return /* binding */ R; },\n/* harmony export */   isSubscriptionMethod: function() { return /* binding */ m; },\n/* harmony export */   isSubscriptionParams: function() { return /* binding */ d; },\n/* harmony export */   isSubscriptionRequest: function() { return /* binding */ S; },\n/* harmony export */   isUnsubscribeMethod: function() { return /* binding */ o; },\n/* harmony export */   isUnsubscribeParams: function() { return /* binding */ p; },\n/* harmony export */   isUnsubscribeRequest: function() { return /* binding */ _; },\n/* harmony export */   parsePublishRequest: function() { return /* binding */ q; },\n/* harmony export */   parseSubscribeRequest: function() { return /* binding */ g; },\n/* harmony export */   parseSubscriptionRequest: function() { return /* binding */ k; },\n/* harmony export */   parseUnsubscribeRequest: function() { return /* binding */ E; }\n/* harmony export */ });\nfunction e(s, r) {\n    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"string\";\n    if (!s[r] || typeof s[r] !== i) throw new Error('Missing or invalid \"'.concat(r, '\" param'));\n}\nfunction l(s, r) {\n    let i = !0;\n    return r.forEach((t)=>{\n        t in s || (i = !1);\n    }), i;\n}\nfunction f(s, r) {\n    return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n    return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n    return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r) {\n    let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"_\";\n    const t = s.split(i);\n    return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n    return b(s.method) && a(s.params);\n}\n_c = R;\nfunction b(s) {\n    return n(s, \"subscribe\");\n}\nfunction a(s) {\n    return u(s, [\n        \"topic\"\n    ], []);\n}\nfunction P(s) {\n    return c(s.method) && h(s.params);\n}\n_c1 = P;\nfunction c(s) {\n    return n(s, \"publish\");\n}\nfunction h(s) {\n    return u(s, [\n        \"message\",\n        \"topic\",\n        \"ttl\"\n    ], [\n        \"prompt\",\n        \"tag\"\n    ]);\n}\nfunction _(s) {\n    return o(s.method) && p(s.params);\n}\nfunction o(s) {\n    return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n    return u(s, [\n        \"id\",\n        \"topic\"\n    ], []);\n}\nfunction S(s) {\n    return m(s.method) && d(s.params);\n}\n_c2 = S;\nfunction m(s) {\n    return n(s, \"subscription\");\n}\nfunction d(s) {\n    return u(s, [\n        \"id\",\n        \"data\"\n    ], []);\n}\nfunction g(s) {\n    if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    const r = s.params;\n    return e(r, \"topic\"), r;\n}\nfunction q(s) {\n    if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n    if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n    const r = s.params;\n    return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n    if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    const r = s.params;\n    return e(r, \"id\"), r;\n}\n_c3 = E;\nfunction k(s) {\n    if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    const r = s.params;\n    return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"R\");\n$RefreshReg$(_c1, \"P\");\n$RefreshReg$(_c2, \"S\");\n$RefreshReg$(_c3, \"E\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/@walletconnect/utils/dist/index.es.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/node_modules/@walletconnect/utils/dist/index.es.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: function() { return /* binding */ Gi; },\n/* harmony export */   BASE16: function() { return /* binding */ zt; },\n/* harmony export */   BASE64: function() { return /* binding */ Jr; },\n/* harmony export */   COLON: function() { return /* binding */ Yo; },\n/* harmony export */   DEFAULT_DEPTH: function() { return /* binding */ di; },\n/* harmony export */   EMPTY_SPACE: function() { return /* binding */ Br; },\n/* harmony export */   ENV_MAP: function() { return /* binding */ qt; },\n/* harmony export */   INTERNAL_ERRORS: function() { return /* binding */ Ao; },\n/* harmony export */   MemoryStore: function() { return /* binding */ lh; },\n/* harmony export */   ONE_THOUSAND: function() { return /* binding */ Vo; },\n/* harmony export */   REACT_NATIVE_PRODUCT: function() { return /* binding */ xn; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ ro; },\n/* harmony export */   SDK_ERRORS: function() { return /* binding */ go; },\n/* harmony export */   SDK_TYPE: function() { return /* binding */ En; },\n/* harmony export */   SLASH: function() { return /* binding */ Mn; },\n/* harmony export */   TYPE_0: function() { return /* binding */ Yi; },\n/* harmony export */   TYPE_1: function() { return /* binding */ lr; },\n/* harmony export */   UTF8: function() { return /* binding */ Gr; },\n/* harmony export */   addResourceToRecap: function() { return /* binding */ Vf; },\n/* harmony export */   appendToQueryString: function() { return /* binding */ Sn; },\n/* harmony export */   assertType: function() { return /* binding */ e0; },\n/* harmony export */   assignAbilityToActions: function() { return /* binding */ ji; },\n/* harmony export */   base64Decode: function() { return /* binding */ Gf; },\n/* harmony export */   base64Encode: function() { return /* binding */ Jf; },\n/* harmony export */   buildApprovedNamespaces: function() { return /* binding */ Lu; },\n/* harmony export */   buildAuthObject: function() { return /* binding */ su; },\n/* harmony export */   buildNamespacesFromAuth: function() { return /* binding */ ju; },\n/* harmony export */   buildRecapStatement: function() { return /* binding */ Xf; },\n/* harmony export */   calcExpiry: function() { return /* binding */ d0; },\n/* harmony export */   capitalize: function() { return /* binding */ s0; },\n/* harmony export */   capitalizeWord: function() { return /* binding */ Rn; },\n/* harmony export */   createDelayedPromise: function() { return /* binding */ a0; },\n/* harmony export */   createEncodedRecap: function() { return /* binding */ cu; },\n/* harmony export */   createExpiringPromise: function() { return /* binding */ u0; },\n/* harmony export */   createRecap: function() { return /* binding */ Yf; },\n/* harmony export */   decodeRecap: function() { return /* binding */ Oe; },\n/* harmony export */   decodeTypeByte: function() { return /* binding */ Mr; },\n/* harmony export */   decrypt: function() { return /* binding */ xu; },\n/* harmony export */   deriveSymKey: function() { return /* binding */ Au; },\n/* harmony export */   deserialize: function() { return /* binding */ Xi; },\n/* harmony export */   encodeRecap: function() { return /* binding */ jr; },\n/* harmony export */   encodeTypeByte: function() { return /* binding */ $f; },\n/* harmony export */   encrypt: function() { return /* binding */ wu; },\n/* harmony export */   engineEvent: function() { return /* binding */ v0; },\n/* harmony export */   enumify: function() { return /* binding */ o0; },\n/* harmony export */   formatAccountId: function() { return /* binding */ vn; },\n/* harmony export */   formatAccountWithChain: function() { return /* binding */ Ko; },\n/* harmony export */   formatChainId: function() { return /* binding */ pn; },\n/* harmony export */   formatExpirerTarget: function() { return /* binding */ vi; },\n/* harmony export */   formatIdTarget: function() { return /* binding */ c0; },\n/* harmony export */   formatMessage: function() { return /* binding */ zf; },\n/* harmony export */   formatMessageContext: function() { return /* binding */ r0; },\n/* harmony export */   formatRelayParams: function() { return /* binding */ ao; },\n/* harmony export */   formatRelayRpcUrl: function() { return /* binding */ $o; },\n/* harmony export */   formatStatementFromRecap: function() { return /* binding */ Ji; },\n/* harmony export */   formatTopicTarget: function() { return /* binding */ h0; },\n/* harmony export */   formatUA: function() { return /* binding */ _n; },\n/* harmony export */   formatUri: function() { return /* binding */ Du; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ mu; },\n/* harmony export */   generateRandomBytes32: function() { return /* binding */ gu; },\n/* harmony export */   getAccountsChains: function() { return /* binding */ $e; },\n/* harmony export */   getAccountsFromNamespaces: function() { return /* binding */ zo; },\n/* harmony export */   getAddressFromAccount: function() { return /* binding */ mn; },\n/* harmony export */   getAddressesFromAccounts: function() { return /* binding */ Ho; },\n/* harmony export */   getAppMetadata: function() { return /* binding */ Xo; },\n/* harmony export */   getBrowserOnlineStatus: function() { return /* binding */ Bo; },\n/* harmony export */   getBundleId: function() { return /* binding */ Wo; },\n/* harmony export */   getChainFromAccount: function() { return /* binding */ gn; },\n/* harmony export */   getChainsFromAccounts: function() { return /* binding */ An; },\n/* harmony export */   getChainsFromNamespace: function() { return /* binding */ _r; },\n/* harmony export */   getChainsFromNamespaces: function() { return /* binding */ Lo; },\n/* harmony export */   getChainsFromRecap: function() { return /* binding */ pu; },\n/* harmony export */   getChainsFromRequiredNamespaces: function() { return /* binding */ jo; },\n/* harmony export */   getCommonValuesInArrays: function() { return /* binding */ mi; },\n/* harmony export */   getDecodedRecapFromResources: function() { return /* binding */ Lf; },\n/* harmony export */   getDeepLink: function() { return /* binding */ g0; },\n/* harmony export */   getDidAddress: function() { return /* binding */ Li; },\n/* harmony export */   getDidAddressSegments: function() { return /* binding */ Lr; },\n/* harmony export */   getDidChainId: function() { return /* binding */ zi; },\n/* harmony export */   getEnvironment: function() { return /* binding */ We; },\n/* harmony export */   getHttpUrl: function() { return /* binding */ t0; },\n/* harmony export */   getInternalError: function() { return /* binding */ xe; },\n/* harmony export */   getJavascriptID: function() { return /* binding */ In; },\n/* harmony export */   getJavascriptOS: function() { return /* binding */ Nn; },\n/* harmony export */   getLastItems: function() { return /* binding */ Cn; },\n/* harmony export */   getMethodsFromRecap: function() { return /* binding */ du; },\n/* harmony export */   getNamespacedDidChainId: function() { return /* binding */ fu; },\n/* harmony export */   getNamespacesChains: function() { return /* binding */ co; },\n/* harmony export */   getNamespacesEventsForChainId: function() { return /* binding */ po; },\n/* harmony export */   getNamespacesFromAccounts: function() { return /* binding */ mo; },\n/* harmony export */   getNamespacesMethodsForChainId: function() { return /* binding */ lo; },\n/* harmony export */   getNodeOnlineStatus: function() { return /* binding */ Ro; },\n/* harmony export */   getReCapActions: function() { return /* binding */ Qf; },\n/* harmony export */   getReactNativeOnlineStatus: function() { return /* binding */ Co; },\n/* harmony export */   getRecapAbilitiesFromResource: function() { return /* binding */ hu; },\n/* harmony export */   getRecapFromResources: function() { return /* binding */ Qr; },\n/* harmony export */   getRecapResource: function() { return /* binding */ jf; },\n/* harmony export */   getRelayClientMetadata: function() { return /* binding */ Zo; },\n/* harmony export */   getRelayProtocolApi: function() { return /* binding */ Nu; },\n/* harmony export */   getRelayProtocolName: function() { return /* binding */ Su; },\n/* harmony export */   getRequiredNamespacesFromNamespaces: function() { return /* binding */ zu; },\n/* harmony export */   getSdkError: function() { return /* binding */ tr; },\n/* harmony export */   getUniqueValues: function() { return /* binding */ li; },\n/* harmony export */   handleDeeplinkRedirect: function() { return /* binding */ m0; },\n/* harmony export */   hasOverlap: function() { return /* binding */ _e; },\n/* harmony export */   hashKey: function() { return /* binding */ bu; },\n/* harmony export */   hashMessage: function() { return /* binding */ yu; },\n/* harmony export */   isBrowser: function() { return /* binding */ pr; },\n/* harmony export */   isCaipNamespace: function() { return /* binding */ Zi; },\n/* harmony export */   isConformingNamespaces: function() { return /* binding */ Io; },\n/* harmony export */   isExpired: function() { return /* binding */ p0; },\n/* harmony export */   isNode: function() { return /* binding */ pi; },\n/* harmony export */   isOnline: function() { return /* binding */ hh; },\n/* harmony export */   isProposalStruct: function() { return /* binding */ Gu; },\n/* harmony export */   isReactNative: function() { return /* binding */ er; },\n/* harmony export */   isRecap: function() { return /* binding */ Qi; },\n/* harmony export */   isSessionCompatible: function() { return /* binding */ Qu; },\n/* harmony export */   isSessionStruct: function() { return /* binding */ Yu; },\n/* harmony export */   isTypeOneEnvelope: function() { return /* binding */ Eu; },\n/* harmony export */   isUndefined: function() { return /* binding */ Pe; },\n/* harmony export */   isValidAccountId: function() { return /* binding */ bo; },\n/* harmony export */   isValidAccounts: function() { return /* binding */ xo; },\n/* harmony export */   isValidActions: function() { return /* binding */ Eo; },\n/* harmony export */   isValidArray: function() { return /* binding */ Er; },\n/* harmony export */   isValidChainId: function() { return /* binding */ Sr; },\n/* harmony export */   isValidChains: function() { return /* binding */ yo; },\n/* harmony export */   isValidController: function() { return /* binding */ Vu; },\n/* harmony export */   isValidEip1271Signature: function() { return /* binding */ kf; },\n/* harmony export */   isValidEip191Signature: function() { return /* binding */ Uf; },\n/* harmony export */   isValidErrorReason: function() { return /* binding */ th; },\n/* harmony export */   isValidEvent: function() { return /* binding */ ih; },\n/* harmony export */   isValidId: function() { return /* binding */ Zu; },\n/* harmony export */   isValidNamespaceAccounts: function() { return /* binding */ Mo; },\n/* harmony export */   isValidNamespaceActions: function() { return /* binding */ en; },\n/* harmony export */   isValidNamespaceChains: function() { return /* binding */ wo; },\n/* harmony export */   isValidNamespaceMethodsOrEvents: function() { return /* binding */ tn; },\n/* harmony export */   isValidNamespaces: function() { return /* binding */ So; },\n/* harmony export */   isValidNamespacesChainId: function() { return /* binding */ nh; },\n/* harmony export */   isValidNamespacesEvent: function() { return /* binding */ oh; },\n/* harmony export */   isValidNamespacesRequest: function() { return /* binding */ fh; },\n/* harmony export */   isValidNumber: function() { return /* binding */ Vr; },\n/* harmony export */   isValidObject: function() { return /* binding */ Yr; },\n/* harmony export */   isValidParams: function() { return /* binding */ $u; },\n/* harmony export */   isValidRecap: function() { return /* binding */ me; },\n/* harmony export */   isValidRelay: function() { return /* binding */ No; },\n/* harmony export */   isValidRelays: function() { return /* binding */ Xu; },\n/* harmony export */   isValidRequest: function() { return /* binding */ eh; },\n/* harmony export */   isValidRequestExpiry: function() { return /* binding */ uh; },\n/* harmony export */   isValidRequiredNamespaces: function() { return /* binding */ Wu; },\n/* harmony export */   isValidResponse: function() { return /* binding */ rh; },\n/* harmony export */   isValidString: function() { return /* binding */ Gt; },\n/* harmony export */   isValidUrl: function() { return /* binding */ Ju; },\n/* harmony export */   mapEntries: function() { return /* binding */ f0; },\n/* harmony export */   mapToObj: function() { return /* binding */ i0; },\n/* harmony export */   mergeArrays: function() { return /* binding */ ge; },\n/* harmony export */   mergeEncodedRecaps: function() { return /* binding */ lu; },\n/* harmony export */   mergeRecaps: function() { return /* binding */ Wf; },\n/* harmony export */   normalizeNamespaces: function() { return /* binding */ $i; },\n/* harmony export */   objToMap: function() { return /* binding */ n0; },\n/* harmony export */   parseAccountId: function() { return /* binding */ ci; },\n/* harmony export */   parseChainId: function() { return /* binding */ dn; },\n/* harmony export */   parseContextNames: function() { return /* binding */ Bn; },\n/* harmony export */   parseExpirerTarget: function() { return /* binding */ l0; },\n/* harmony export */   parseNamespaceKey: function() { return /* binding */ vo; },\n/* harmony export */   parseRelayParams: function() { return /* binding */ oo; },\n/* harmony export */   parseTopic: function() { return /* binding */ so; },\n/* harmony export */   parseUri: function() { return /* binding */ Pu; },\n/* harmony export */   populateAuthPayload: function() { return /* binding */ au; },\n/* harmony export */   recapHasResource: function() { return /* binding */ uu; },\n/* harmony export */   serialize: function() { return /* binding */ to; },\n/* harmony export */   subscribeToBrowserNetworkChange: function() { return /* binding */ Oo; },\n/* harmony export */   subscribeToNetworkChange: function() { return /* binding */ ch; },\n/* harmony export */   subscribeToReactNativeNetworkChange: function() { return /* binding */ Po; },\n/* harmony export */   validateDecoding: function() { return /* binding */ Mu; },\n/* harmony export */   validateEncoding: function() { return /* binding */ eo; },\n/* harmony export */   validateSignedCacao: function() { return /* binding */ ou; },\n/* harmony export */   verifySignature: function() { return /* binding */ Tf; }\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! detect-browser */ \"(app-pages-browser)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! query-string */ \"(app-pages-browser)/./node_modules/query-string/index.js\");\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"(app-pages-browser)/./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @stablelib/hkdf */ \"(app-pages-browser)/./node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stablelib/random */ \"(app-pages-browser)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @stablelib/sha256 */ \"(app-pages-browser)/./node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stablelib/x25519 */ \"(app-pages-browser)/./node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n\n\n\n\n\n\nconst Ir = \":\";\nfunction dn(e) {\n    const [t, r] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r\n    };\n}\nfunction pn(e) {\n    const { namespace: t, reference: r } = e;\n    return [\n        t,\n        r\n    ].join(Ir);\n}\nfunction ci(e) {\n    const [t, r, i] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r,\n        address: i\n    };\n}\nfunction vn(e) {\n    const { namespace: t, reference: r, address: i } = e;\n    return [\n        t,\n        r,\n        i\n    ].join(Ir);\n}\nfunction li(e, t) {\n    const r = [];\n    return e.forEach((i)=>{\n        const n = t(i);\n        r.includes(n) || r.push(n);\n    }), r;\n}\nfunction mn(e) {\n    const { address: t } = ci(e);\n    return t;\n}\nfunction gn(e) {\n    const { namespace: t, reference: r } = ci(e);\n    return pn({\n        namespace: t,\n        reference: r\n    });\n}\nfunction Ko(e, t) {\n    const { namespace: r, reference: i } = dn(t);\n    return vn({\n        namespace: r,\n        reference: i,\n        address: e\n    });\n}\n_c = Ko;\nfunction Ho(e) {\n    return li(e, mn);\n}\n_c1 = Ho;\nfunction An(e) {\n    return li(e, gn);\n}\n_c2 = An;\nfunction zo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...n.accounts);\n    }), r;\n}\nfunction Lo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...An(n.accounts));\n    }), r;\n}\n_c3 = Lo;\nfunction jo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(..._r(i, n));\n    }), r;\n}\nfunction _r(e, t) {\n    return e.includes(\":\") ? [\n        e\n    ] : t.chains || [];\n}\nvar Qo = Object.defineProperty, bn = Object.getOwnPropertySymbols, Jo = Object.prototype.hasOwnProperty, Go = Object.prototype.propertyIsEnumerable, yn = (e, t, r)=>t in e ? Qo(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, wn = (e, t)=>{\n    for(var r in t || (t = {}))Jo.call(t, r) && yn(e, r, t[r]);\n    if (bn) for (var r of bn(t))Go.call(t, r) && yn(e, r, t[r]);\n    return e;\n};\nconst xn = \"ReactNative\", qt = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, Br = \" \", Yo = \":\", Mn = \"/\", di = 2, Vo = 1e3, En = \"js\";\nfunction pi() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction er() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === xn;\n}\nfunction pr() {\n    return !pi() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\nfunction We() {\n    return er() ? qt.reactNative : pi() ? qt.node : pr() ? qt.browser : qt.unknown;\n}\n_c4 = We;\nfunction Wo() {\n    var e;\n    try {\n        return er() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Application) < \"u\" ? (e = __webpack_require__.g.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch (e) {\n        return;\n    }\n}\n_c5 = Wo;\nfunction Sn(e, t) {\n    let r = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(e);\n    return r = wn(wn({}, r), t), e = query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(r), e;\n}\n_c6 = Sn;\nfunction Xo() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\n_c7 = Xo;\nfunction Zo(e, t) {\n    var r;\n    const i = We(), n = {\n        protocol: e,\n        version: t,\n        env: i\n    };\n    return i === \"browser\" && (n.host = ((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : r.host) || \"unknown\"), n;\n}\n_c8 = Zo;\nfunction Nn() {\n    if (We() === qt.reactNative && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\") {\n        const { OS: r, Version: i } = __webpack_require__.g.Platform;\n        return [\n            r,\n            i\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_11__.detect)();\n    if (e === null) return \"unknown\";\n    const t = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        t,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        t,\n        e.version\n    ].join(\"-\");\n}\n_c9 = Nn;\nfunction In() {\n    var e;\n    const t = We();\n    return t === qt.browser ? [\n        t,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : t;\n}\n_c10 = In;\nfunction _n(e, t, r) {\n    const i = Nn(), n = In();\n    return [\n        [\n            e,\n            t\n        ].join(\"-\"),\n        [\n            En,\n            r\n        ].join(\"-\"),\n        i,\n        n\n    ].join(\"/\");\n}\nfunction $o(param) {\n    let { protocol: e, version: t, relayUrl: r, sdkVersion: i, auth: n, projectId: o, useOnCloseEvent: h, bundleId: p } = param;\n    const b = r.split(\"?\"), m = _n(e, t, i), w = {\n        auth: n,\n        ua: m,\n        projectId: o,\n        useOnCloseEvent: h || void 0,\n        origin: p || void 0\n    }, y = Sn(b[1] || \"\", w);\n    return b[0] + \"?\" + y;\n}\nfunction t0(e) {\n    let t = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const r = typeof t < \"u\" ? e.split(\"://\")[1] : e;\n    return t = t === \"wss\" ? \"https\" : \"http\", [\n        t,\n        r\n    ].join(\"://\");\n}\nfunction e0(e, t, r) {\n    if (!e[t] || typeof e[t] !== r) throw new Error('Missing or invalid \"'.concat(t, '\" param'));\n}\nfunction Bn(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : di;\n    return Cn(e.split(Mn), t);\n}\n_c11 = Bn;\nfunction r0(e) {\n    return Bn(e).join(Br);\n}\nfunction _e(e, t) {\n    return e.filter((r)=>t.includes(r)).length === e.length;\n}\nfunction Cn(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : di;\n    return e.slice(Math.max(e.length - t, 0));\n}\n_c12 = Cn;\nfunction i0(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction n0(e) {\n    return new Map(Object.entries(e));\n}\nfunction f0(e, t) {\n    const r = {};\n    return Object.keys(e).forEach((i)=>{\n        r[i] = t(e[i]);\n    }), r;\n}\nconst o0 = (e)=>e;\nfunction Rn(e) {\n    return e.trim().replace(/^\\w/, (t)=>t.toUpperCase());\n}\n_c13 = Rn;\nfunction s0(e) {\n    return e.split(Br).map((t)=>Rn(t)).join(Br);\n}\nfunction a0() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, t = arguments.length > 1 ? arguments[1] : void 0;\n    const r = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let i, n, o;\n    return {\n        resolve: (h)=>{\n            o && i && (clearTimeout(o), i(h));\n        },\n        reject: (h)=>{\n            o && n && (clearTimeout(o), n(h));\n        },\n        done: ()=>new Promise((h, p)=>{\n                o = setTimeout(()=>{\n                    p(new Error(t));\n                }, r), i = h, n = p;\n            })\n    };\n}\nfunction u0(e, t, r) {\n    return new Promise(async (i, n)=>{\n        const o = setTimeout(()=>n(new Error(r)), t);\n        try {\n            const h = await e;\n            i(h);\n        } catch (h) {\n            n(h);\n        }\n        clearTimeout(o);\n    });\n}\nfunction vi(e, t) {\n    if (typeof t == \"string\" && t.startsWith(\"\".concat(e, \":\"))) return t;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof t != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return \"topic:\".concat(t);\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof t != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return \"id:\".concat(t);\n    }\n    throw new Error(\"Unknown expirer target type: \".concat(e));\n}\nfunction h0(e) {\n    return vi(\"topic\", e);\n}\nfunction c0(e) {\n    return vi(\"id\", e);\n}\nfunction l0(e) {\n    const [t, r] = e.split(\":\"), i = {\n        id: void 0,\n        topic: void 0\n    };\n    if (t === \"topic\" && typeof r == \"string\") i.topic = r;\n    else if (t === \"id\" && Number.isInteger(Number(r))) i.id = Number(r);\n    else throw new Error(\"Invalid target, expected id:number or topic:string, got \".concat(t, \":\").concat(r));\n    return i;\n}\nfunction d0(e, t) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((t || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e));\n}\nfunction p0(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e);\n}\nfunction v0(e, t) {\n    return \"\".concat(e).concat(t ? \":\".concat(t) : \"\");\n}\nfunction ge() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    return [\n        ...new Set([\n            ...e,\n            ...t\n        ])\n    ];\n}\nasync function m0(param) {\n    let { id: e, topic: t, wcDeepLink: r } = param;\n    try {\n        if (!r) return;\n        const i = typeof r == \"string\" ? JSON.parse(r) : r;\n        let n = i === null || i === void 0 ? void 0 : i.href;\n        if (typeof n != \"string\") return;\n        n.endsWith(\"/\") && (n = n.slice(0, -1));\n        const o = \"\".concat(n, \"/wc?requestId=\").concat(e, \"&sessionTopic=\").concat(t), h = We();\n        h === qt.browser ? o.startsWith(\"https://\") || o.startsWith(\"http://\") ? window.open(o, \"_blank\", \"noreferrer noopener\") : window.open(o, \"_self\", \"noreferrer noopener\") : h === qt.reactNative && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\" && await __webpack_require__.g.Linking.openURL(o);\n    } catch (i) {\n        console.error(i);\n    }\n}\nasync function g0(e, t) {\n    try {\n        return await e.getItem(t) || (pr() ? localStorage.getItem(t) : void 0);\n    } catch (r) {\n        console.error(r);\n    }\n}\nfunction mi(e, t) {\n    return e.filter((r)=>t.includes(r));\n}\nvar On = typeof globalThis < \"u\" ? globalThis :  true ? window : 0;\nfunction A0(e) {\n    var t = e.default;\n    if (typeof t == \"function\") {\n        var r = function() {\n            return t.apply(this, arguments);\n        };\n        r.prototype = t.prototype;\n    } else r = {};\n    return Object.defineProperty(r, \"__esModule\", {\n        value: !0\n    }), Object.keys(e).forEach(function(i) {\n        var n = Object.getOwnPropertyDescriptor(e, i);\n        Object.defineProperty(r, i, n.get ? n : {\n            enumerable: !0,\n            get: function() {\n                return e[i];\n            }\n        });\n    }), r;\n}\n_c14 = A0;\nvar Pn = {\n    exports: {}\n}; /**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */ \n(function(e) {\n    (function() {\n        var t = \"input is invalid type\", r = \"finalize already called\", i = \"object\" == \"object\", n = i ? window : {};\n        n.JS_SHA3_NO_WINDOW && (i = !1);\n        var o = !i && typeof self == \"object\", h = !n.JS_SHA3_NO_NODE_JS && typeof process == \"object\" && process.versions && process.versions.node;\n        h ? n = On : o && (n = self);\n        var p = !n.JS_SHA3_NO_COMMON_JS && !0 && e.exports, b = !n.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer < \"u\", m = \"0123456789abcdef\".split(\"\"), w = [\n            31,\n            7936,\n            2031616,\n            520093696\n        ], y = [\n            4,\n            1024,\n            262144,\n            67108864\n        ], S = [\n            1,\n            256,\n            65536,\n            16777216\n        ], I = [\n            6,\n            1536,\n            393216,\n            100663296\n        ], N = [\n            0,\n            8,\n            16,\n            24\n        ], C = [\n            1,\n            0,\n            32898,\n            0,\n            32906,\n            2147483648,\n            2147516416,\n            2147483648,\n            32907,\n            0,\n            2147483649,\n            0,\n            2147516545,\n            2147483648,\n            32777,\n            2147483648,\n            138,\n            0,\n            136,\n            0,\n            2147516425,\n            0,\n            2147483658,\n            0,\n            2147516555,\n            0,\n            139,\n            2147483648,\n            32905,\n            2147483648,\n            32771,\n            2147483648,\n            32770,\n            2147483648,\n            128,\n            2147483648,\n            32778,\n            0,\n            2147483658,\n            2147483648,\n            2147516545,\n            2147483648,\n            32896,\n            2147483648,\n            2147483649,\n            0,\n            2147516424,\n            2147483648\n        ], F = [\n            224,\n            256,\n            384,\n            512\n        ], U = [\n            128,\n            256\n        ], J = [\n            \"hex\",\n            \"buffer\",\n            \"arrayBuffer\",\n            \"array\",\n            \"digest\"\n        ], Bt = {\n            128: 168,\n            256: 136\n        };\n        (n.JS_SHA3_NO_NODE_JS || !Array.isArray) && (Array.isArray = function(u) {\n            return Object.prototype.toString.call(u) === \"[object Array]\";\n        }), b && (n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function(u) {\n            return typeof u == \"object\" && u.buffer && u.buffer.constructor === ArrayBuffer;\n        });\n        for(var G = function(u, E, _) {\n            return function(B) {\n                return new s(u, E, u).update(B)[_]();\n            };\n        }, H = function(u, E, _) {\n            return function(B, R) {\n                return new s(u, E, R).update(B)[_]();\n            };\n        }, z = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"cshake\" + u].update(B, R, T, P)[_]();\n            };\n        }, Pt = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"kmac\" + u].update(B, R, T, P)[_]();\n            };\n        }, W = function(u, E, _, B) {\n            for(var R = 0; R < J.length; ++R){\n                var T = J[R];\n                u[T] = E(_, B, T);\n            }\n            return u;\n        }, Rt = function(u, E) {\n            var _ = G(u, E, \"hex\");\n            return _.create = function() {\n                return new s(u, E, u);\n            }, _.update = function(B) {\n                return _.create().update(B);\n            }, W(_, G, u, E);\n        }, Yt = function(u, E) {\n            var _ = H(u, E, \"hex\");\n            return _.create = function(B) {\n                return new s(u, E, B);\n            }, _.update = function(B, R) {\n                return _.create(R).update(B);\n            }, W(_, H, u, E);\n        }, Y = function(u, E) {\n            var _ = Bt[u], B = z(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return !T && !P ? f[\"shake\" + u].create(R) : new s(u, E, R).bytepad([\n                    T,\n                    P\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(T, P, O).update(R);\n            }, W(B, z, u, E);\n        }, Vt = function(u, E) {\n            var _ = Bt[u], B = Pt(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return new v(u, E, T).bytepad([\n                    \"KMAC\",\n                    P\n                ], _).bytepad([\n                    R\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(R, P, O).update(T);\n            }, W(B, Pt, u, E);\n        }, A = [\n            {\n                name: \"keccak\",\n                padding: S,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"sha3\",\n                padding: I,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"shake\",\n                padding: w,\n                bits: U,\n                createMethod: Yt\n            },\n            {\n                name: \"cshake\",\n                padding: y,\n                bits: U,\n                createMethod: Y\n            },\n            {\n                name: \"kmac\",\n                padding: y,\n                bits: U,\n                createMethod: Vt\n            }\n        ], f = {}, a = [], c = 0; c < A.length; ++c)for(var d = A[c], g = d.bits, x = 0; x < g.length; ++x){\n            var M = d.name + \"_\" + g[x];\n            if (a.push(M), f[M] = d.createMethod(g[x], d.padding), d.name !== \"sha3\") {\n                var l = d.name + g[x];\n                a.push(l), f[l] = f[M];\n            }\n        }\n        function s(u, E, _) {\n            this.blocks = [], this.s = [], this.padding = E, this.outputBits = _, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (u << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = _ >> 5, this.extraBytes = (_ & 31) >> 3;\n            for(var B = 0; B < 50; ++B)this.s[B] = 0;\n        }\n        s.prototype.update = function(u) {\n            if (this.finalized) throw new Error(r);\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (b && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!b || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            for(var B = this.blocks, R = this.byteCount, T = u.length, P = this.blockCount, O = 0, Ct = this.s, D, q; O < T;){\n                if (this.reset) for(this.reset = !1, B[0] = this.block, D = 1; D < P + 1; ++D)B[D] = 0;\n                if (E) for(D = this.start; O < T && D < R; ++O)B[D >> 2] |= u[O] << N[D++ & 3];\n                else for(D = this.start; O < T && D < R; ++O)q = u.charCodeAt(O), q < 128 ? B[D >> 2] |= q << N[D++ & 3] : q < 2048 ? (B[D >> 2] |= (192 | q >> 6) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : q < 55296 || q >= 57344 ? (B[D >> 2] |= (224 | q >> 12) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : (q = 65536 + ((q & 1023) << 10 | u.charCodeAt(++O) & 1023), B[D >> 2] |= (240 | q >> 18) << N[D++ & 3], B[D >> 2] |= (128 | q >> 12 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]);\n                if (this.lastByteIndex = D, D >= R) {\n                    for(this.start = D - R, this.block = B[P], D = 0; D < P; ++D)Ct[D] ^= B[D];\n                    k(Ct), this.reset = !0;\n                } else this.start = D;\n            }\n            return this;\n        }, s.prototype.encode = function(u, E) {\n            var _ = u & 255, B = 1, R = [\n                _\n            ];\n            for(u = u >> 8, _ = u & 255; _ > 0;)R.unshift(_), u = u >> 8, _ = u & 255, ++B;\n            return E ? R.push(B) : R.unshift(B), this.update(R), R.length;\n        }, s.prototype.encodeString = function(u) {\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (b && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!b || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            var B = 0, R = u.length;\n            if (E) B = R;\n            else for(var T = 0; T < u.length; ++T){\n                var P = u.charCodeAt(T);\n                P < 128 ? B += 1 : P < 2048 ? B += 2 : P < 55296 || P >= 57344 ? B += 3 : (P = 65536 + ((P & 1023) << 10 | u.charCodeAt(++T) & 1023), B += 4);\n            }\n            return B += this.encode(B * 8), this.update(u), B;\n        }, s.prototype.bytepad = function(u, E) {\n            for(var _ = this.encode(E), B = 0; B < u.length; ++B)_ += this.encodeString(u[B]);\n            var R = E - _ % E, T = [];\n            return T.length = R, this.update(T), this;\n        }, s.prototype.finalize = function() {\n            if (!this.finalized) {\n                this.finalized = !0;\n                var u = this.blocks, E = this.lastByteIndex, _ = this.blockCount, B = this.s;\n                if (u[E >> 2] |= this.padding[E & 3], this.lastByteIndex === this.byteCount) for(u[0] = u[_], E = 1; E < _ + 1; ++E)u[E] = 0;\n                for(u[_ - 1] |= 2147483648, E = 0; E < _; ++E)B[E] ^= u[E];\n                k(B);\n            }\n        }, s.prototype.toString = s.prototype.hex = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = \"\", O; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = E[R], P += m[O >> 4 & 15] + m[O & 15] + m[O >> 12 & 15] + m[O >> 8 & 15] + m[O >> 20 & 15] + m[O >> 16 & 15] + m[O >> 28 & 15] + m[O >> 24 & 15];\n                T % u === 0 && (k(E), R = 0);\n            }\n            return B && (O = E[R], P += m[O >> 4 & 15] + m[O & 15], B > 1 && (P += m[O >> 12 & 15] + m[O >> 8 & 15]), B > 2 && (P += m[O >> 20 & 15] + m[O >> 16 & 15])), P;\n        }, s.prototype.arrayBuffer = function() {\n            this.finalize();\n            var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = this.outputBits >> 3, O;\n            B ? O = new ArrayBuffer(_ + 1 << 2) : O = new ArrayBuffer(P);\n            for(var Ct = new Uint32Array(O); T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)Ct[T] = E[R];\n                T % u === 0 && k(E);\n            }\n            return B && (Ct[R] = E[R], O = O.slice(0, P)), O;\n        }, s.prototype.buffer = s.prototype.arrayBuffer, s.prototype.digest = s.prototype.array = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = [], O, Ct; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = T << 2, Ct = E[R], P[O] = Ct & 255, P[O + 1] = Ct >> 8 & 255, P[O + 2] = Ct >> 16 & 255, P[O + 3] = Ct >> 24 & 255;\n                T % u === 0 && k(E);\n            }\n            return B && (O = T << 2, Ct = E[R], P[O] = Ct & 255, B > 1 && (P[O + 1] = Ct >> 8 & 255), B > 2 && (P[O + 2] = Ct >> 16 & 255)), P;\n        };\n        function v(u, E, _) {\n            s.call(this, u, E, _);\n        }\n        v.prototype = new s, v.prototype.finalize = function() {\n            return this.encode(this.outputBits, !0), s.prototype.finalize.call(this);\n        };\n        var k = function(u) {\n            var E, _, B, R, T, P, O, Ct, D, q, De, X, Z, Fe, $, tt, Te, et, rt, Ue, it, nt, ke, ft, ot, qe, st, at, Ke, ut, ht, He, ct, lt, ze, dt, pt, Le, vt, mt, je, gt, At, Qe, bt, yt, Je, wt, xt, Ge, Mt, Et, Ye, St, Nt, Ve, It, _t, Me, Ee, Se, Ne, Ie;\n            for(B = 0; B < 48; B += 2)R = u[0] ^ u[10] ^ u[20] ^ u[30] ^ u[40], T = u[1] ^ u[11] ^ u[21] ^ u[31] ^ u[41], P = u[2] ^ u[12] ^ u[22] ^ u[32] ^ u[42], O = u[3] ^ u[13] ^ u[23] ^ u[33] ^ u[43], Ct = u[4] ^ u[14] ^ u[24] ^ u[34] ^ u[44], D = u[5] ^ u[15] ^ u[25] ^ u[35] ^ u[45], q = u[6] ^ u[16] ^ u[26] ^ u[36] ^ u[46], De = u[7] ^ u[17] ^ u[27] ^ u[37] ^ u[47], X = u[8] ^ u[18] ^ u[28] ^ u[38] ^ u[48], Z = u[9] ^ u[19] ^ u[29] ^ u[39] ^ u[49], E = X ^ (P << 1 | O >>> 31), _ = Z ^ (O << 1 | P >>> 31), u[0] ^= E, u[1] ^= _, u[10] ^= E, u[11] ^= _, u[20] ^= E, u[21] ^= _, u[30] ^= E, u[31] ^= _, u[40] ^= E, u[41] ^= _, E = R ^ (Ct << 1 | D >>> 31), _ = T ^ (D << 1 | Ct >>> 31), u[2] ^= E, u[3] ^= _, u[12] ^= E, u[13] ^= _, u[22] ^= E, u[23] ^= _, u[32] ^= E, u[33] ^= _, u[42] ^= E, u[43] ^= _, E = P ^ (q << 1 | De >>> 31), _ = O ^ (De << 1 | q >>> 31), u[4] ^= E, u[5] ^= _, u[14] ^= E, u[15] ^= _, u[24] ^= E, u[25] ^= _, u[34] ^= E, u[35] ^= _, u[44] ^= E, u[45] ^= _, E = Ct ^ (X << 1 | Z >>> 31), _ = D ^ (Z << 1 | X >>> 31), u[6] ^= E, u[7] ^= _, u[16] ^= E, u[17] ^= _, u[26] ^= E, u[27] ^= _, u[36] ^= E, u[37] ^= _, u[46] ^= E, u[47] ^= _, E = q ^ (R << 1 | T >>> 31), _ = De ^ (T << 1 | R >>> 31), u[8] ^= E, u[9] ^= _, u[18] ^= E, u[19] ^= _, u[28] ^= E, u[29] ^= _, u[38] ^= E, u[39] ^= _, u[48] ^= E, u[49] ^= _, Fe = u[0], $ = u[1], yt = u[11] << 4 | u[10] >>> 28, Je = u[10] << 4 | u[11] >>> 28, at = u[20] << 3 | u[21] >>> 29, Ke = u[21] << 3 | u[20] >>> 29, Ee = u[31] << 9 | u[30] >>> 23, Se = u[30] << 9 | u[31] >>> 23, gt = u[40] << 18 | u[41] >>> 14, At = u[41] << 18 | u[40] >>> 14, lt = u[2] << 1 | u[3] >>> 31, ze = u[3] << 1 | u[2] >>> 31, tt = u[13] << 12 | u[12] >>> 20, Te = u[12] << 12 | u[13] >>> 20, wt = u[22] << 10 | u[23] >>> 22, xt = u[23] << 10 | u[22] >>> 22, ut = u[33] << 13 | u[32] >>> 19, ht = u[32] << 13 | u[33] >>> 19, Ne = u[42] << 2 | u[43] >>> 30, Ie = u[43] << 2 | u[42] >>> 30, St = u[5] << 30 | u[4] >>> 2, Nt = u[4] << 30 | u[5] >>> 2, dt = u[14] << 6 | u[15] >>> 26, pt = u[15] << 6 | u[14] >>> 26, et = u[25] << 11 | u[24] >>> 21, rt = u[24] << 11 | u[25] >>> 21, Ge = u[34] << 15 | u[35] >>> 17, Mt = u[35] << 15 | u[34] >>> 17, He = u[45] << 29 | u[44] >>> 3, ct = u[44] << 29 | u[45] >>> 3, ft = u[6] << 28 | u[7] >>> 4, ot = u[7] << 28 | u[6] >>> 4, Ve = u[17] << 23 | u[16] >>> 9, It = u[16] << 23 | u[17] >>> 9, Le = u[26] << 25 | u[27] >>> 7, vt = u[27] << 25 | u[26] >>> 7, Ue = u[36] << 21 | u[37] >>> 11, it = u[37] << 21 | u[36] >>> 11, Et = u[47] << 24 | u[46] >>> 8, Ye = u[46] << 24 | u[47] >>> 8, Qe = u[8] << 27 | u[9] >>> 5, bt = u[9] << 27 | u[8] >>> 5, qe = u[18] << 20 | u[19] >>> 12, st = u[19] << 20 | u[18] >>> 12, _t = u[29] << 7 | u[28] >>> 25, Me = u[28] << 7 | u[29] >>> 25, mt = u[38] << 8 | u[39] >>> 24, je = u[39] << 8 | u[38] >>> 24, nt = u[48] << 14 | u[49] >>> 18, ke = u[49] << 14 | u[48] >>> 18, u[0] = Fe ^ ~tt & et, u[1] = $ ^ ~Te & rt, u[10] = ft ^ ~qe & at, u[11] = ot ^ ~st & Ke, u[20] = lt ^ ~dt & Le, u[21] = ze ^ ~pt & vt, u[30] = Qe ^ ~yt & wt, u[31] = bt ^ ~Je & xt, u[40] = St ^ ~Ve & _t, u[41] = Nt ^ ~It & Me, u[2] = tt ^ ~et & Ue, u[3] = Te ^ ~rt & it, u[12] = qe ^ ~at & ut, u[13] = st ^ ~Ke & ht, u[22] = dt ^ ~Le & mt, u[23] = pt ^ ~vt & je, u[32] = yt ^ ~wt & Ge, u[33] = Je ^ ~xt & Mt, u[42] = Ve ^ ~_t & Ee, u[43] = It ^ ~Me & Se, u[4] = et ^ ~Ue & nt, u[5] = rt ^ ~it & ke, u[14] = at ^ ~ut & He, u[15] = Ke ^ ~ht & ct, u[24] = Le ^ ~mt & gt, u[25] = vt ^ ~je & At, u[34] = wt ^ ~Ge & Et, u[35] = xt ^ ~Mt & Ye, u[44] = _t ^ ~Ee & Ne, u[45] = Me ^ ~Se & Ie, u[6] = Ue ^ ~nt & Fe, u[7] = it ^ ~ke & $, u[16] = ut ^ ~He & ft, u[17] = ht ^ ~ct & ot, u[26] = mt ^ ~gt & lt, u[27] = je ^ ~At & ze, u[36] = Ge ^ ~Et & Qe, u[37] = Mt ^ ~Ye & bt, u[46] = Ee ^ ~Ne & St, u[47] = Se ^ ~Ie & Nt, u[8] = nt ^ ~Fe & tt, u[9] = ke ^ ~$ & Te, u[18] = He ^ ~ft & qe, u[19] = ct ^ ~ot & st, u[28] = gt ^ ~lt & dt, u[29] = At ^ ~ze & pt, u[38] = Et ^ ~Qe & yt, u[39] = Ye ^ ~bt & Je, u[48] = Ne ^ ~St & Ve, u[49] = Ie ^ ~Nt & It, u[0] ^= C[B], u[1] ^= C[B + 1];\n        };\n        if (p) e.exports = f;\n        else for(c = 0; c < a.length; ++c)n[a[c]] = f[a[c]];\n    })();\n})(Pn);\nvar b0 = Pn.exports;\nconst y0 = \"logger/5.7.0\";\nlet Dn = !1, Fn = !1;\nconst Cr = {\n    debug: 1,\n    default: 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet Tn = Cr.default, gi = null;\nfunction w0() {\n    try {\n        const e = [];\n        if ([\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((t)=>{\n            try {\n                if (\"test\".normalize(t) !== \"test\") throw new Error(\"bad normalize\");\n            } catch (e1) {\n                e.push(t);\n            }\n        }), e.length) throw new Error(\"missing \" + e.join(\", \"));\n        if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) throw new Error(\"broken implementation\");\n    } catch (e) {\n        return e.message;\n    }\n    return null;\n}\nconst Un = w0();\nvar Ai;\n(function(e) {\n    e.DEBUG = \"DEBUG\", e.INFO = \"INFO\", e.WARNING = \"WARNING\", e.ERROR = \"ERROR\", e.OFF = \"OFF\";\n})(Ai || (Ai = {}));\nvar re;\n(function(e) {\n    e.UNKNOWN_ERROR = \"UNKNOWN_ERROR\", e.NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\", e.UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\", e.NETWORK_ERROR = \"NETWORK_ERROR\", e.SERVER_ERROR = \"SERVER_ERROR\", e.TIMEOUT = \"TIMEOUT\", e.BUFFER_OVERRUN = \"BUFFER_OVERRUN\", e.NUMERIC_FAULT = \"NUMERIC_FAULT\", e.MISSING_NEW = \"MISSING_NEW\", e.INVALID_ARGUMENT = \"INVALID_ARGUMENT\", e.MISSING_ARGUMENT = \"MISSING_ARGUMENT\", e.UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\", e.CALL_EXCEPTION = \"CALL_EXCEPTION\", e.INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\", e.NONCE_EXPIRED = \"NONCE_EXPIRED\", e.REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\", e.UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\", e.TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\", e.ACTION_REJECTED = \"ACTION_REJECTED\";\n})(re || (re = {}));\nconst kn = \"0123456789abcdef\";\nclass L {\n    _log(t, r) {\n        const i = t.toLowerCase();\n        Cr[i] == null && this.throwArgumentError(\"invalid log level name\", \"logLevel\", t), !(Tn > Cr[i]) && console.log.apply(console, r);\n    }\n    debug() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.DEBUG, t);\n    }\n    info() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.INFO, t);\n    }\n    warn() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.WARNING, t);\n    }\n    makeError(t, r, i) {\n        if (Fn) return this.makeError(\"censored error\", r, {});\n        r || (r = L.errors.UNKNOWN_ERROR), i || (i = {});\n        const n = [];\n        Object.keys(i).forEach((b)=>{\n            const m = i[b];\n            try {\n                if (m instanceof Uint8Array) {\n                    let w = \"\";\n                    for(let y = 0; y < m.length; y++)w += kn[m[y] >> 4], w += kn[m[y] & 15];\n                    n.push(b + \"=Uint8Array(0x\" + w + \")\");\n                } else n.push(b + \"=\" + JSON.stringify(m));\n            } catch (e) {\n                n.push(b + \"=\" + JSON.stringify(i[b].toString()));\n            }\n        }), n.push(\"code=\".concat(r)), n.push(\"version=\".concat(this.version));\n        const o = t;\n        let h = \"\";\n        switch(r){\n            case re.NUMERIC_FAULT:\n                {\n                    h = \"NUMERIC_FAULT\";\n                    const b = t;\n                    switch(b){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            h += \"-\" + b;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            h += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            h += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case re.CALL_EXCEPTION:\n            case re.INSUFFICIENT_FUNDS:\n            case re.MISSING_NEW:\n            case re.NONCE_EXPIRED:\n            case re.REPLACEMENT_UNDERPRICED:\n            case re.TRANSACTION_REPLACED:\n            case re.UNPREDICTABLE_GAS_LIMIT:\n                h = r;\n                break;\n        }\n        h && (t += \" [ See: https://links.ethers.org/v5-errors-\" + h + \" ]\"), n.length && (t += \" (\" + n.join(\", \") + \")\");\n        const p = new Error(t);\n        return p.reason = o, p.code = r, Object.keys(i).forEach(function(b) {\n            p[b] = i[b];\n        }), p;\n    }\n    throwError(t, r, i) {\n        throw this.makeError(t, r, i);\n    }\n    throwArgumentError(t, r, i) {\n        return this.throwError(t, L.errors.INVALID_ARGUMENT, {\n            argument: r,\n            value: i\n        });\n    }\n    assert(t, r, i, n) {\n        t || this.throwError(r, i, n);\n    }\n    assertArgument(t, r, i, n) {\n        t || this.throwArgumentError(r, i, n);\n    }\n    checkNormalize(t) {\n        Un && this.throwError(\"platform missing String.prototype.normalize\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"String.prototype.normalize\",\n            form: Un\n        });\n    }\n    checkSafeUint53(t, r) {\n        typeof t == \"number\" && (r == null && (r = \"value not safe\"), (t < 0 || t >= 9007199254740991) && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"out-of-safe-range\",\n            value: t\n        }), t % 1 && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"non-integer\",\n            value: t\n        }));\n    }\n    checkArgumentCount(t, r, i) {\n        i ? i = \": \" + i : i = \"\", t < r && this.throwError(\"missing argument\" + i, L.errors.MISSING_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        }), t > r && this.throwError(\"too many arguments\" + i, L.errors.UNEXPECTED_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        });\n    }\n    checkNew(t, r) {\n        (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    checkAbstract(t, r) {\n        t === r ? this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(r.name) + \" directly; use a sub-class\", L.errors.UNSUPPORTED_OPERATION, {\n            name: t.name,\n            operation: \"new\"\n        }) : (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    static globalLogger() {\n        return gi || (gi = new L(y0)), gi;\n    }\n    static setCensorship(t, r) {\n        if (!t && r && this.globalLogger().throwError(\"cannot permanently disable censorship\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setCensorship\"\n        }), Dn) {\n            if (!t) return;\n            this.globalLogger().throwError(\"error censorship permanent\", L.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        Fn = !!t, Dn = !!r;\n    }\n    static setLogLevel(t) {\n        const r = Cr[t.toLowerCase()];\n        if (r == null) {\n            L.globalLogger().warn(\"invalid log level - \" + t);\n            return;\n        }\n        Tn = r;\n    }\n    static from(t) {\n        return new L(t);\n    }\n    constructor(t){\n        Object.defineProperty(this, \"version\", {\n            enumerable: !0,\n            value: t,\n            writable: !1\n        });\n    }\n}\nL.errors = re, L.levels = Ai;\nconst x0 = \"bytes/5.7.0\", Dt = new L(x0);\nfunction qn(e) {\n    return !!e.toHexString;\n}\nfunction rr(e) {\n    return e.slice || (e.slice = function() {\n        const t = Array.prototype.slice.call(arguments);\n        return rr(new Uint8Array(Array.prototype.slice.apply(e, t)));\n    }), e;\n}\nfunction M0(e) {\n    return Qt(e) && !(e.length % 2) || ir(e);\n}\n_c15 = M0;\nfunction Kn(e) {\n    return typeof e == \"number\" && e == e && e % 1 === 0;\n}\n_c16 = Kn;\nfunction ir(e) {\n    if (e == null) return !1;\n    if (e.constructor === Uint8Array) return !0;\n    if (typeof e == \"string\" || !Kn(e.length) || e.length < 0) return !1;\n    for(let t = 0; t < e.length; t++){\n        const r = e[t];\n        if (!Kn(r) || r < 0 || r >= 256) return !1;\n    }\n    return !0;\n}\nfunction Ot(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid arrayify value\");\n        const r = [];\n        for(; e;)r.unshift(e & 255), e = parseInt(String(e / 256));\n        return r.length === 0 && r.push(0), rr(new Uint8Array(r));\n    }\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), qn(e) && (e = e.toHexString()), Qt(e)) {\n        let r = e.substring(2);\n        r.length % 2 && (t.hexPad === \"left\" ? r = \"0\" + r : t.hexPad === \"right\" ? r += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e));\n        const i = [];\n        for(let n = 0; n < r.length; n += 2)i.push(parseInt(r.substring(n, n + 2), 16));\n        return rr(new Uint8Array(i));\n    }\n    return ir(e) ? rr(new Uint8Array(e)) : Dt.throwArgumentError(\"invalid arrayify value\", \"value\", e);\n}\n_c17 = Ot;\nfunction E0(e) {\n    const t = e.map((n)=>Ot(n)), r = t.reduce((n, o)=>n + o.length, 0), i = new Uint8Array(r);\n    return t.reduce((n, o)=>(i.set(o, n), n + o.length), 0), rr(i);\n}\n_c18 = E0;\nfunction S0(e, t) {\n    e = Ot(e), e.length > t && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    const r = new Uint8Array(t);\n    return r.set(e, t - e.length), rr(r);\n}\n_c19 = S0;\nfunction Qt(e, t) {\n    return !(typeof e != \"string\" || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);\n}\n_c20 = Qt;\nconst bi = \"0123456789abcdef\";\nfunction Kt(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid hexlify value\");\n        let r = \"\";\n        for(; e;)r = bi[e & 15] + r, e = Math.floor(e / 16);\n        return r.length ? (r.length % 2 && (r = \"0\" + r), \"0x\" + r) : \"0x00\";\n    }\n    if (typeof e == \"bigint\") return e = e.toString(16), e.length % 2 ? \"0x0\" + e : \"0x\" + e;\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), qn(e)) return e.toHexString();\n    if (Qt(e)) return e.length % 2 && (t.hexPad === \"left\" ? e = \"0x0\" + e.substring(2) : t.hexPad === \"right\" ? e += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e)), e.toLowerCase();\n    if (ir(e)) {\n        let r = \"0x\";\n        for(let i = 0; i < e.length; i++){\n            let n = e[i];\n            r += bi[(n & 240) >> 4] + bi[n & 15];\n        }\n        return r;\n    }\n    return Dt.throwArgumentError(\"invalid hexlify value\", \"value\", e);\n}\n_c21 = Kt;\nfunction N0(e) {\n    if (typeof e != \"string\") e = Kt(e);\n    else if (!Qt(e) || e.length % 2) return null;\n    return (e.length - 2) / 2;\n}\n_c22 = N0;\nfunction Hn(e, t, r) {\n    return typeof e != \"string\" ? e = Kt(e) : (!Qt(e) || e.length % 2) && Dt.throwArgumentError(\"invalid hexData\", \"value\", e), t = 2 + 2 * t, r != null ? \"0x\" + e.substring(t, 2 + 2 * r) : \"0x\" + e.substring(t);\n}\n_c23 = Hn;\nfunction oe(e, t) {\n    for(typeof e != \"string\" ? e = Kt(e) : Qt(e) || Dt.throwArgumentError(\"invalid hex string\", \"value\", e), e.length > 2 * t + 2 && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[1]); e.length < 2 * t + 2;)e = \"0x0\" + e.substring(2);\n    return e;\n}\nfunction zn(e) {\n    const t = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (M0(e)) {\n        let r = Ot(e);\n        r.length === 64 ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64))) : r.length === 65 ? (t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64)), t.v = r[64]) : Dt.throwArgumentError(\"invalid signature string\", \"signature\", e), t.v < 27 && (t.v === 0 || t.v === 1 ? t.v += 27 : Dt.throwArgumentError(\"signature invalid v byte\", \"signature\", e)), t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = Kt(r.slice(32, 64));\n    } else {\n        if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, t._vs != null) {\n            const n = S0(Ot(t._vs), 32);\n            t._vs = Kt(n);\n            const o = n[0] >= 128 ? 1 : 0;\n            t.recoveryParam == null ? t.recoveryParam = o : t.recoveryParam !== o && Dt.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", e), n[0] &= 127;\n            const h = Kt(n);\n            t.s == null ? t.s = h : t.s !== h && Dt.throwArgumentError(\"signature v mismatch _vs\", \"signature\", e);\n        }\n        if (t.recoveryParam == null) t.v == null ? Dt.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", e) : t.v === 0 || t.v === 1 ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;\n        else if (t.v == null) t.v = 27 + t.recoveryParam;\n        else {\n            const n = t.v === 0 || t.v === 1 ? t.v : 1 - t.v % 2;\n            t.recoveryParam !== n && Dt.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", e);\n        }\n        t.r == null || !Qt(t.r) ? Dt.throwArgumentError(\"signature missing or invalid r\", \"signature\", e) : t.r = oe(t.r, 32), t.s == null || !Qt(t.s) ? Dt.throwArgumentError(\"signature missing or invalid s\", \"signature\", e) : t.s = oe(t.s, 32);\n        const r = Ot(t.s);\n        r[0] >= 128 && Dt.throwArgumentError(\"signature s out of range\", \"signature\", e), t.recoveryParam && (r[0] |= 128);\n        const i = Kt(r);\n        t._vs && (Qt(t._vs) || Dt.throwArgumentError(\"signature invalid _vs\", \"signature\", e), t._vs = oe(t._vs, 32)), t._vs == null ? t._vs = i : t._vs !== i && Dt.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", e);\n    }\n    return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;\n}\nfunction yi(e) {\n    return \"0x\" + b0.keccak_256(Ot(e));\n}\nvar Ln = {\n    exports: {}\n}, I0 = {}, _0 = Object.freeze({\n    __proto__: null,\n    default: I0\n}), B0 = A0(_0);\n(function(e) {\n    (function(t, r) {\n        function i(A, f) {\n            if (!A) throw new Error(f || \"Assertion failed\");\n        }\n        function n(A, f) {\n            A.super_ = f;\n            var a = function() {};\n            a.prototype = f.prototype, A.prototype = new a, A.prototype.constructor = A;\n        }\n        function o(A, f, a) {\n            if (o.isBN(A)) return A;\n            this.negative = 0, this.words = null, this.length = 0, this.red = null, A !== null && ((f === \"le\" || f === \"be\") && (a = f, f = 10), this._init(A || 0, f || 10, a || \"be\"));\n        }\n        typeof t == \"object\" ? t.exports = o : r.BN = o, o.BN = o, o.wordSize = 26;\n        var h;\n        try {\n             true && typeof window.Buffer < \"u\" ? h = window.Buffer : h = B0.Buffer;\n        } catch (e) {}\n        o.isBN = function(f) {\n            return f instanceof o ? !0 : f !== null && typeof f == \"object\" && f.constructor.wordSize === o.wordSize && Array.isArray(f.words);\n        }, o.max = function(f, a) {\n            return f.cmp(a) > 0 ? f : a;\n        }, o.min = function(f, a) {\n            return f.cmp(a) < 0 ? f : a;\n        }, o.prototype._init = function(f, a, c) {\n            if (typeof f == \"number\") return this._initNumber(f, a, c);\n            if (typeof f == \"object\") return this._initArray(f, a, c);\n            a === \"hex\" && (a = 16), i(a === (a | 0) && a >= 2 && a <= 36), f = f.toString().replace(/\\s+/g, \"\");\n            var d = 0;\n            f[0] === \"-\" && (d++, this.negative = 1), d < f.length && (a === 16 ? this._parseHex(f, d, c) : (this._parseBase(f, a, d), c === \"le\" && this._initArray(this.toArray(), a, c)));\n        }, o.prototype._initNumber = function(f, a, c) {\n            f < 0 && (this.negative = 1, f = -f), f < 67108864 ? (this.words = [\n                f & 67108863\n            ], this.length = 1) : f < 4503599627370496 ? (this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863\n            ], this.length = 2) : (i(f < 9007199254740992), this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863,\n                1\n            ], this.length = 3), c === \"le\" && this._initArray(this.toArray(), a, c);\n        }, o.prototype._initArray = function(f, a, c) {\n            if (i(typeof f.length == \"number\"), f.length <= 0) return this.words = [\n                0\n            ], this.length = 1, this;\n            this.length = Math.ceil(f.length / 3), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g, x, M = 0;\n            if (c === \"be\") for(d = f.length - 1, g = 0; d >= 0; d -= 3)x = f[d] | f[d - 1] << 8 | f[d - 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            else if (c === \"le\") for(d = 0, g = 0; d < f.length; d += 3)x = f[d] | f[d + 1] << 8 | f[d + 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            return this._strip();\n        };\n        function p(A, f) {\n            var a = A.charCodeAt(f);\n            if (a >= 48 && a <= 57) return a - 48;\n            if (a >= 65 && a <= 70) return a - 55;\n            if (a >= 97 && a <= 102) return a - 87;\n            i(!1, \"Invalid character in \" + A);\n        }\n        function b(A, f, a) {\n            var c = p(A, a);\n            return a - 1 >= f && (c |= p(A, a - 1) << 4), c;\n        }\n        o.prototype._parseHex = function(f, a, c) {\n            this.length = Math.ceil((f.length - a) / 6), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g = 0, x = 0, M;\n            if (c === \"be\") for(d = f.length - 1; d >= a; d -= 2)M = b(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            else {\n                var l = f.length - a;\n                for(d = l % 2 === 0 ? a + 1 : a; d < f.length; d += 2)M = b(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            }\n            this._strip();\n        };\n        function m(A, f, a, c) {\n            for(var d = 0, g = 0, x = Math.min(A.length, a), M = f; M < x; M++){\n                var l = A.charCodeAt(M) - 48;\n                d *= c, l >= 49 ? g = l - 49 + 10 : l >= 17 ? g = l - 17 + 10 : g = l, i(l >= 0 && g < c, \"Invalid character\"), d += g;\n            }\n            return d;\n        }\n        o.prototype._parseBase = function(f, a, c) {\n            this.words = [\n                0\n            ], this.length = 1;\n            for(var d = 0, g = 1; g <= 67108863; g *= a)d++;\n            d--, g = g / a | 0;\n            for(var x = f.length - c, M = x % d, l = Math.min(x, x - M) + c, s = 0, v = c; v < l; v += d)s = m(f, v, v + d, a), this.imuln(g), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            if (M !== 0) {\n                var k = 1;\n                for(s = m(f, v, f.length, a), v = 0; v < M; v++)k *= a;\n                this.imuln(k), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            }\n            this._strip();\n        }, o.prototype.copy = function(f) {\n            f.words = new Array(this.length);\n            for(var a = 0; a < this.length; a++)f.words[a] = this.words[a];\n            f.length = this.length, f.negative = this.negative, f.red = this.red;\n        };\n        function w(A, f) {\n            A.words = f.words, A.length = f.length, A.negative = f.negative, A.red = f.red;\n        }\n        if (o.prototype._move = function(f) {\n            w(f, this);\n        }, o.prototype.clone = function() {\n            var f = new o(null);\n            return this.copy(f), f;\n        }, o.prototype._expand = function(f) {\n            for(; this.length < f;)this.words[this.length++] = 0;\n            return this;\n        }, o.prototype._strip = function() {\n            for(; this.length > 1 && this.words[this.length - 1] === 0;)this.length--;\n            return this._normSign();\n        }, o.prototype._normSign = function() {\n            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;\n        }, typeof Symbol < \"u\" && typeof Symbol.for == \"function\") try {\n            o.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = y;\n        } catch (e) {\n            o.prototype.inspect = y;\n        }\n        else o.prototype.inspect = y;\n        function y() {\n            return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n        }\n        var S = [\n            \"\",\n            \"0\",\n            \"00\",\n            \"000\",\n            \"0000\",\n            \"00000\",\n            \"000000\",\n            \"0000000\",\n            \"00000000\",\n            \"000000000\",\n            \"0000000000\",\n            \"00000000000\",\n            \"000000000000\",\n            \"0000000000000\",\n            \"00000000000000\",\n            \"000000000000000\",\n            \"0000000000000000\",\n            \"00000000000000000\",\n            \"000000000000000000\",\n            \"0000000000000000000\",\n            \"00000000000000000000\",\n            \"000000000000000000000\",\n            \"0000000000000000000000\",\n            \"00000000000000000000000\",\n            \"000000000000000000000000\",\n            \"0000000000000000000000000\"\n        ], I = [\n            0,\n            0,\n            25,\n            16,\n            12,\n            11,\n            10,\n            9,\n            8,\n            8,\n            7,\n            7,\n            7,\n            7,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5\n        ], N = [\n            0,\n            0,\n            33554432,\n            43046721,\n            16777216,\n            48828125,\n            60466176,\n            40353607,\n            16777216,\n            43046721,\n            1e7,\n            19487171,\n            35831808,\n            62748517,\n            7529536,\n            11390625,\n            16777216,\n            24137569,\n            34012224,\n            47045881,\n            64e6,\n            4084101,\n            5153632,\n            6436343,\n            7962624,\n            9765625,\n            11881376,\n            14348907,\n            17210368,\n            20511149,\n            243e5,\n            28629151,\n            33554432,\n            39135393,\n            45435424,\n            52521875,\n            60466176\n        ];\n        o.prototype.toString = function(f, a) {\n            f = f || 10, a = a | 0 || 1;\n            var c;\n            if (f === 16 || f === \"hex\") {\n                c = \"\";\n                for(var d = 0, g = 0, x = 0; x < this.length; x++){\n                    var M = this.words[x], l = ((M << d | g) & 16777215).toString(16);\n                    g = M >>> 24 - d & 16777215, d += 2, d >= 26 && (d -= 26, x--), g !== 0 || x !== this.length - 1 ? c = S[6 - l.length] + l + c : c = l + c;\n                }\n                for(g !== 0 && (c = g.toString(16) + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            if (f === (f | 0) && f >= 2 && f <= 36) {\n                var s = I[f], v = N[f];\n                c = \"\";\n                var k = this.clone();\n                for(k.negative = 0; !k.isZero();){\n                    var u = k.modrn(v).toString(f);\n                    k = k.idivn(v), k.isZero() ? c = u + c : c = S[s - u.length] + u + c;\n                }\n                for(this.isZero() && (c = \"0\" + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            i(!1, \"Base should be between 2 and 36\");\n        }, o.prototype.toNumber = function() {\n            var f = this.words[0];\n            return this.length === 2 ? f += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? f += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && i(!1, \"Number can only safely store up to 53 bits\"), this.negative !== 0 ? -f : f;\n        }, o.prototype.toJSON = function() {\n            return this.toString(16, 2);\n        }, h && (o.prototype.toBuffer = function(f, a) {\n            return this.toArrayLike(h, f, a);\n        }), o.prototype.toArray = function(f, a) {\n            return this.toArrayLike(Array, f, a);\n        };\n        var C = function(f, a) {\n            return f.allocUnsafe ? f.allocUnsafe(a) : new f(a);\n        };\n        o.prototype.toArrayLike = function(f, a, c) {\n            this._strip();\n            var d = this.byteLength(), g = c || Math.max(1, d);\n            i(d <= g, \"byte array longer than desired length\"), i(g > 0, \"Requested array length <= 0\");\n            var x = C(f, g), M = a === \"le\" ? \"LE\" : \"BE\";\n            return this[\"_toArrayLike\" + M](x, d), x;\n        }, o.prototype._toArrayLikeLE = function(f, a) {\n            for(var c = 0, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c++] = M & 255, c < f.length && (f[c++] = M >> 8 & 255), c < f.length && (f[c++] = M >> 16 & 255), x === 6 ? (c < f.length && (f[c++] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c < f.length) for(f[c++] = d; c < f.length;)f[c++] = 0;\n        }, o.prototype._toArrayLikeBE = function(f, a) {\n            for(var c = f.length - 1, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c--] = M & 255, c >= 0 && (f[c--] = M >> 8 & 255), c >= 0 && (f[c--] = M >> 16 & 255), x === 6 ? (c >= 0 && (f[c--] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c >= 0) for(f[c--] = d; c >= 0;)f[c--] = 0;\n        }, Math.clz32 ? o.prototype._countBits = function(f) {\n            return 32 - Math.clz32(f);\n        } : o.prototype._countBits = function(f) {\n            var a = f, c = 0;\n            return a >= 4096 && (c += 13, a >>>= 13), a >= 64 && (c += 7, a >>>= 7), a >= 8 && (c += 4, a >>>= 4), a >= 2 && (c += 2, a >>>= 2), c + a;\n        }, o.prototype._zeroBits = function(f) {\n            if (f === 0) return 26;\n            var a = f, c = 0;\n            return a & 8191 || (c += 13, a >>>= 13), a & 127 || (c += 7, a >>>= 7), a & 15 || (c += 4, a >>>= 4), a & 3 || (c += 2, a >>>= 2), a & 1 || c++, c;\n        }, o.prototype.bitLength = function() {\n            var f = this.words[this.length - 1], a = this._countBits(f);\n            return (this.length - 1) * 26 + a;\n        };\n        function F(A) {\n            for(var f = new Array(A.bitLength()), a = 0; a < f.length; a++){\n                var c = a / 26 | 0, d = a % 26;\n                f[a] = A.words[c] >>> d & 1;\n            }\n            return f;\n        }\n        o.prototype.zeroBits = function() {\n            if (this.isZero()) return 0;\n            for(var f = 0, a = 0; a < this.length; a++){\n                var c = this._zeroBits(this.words[a]);\n                if (f += c, c !== 26) break;\n            }\n            return f;\n        }, o.prototype.byteLength = function() {\n            return Math.ceil(this.bitLength() / 8);\n        }, o.prototype.toTwos = function(f) {\n            return this.negative !== 0 ? this.abs().inotn(f).iaddn(1) : this.clone();\n        }, o.prototype.fromTwos = function(f) {\n            return this.testn(f - 1) ? this.notn(f).iaddn(1).ineg() : this.clone();\n        }, o.prototype.isNeg = function() {\n            return this.negative !== 0;\n        }, o.prototype.neg = function() {\n            return this.clone().ineg();\n        }, o.prototype.ineg = function() {\n            return this.isZero() || (this.negative ^= 1), this;\n        }, o.prototype.iuor = function(f) {\n            for(; this.length < f.length;)this.words[this.length++] = 0;\n            for(var a = 0; a < f.length; a++)this.words[a] = this.words[a] | f.words[a];\n            return this._strip();\n        }, o.prototype.ior = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuor(f);\n        }, o.prototype.or = function(f) {\n            return this.length > f.length ? this.clone().ior(f) : f.clone().ior(this);\n        }, o.prototype.uor = function(f) {\n            return this.length > f.length ? this.clone().iuor(f) : f.clone().iuor(this);\n        }, o.prototype.iuand = function(f) {\n            var a;\n            this.length > f.length ? a = f : a = this;\n            for(var c = 0; c < a.length; c++)this.words[c] = this.words[c] & f.words[c];\n            return this.length = a.length, this._strip();\n        }, o.prototype.iand = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuand(f);\n        }, o.prototype.and = function(f) {\n            return this.length > f.length ? this.clone().iand(f) : f.clone().iand(this);\n        }, o.prototype.uand = function(f) {\n            return this.length > f.length ? this.clone().iuand(f) : f.clone().iuand(this);\n        }, o.prototype.iuxor = function(f) {\n            var a, c;\n            this.length > f.length ? (a = this, c = f) : (a = f, c = this);\n            for(var d = 0; d < c.length; d++)this.words[d] = a.words[d] ^ c.words[d];\n            if (this !== a) for(; d < a.length; d++)this.words[d] = a.words[d];\n            return this.length = a.length, this._strip();\n        }, o.prototype.ixor = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuxor(f);\n        }, o.prototype.xor = function(f) {\n            return this.length > f.length ? this.clone().ixor(f) : f.clone().ixor(this);\n        }, o.prototype.uxor = function(f) {\n            return this.length > f.length ? this.clone().iuxor(f) : f.clone().iuxor(this);\n        }, o.prototype.inotn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = Math.ceil(f / 26) | 0, c = f % 26;\n            this._expand(a), c > 0 && a--;\n            for(var d = 0; d < a; d++)this.words[d] = ~this.words[d] & 67108863;\n            return c > 0 && (this.words[d] = ~this.words[d] & 67108863 >> 26 - c), this._strip();\n        }, o.prototype.notn = function(f) {\n            return this.clone().inotn(f);\n        }, o.prototype.setn = function(f, a) {\n            i(typeof f == \"number\" && f >= 0);\n            var c = f / 26 | 0, d = f % 26;\n            return this._expand(c + 1), a ? this.words[c] = this.words[c] | 1 << d : this.words[c] = this.words[c] & ~(1 << d), this._strip();\n        }, o.prototype.iadd = function(f) {\n            var a;\n            if (this.negative !== 0 && f.negative === 0) return this.negative = 0, a = this.isub(f), this.negative ^= 1, this._normSign();\n            if (this.negative === 0 && f.negative !== 0) return f.negative = 0, a = this.isub(f), f.negative = 1, a._normSign();\n            var c, d;\n            this.length > f.length ? (c = this, d = f) : (c = f, d = this);\n            for(var g = 0, x = 0; x < d.length; x++)a = (c.words[x] | 0) + (d.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            for(; g !== 0 && x < c.length; x++)a = (c.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            if (this.length = c.length, g !== 0) this.words[this.length] = g, this.length++;\n            else if (c !== this) for(; x < c.length; x++)this.words[x] = c.words[x];\n            return this;\n        }, o.prototype.add = function(f) {\n            var a;\n            return f.negative !== 0 && this.negative === 0 ? (f.negative = 0, a = this.sub(f), f.negative ^= 1, a) : f.negative === 0 && this.negative !== 0 ? (this.negative = 0, a = f.sub(this), this.negative = 1, a) : this.length > f.length ? this.clone().iadd(f) : f.clone().iadd(this);\n        }, o.prototype.isub = function(f) {\n            if (f.negative !== 0) {\n                f.negative = 0;\n                var a = this.iadd(f);\n                return f.negative = 1, a._normSign();\n            } else if (this.negative !== 0) return this.negative = 0, this.iadd(f), this.negative = 1, this._normSign();\n            var c = this.cmp(f);\n            if (c === 0) return this.negative = 0, this.length = 1, this.words[0] = 0, this;\n            var d, g;\n            c > 0 ? (d = this, g = f) : (d = f, g = this);\n            for(var x = 0, M = 0; M < g.length; M++)a = (d.words[M] | 0) - (g.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            for(; x !== 0 && M < d.length; M++)a = (d.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            if (x === 0 && M < d.length && d !== this) for(; M < d.length; M++)this.words[M] = d.words[M];\n            return this.length = Math.max(this.length, M), d !== this && (this.negative = 1), this._strip();\n        }, o.prototype.sub = function(f) {\n            return this.clone().isub(f);\n        };\n        function U(A, f, a) {\n            a.negative = f.negative ^ A.negative;\n            var c = A.length + f.length | 0;\n            a.length = c, c = c - 1 | 0;\n            var d = A.words[0] | 0, g = f.words[0] | 0, x = d * g, M = x & 67108863, l = x / 67108864 | 0;\n            a.words[0] = M;\n            for(var s = 1; s < c; s++){\n                for(var v = l >>> 26, k = l & 67108863, u = Math.min(s, f.length - 1), E = Math.max(0, s - A.length + 1); E <= u; E++){\n                    var _ = s - E | 0;\n                    d = A.words[_] | 0, g = f.words[E] | 0, x = d * g + k, v += x / 67108864 | 0, k = x & 67108863;\n                }\n                a.words[s] = k | 0, l = v | 0;\n            }\n            return l !== 0 ? a.words[s] = l | 0 : a.length--, a._strip();\n        }\n        var J = function(f, a, c) {\n            var d = f.words, g = a.words, x = c.words, M = 0, l, s, v, k = d[0] | 0, u = k & 8191, E = k >>> 13, _ = d[1] | 0, B = _ & 8191, R = _ >>> 13, T = d[2] | 0, P = T & 8191, O = T >>> 13, Ct = d[3] | 0, D = Ct & 8191, q = Ct >>> 13, De = d[4] | 0, X = De & 8191, Z = De >>> 13, Fe = d[5] | 0, $ = Fe & 8191, tt = Fe >>> 13, Te = d[6] | 0, et = Te & 8191, rt = Te >>> 13, Ue = d[7] | 0, it = Ue & 8191, nt = Ue >>> 13, ke = d[8] | 0, ft = ke & 8191, ot = ke >>> 13, qe = d[9] | 0, st = qe & 8191, at = qe >>> 13, Ke = g[0] | 0, ut = Ke & 8191, ht = Ke >>> 13, He = g[1] | 0, ct = He & 8191, lt = He >>> 13, ze = g[2] | 0, dt = ze & 8191, pt = ze >>> 13, Le = g[3] | 0, vt = Le & 8191, mt = Le >>> 13, je = g[4] | 0, gt = je & 8191, At = je >>> 13, Qe = g[5] | 0, bt = Qe & 8191, yt = Qe >>> 13, Je = g[6] | 0, wt = Je & 8191, xt = Je >>> 13, Ge = g[7] | 0, Mt = Ge & 8191, Et = Ge >>> 13, Ye = g[8] | 0, St = Ye & 8191, Nt = Ye >>> 13, Ve = g[9] | 0, It = Ve & 8191, _t = Ve >>> 13;\n            c.negative = f.negative ^ a.negative, c.length = 19, l = Math.imul(u, ut), s = Math.imul(u, ht), s = s + Math.imul(E, ut) | 0, v = Math.imul(E, ht);\n            var Me = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, l = Math.imul(B, ut), s = Math.imul(B, ht), s = s + Math.imul(R, ut) | 0, v = Math.imul(R, ht), l = l + Math.imul(u, ct) | 0, s = s + Math.imul(u, lt) | 0, s = s + Math.imul(E, ct) | 0, v = v + Math.imul(E, lt) | 0;\n            var Ee = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, l = Math.imul(P, ut), s = Math.imul(P, ht), s = s + Math.imul(O, ut) | 0, v = Math.imul(O, ht), l = l + Math.imul(B, ct) | 0, s = s + Math.imul(B, lt) | 0, s = s + Math.imul(R, ct) | 0, v = v + Math.imul(R, lt) | 0, l = l + Math.imul(u, dt) | 0, s = s + Math.imul(u, pt) | 0, s = s + Math.imul(E, dt) | 0, v = v + Math.imul(E, pt) | 0;\n            var Se = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, l = Math.imul(D, ut), s = Math.imul(D, ht), s = s + Math.imul(q, ut) | 0, v = Math.imul(q, ht), l = l + Math.imul(P, ct) | 0, s = s + Math.imul(P, lt) | 0, s = s + Math.imul(O, ct) | 0, v = v + Math.imul(O, lt) | 0, l = l + Math.imul(B, dt) | 0, s = s + Math.imul(B, pt) | 0, s = s + Math.imul(R, dt) | 0, v = v + Math.imul(R, pt) | 0, l = l + Math.imul(u, vt) | 0, s = s + Math.imul(u, mt) | 0, s = s + Math.imul(E, vt) | 0, v = v + Math.imul(E, mt) | 0;\n            var Ne = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, l = Math.imul(X, ut), s = Math.imul(X, ht), s = s + Math.imul(Z, ut) | 0, v = Math.imul(Z, ht), l = l + Math.imul(D, ct) | 0, s = s + Math.imul(D, lt) | 0, s = s + Math.imul(q, ct) | 0, v = v + Math.imul(q, lt) | 0, l = l + Math.imul(P, dt) | 0, s = s + Math.imul(P, pt) | 0, s = s + Math.imul(O, dt) | 0, v = v + Math.imul(O, pt) | 0, l = l + Math.imul(B, vt) | 0, s = s + Math.imul(B, mt) | 0, s = s + Math.imul(R, vt) | 0, v = v + Math.imul(R, mt) | 0, l = l + Math.imul(u, gt) | 0, s = s + Math.imul(u, At) | 0, s = s + Math.imul(E, gt) | 0, v = v + Math.imul(E, At) | 0;\n            var Ie = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, l = Math.imul($, ut), s = Math.imul($, ht), s = s + Math.imul(tt, ut) | 0, v = Math.imul(tt, ht), l = l + Math.imul(X, ct) | 0, s = s + Math.imul(X, lt) | 0, s = s + Math.imul(Z, ct) | 0, v = v + Math.imul(Z, lt) | 0, l = l + Math.imul(D, dt) | 0, s = s + Math.imul(D, pt) | 0, s = s + Math.imul(q, dt) | 0, v = v + Math.imul(q, pt) | 0, l = l + Math.imul(P, vt) | 0, s = s + Math.imul(P, mt) | 0, s = s + Math.imul(O, vt) | 0, v = v + Math.imul(O, mt) | 0, l = l + Math.imul(B, gt) | 0, s = s + Math.imul(B, At) | 0, s = s + Math.imul(R, gt) | 0, v = v + Math.imul(R, At) | 0, l = l + Math.imul(u, bt) | 0, s = s + Math.imul(u, yt) | 0, s = s + Math.imul(E, bt) | 0, v = v + Math.imul(E, yt) | 0;\n            var Wr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, l = Math.imul(et, ut), s = Math.imul(et, ht), s = s + Math.imul(rt, ut) | 0, v = Math.imul(rt, ht), l = l + Math.imul($, ct) | 0, s = s + Math.imul($, lt) | 0, s = s + Math.imul(tt, ct) | 0, v = v + Math.imul(tt, lt) | 0, l = l + Math.imul(X, dt) | 0, s = s + Math.imul(X, pt) | 0, s = s + Math.imul(Z, dt) | 0, v = v + Math.imul(Z, pt) | 0, l = l + Math.imul(D, vt) | 0, s = s + Math.imul(D, mt) | 0, s = s + Math.imul(q, vt) | 0, v = v + Math.imul(q, mt) | 0, l = l + Math.imul(P, gt) | 0, s = s + Math.imul(P, At) | 0, s = s + Math.imul(O, gt) | 0, v = v + Math.imul(O, At) | 0, l = l + Math.imul(B, bt) | 0, s = s + Math.imul(B, yt) | 0, s = s + Math.imul(R, bt) | 0, v = v + Math.imul(R, yt) | 0, l = l + Math.imul(u, wt) | 0, s = s + Math.imul(u, xt) | 0, s = s + Math.imul(E, wt) | 0, v = v + Math.imul(E, xt) | 0;\n            var Xr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Xr >>> 26) | 0, Xr &= 67108863, l = Math.imul(it, ut), s = Math.imul(it, ht), s = s + Math.imul(nt, ut) | 0, v = Math.imul(nt, ht), l = l + Math.imul(et, ct) | 0, s = s + Math.imul(et, lt) | 0, s = s + Math.imul(rt, ct) | 0, v = v + Math.imul(rt, lt) | 0, l = l + Math.imul($, dt) | 0, s = s + Math.imul($, pt) | 0, s = s + Math.imul(tt, dt) | 0, v = v + Math.imul(tt, pt) | 0, l = l + Math.imul(X, vt) | 0, s = s + Math.imul(X, mt) | 0, s = s + Math.imul(Z, vt) | 0, v = v + Math.imul(Z, mt) | 0, l = l + Math.imul(D, gt) | 0, s = s + Math.imul(D, At) | 0, s = s + Math.imul(q, gt) | 0, v = v + Math.imul(q, At) | 0, l = l + Math.imul(P, bt) | 0, s = s + Math.imul(P, yt) | 0, s = s + Math.imul(O, bt) | 0, v = v + Math.imul(O, yt) | 0, l = l + Math.imul(B, wt) | 0, s = s + Math.imul(B, xt) | 0, s = s + Math.imul(R, wt) | 0, v = v + Math.imul(R, xt) | 0, l = l + Math.imul(u, Mt) | 0, s = s + Math.imul(u, Et) | 0, s = s + Math.imul(E, Mt) | 0, v = v + Math.imul(E, Et) | 0;\n            var Zr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Zr >>> 26) | 0, Zr &= 67108863, l = Math.imul(ft, ut), s = Math.imul(ft, ht), s = s + Math.imul(ot, ut) | 0, v = Math.imul(ot, ht), l = l + Math.imul(it, ct) | 0, s = s + Math.imul(it, lt) | 0, s = s + Math.imul(nt, ct) | 0, v = v + Math.imul(nt, lt) | 0, l = l + Math.imul(et, dt) | 0, s = s + Math.imul(et, pt) | 0, s = s + Math.imul(rt, dt) | 0, v = v + Math.imul(rt, pt) | 0, l = l + Math.imul($, vt) | 0, s = s + Math.imul($, mt) | 0, s = s + Math.imul(tt, vt) | 0, v = v + Math.imul(tt, mt) | 0, l = l + Math.imul(X, gt) | 0, s = s + Math.imul(X, At) | 0, s = s + Math.imul(Z, gt) | 0, v = v + Math.imul(Z, At) | 0, l = l + Math.imul(D, bt) | 0, s = s + Math.imul(D, yt) | 0, s = s + Math.imul(q, bt) | 0, v = v + Math.imul(q, yt) | 0, l = l + Math.imul(P, wt) | 0, s = s + Math.imul(P, xt) | 0, s = s + Math.imul(O, wt) | 0, v = v + Math.imul(O, xt) | 0, l = l + Math.imul(B, Mt) | 0, s = s + Math.imul(B, Et) | 0, s = s + Math.imul(R, Mt) | 0, v = v + Math.imul(R, Et) | 0, l = l + Math.imul(u, St) | 0, s = s + Math.imul(u, Nt) | 0, s = s + Math.imul(E, St) | 0, v = v + Math.imul(E, Nt) | 0;\n            var $r = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + ($r >>> 26) | 0, $r &= 67108863, l = Math.imul(st, ut), s = Math.imul(st, ht), s = s + Math.imul(at, ut) | 0, v = Math.imul(at, ht), l = l + Math.imul(ft, ct) | 0, s = s + Math.imul(ft, lt) | 0, s = s + Math.imul(ot, ct) | 0, v = v + Math.imul(ot, lt) | 0, l = l + Math.imul(it, dt) | 0, s = s + Math.imul(it, pt) | 0, s = s + Math.imul(nt, dt) | 0, v = v + Math.imul(nt, pt) | 0, l = l + Math.imul(et, vt) | 0, s = s + Math.imul(et, mt) | 0, s = s + Math.imul(rt, vt) | 0, v = v + Math.imul(rt, mt) | 0, l = l + Math.imul($, gt) | 0, s = s + Math.imul($, At) | 0, s = s + Math.imul(tt, gt) | 0, v = v + Math.imul(tt, At) | 0, l = l + Math.imul(X, bt) | 0, s = s + Math.imul(X, yt) | 0, s = s + Math.imul(Z, bt) | 0, v = v + Math.imul(Z, yt) | 0, l = l + Math.imul(D, wt) | 0, s = s + Math.imul(D, xt) | 0, s = s + Math.imul(q, wt) | 0, v = v + Math.imul(q, xt) | 0, l = l + Math.imul(P, Mt) | 0, s = s + Math.imul(P, Et) | 0, s = s + Math.imul(O, Mt) | 0, v = v + Math.imul(O, Et) | 0, l = l + Math.imul(B, St) | 0, s = s + Math.imul(B, Nt) | 0, s = s + Math.imul(R, St) | 0, v = v + Math.imul(R, Nt) | 0, l = l + Math.imul(u, It) | 0, s = s + Math.imul(u, _t) | 0, s = s + Math.imul(E, It) | 0, v = v + Math.imul(E, _t) | 0;\n            var ti = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ti >>> 26) | 0, ti &= 67108863, l = Math.imul(st, ct), s = Math.imul(st, lt), s = s + Math.imul(at, ct) | 0, v = Math.imul(at, lt), l = l + Math.imul(ft, dt) | 0, s = s + Math.imul(ft, pt) | 0, s = s + Math.imul(ot, dt) | 0, v = v + Math.imul(ot, pt) | 0, l = l + Math.imul(it, vt) | 0, s = s + Math.imul(it, mt) | 0, s = s + Math.imul(nt, vt) | 0, v = v + Math.imul(nt, mt) | 0, l = l + Math.imul(et, gt) | 0, s = s + Math.imul(et, At) | 0, s = s + Math.imul(rt, gt) | 0, v = v + Math.imul(rt, At) | 0, l = l + Math.imul($, bt) | 0, s = s + Math.imul($, yt) | 0, s = s + Math.imul(tt, bt) | 0, v = v + Math.imul(tt, yt) | 0, l = l + Math.imul(X, wt) | 0, s = s + Math.imul(X, xt) | 0, s = s + Math.imul(Z, wt) | 0, v = v + Math.imul(Z, xt) | 0, l = l + Math.imul(D, Mt) | 0, s = s + Math.imul(D, Et) | 0, s = s + Math.imul(q, Mt) | 0, v = v + Math.imul(q, Et) | 0, l = l + Math.imul(P, St) | 0, s = s + Math.imul(P, Nt) | 0, s = s + Math.imul(O, St) | 0, v = v + Math.imul(O, Nt) | 0, l = l + Math.imul(B, It) | 0, s = s + Math.imul(B, _t) | 0, s = s + Math.imul(R, It) | 0, v = v + Math.imul(R, _t) | 0;\n            var ei = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ei >>> 26) | 0, ei &= 67108863, l = Math.imul(st, dt), s = Math.imul(st, pt), s = s + Math.imul(at, dt) | 0, v = Math.imul(at, pt), l = l + Math.imul(ft, vt) | 0, s = s + Math.imul(ft, mt) | 0, s = s + Math.imul(ot, vt) | 0, v = v + Math.imul(ot, mt) | 0, l = l + Math.imul(it, gt) | 0, s = s + Math.imul(it, At) | 0, s = s + Math.imul(nt, gt) | 0, v = v + Math.imul(nt, At) | 0, l = l + Math.imul(et, bt) | 0, s = s + Math.imul(et, yt) | 0, s = s + Math.imul(rt, bt) | 0, v = v + Math.imul(rt, yt) | 0, l = l + Math.imul($, wt) | 0, s = s + Math.imul($, xt) | 0, s = s + Math.imul(tt, wt) | 0, v = v + Math.imul(tt, xt) | 0, l = l + Math.imul(X, Mt) | 0, s = s + Math.imul(X, Et) | 0, s = s + Math.imul(Z, Mt) | 0, v = v + Math.imul(Z, Et) | 0, l = l + Math.imul(D, St) | 0, s = s + Math.imul(D, Nt) | 0, s = s + Math.imul(q, St) | 0, v = v + Math.imul(q, Nt) | 0, l = l + Math.imul(P, It) | 0, s = s + Math.imul(P, _t) | 0, s = s + Math.imul(O, It) | 0, v = v + Math.imul(O, _t) | 0;\n            var ri = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ri >>> 26) | 0, ri &= 67108863, l = Math.imul(st, vt), s = Math.imul(st, mt), s = s + Math.imul(at, vt) | 0, v = Math.imul(at, mt), l = l + Math.imul(ft, gt) | 0, s = s + Math.imul(ft, At) | 0, s = s + Math.imul(ot, gt) | 0, v = v + Math.imul(ot, At) | 0, l = l + Math.imul(it, bt) | 0, s = s + Math.imul(it, yt) | 0, s = s + Math.imul(nt, bt) | 0, v = v + Math.imul(nt, yt) | 0, l = l + Math.imul(et, wt) | 0, s = s + Math.imul(et, xt) | 0, s = s + Math.imul(rt, wt) | 0, v = v + Math.imul(rt, xt) | 0, l = l + Math.imul($, Mt) | 0, s = s + Math.imul($, Et) | 0, s = s + Math.imul(tt, Mt) | 0, v = v + Math.imul(tt, Et) | 0, l = l + Math.imul(X, St) | 0, s = s + Math.imul(X, Nt) | 0, s = s + Math.imul(Z, St) | 0, v = v + Math.imul(Z, Nt) | 0, l = l + Math.imul(D, It) | 0, s = s + Math.imul(D, _t) | 0, s = s + Math.imul(q, It) | 0, v = v + Math.imul(q, _t) | 0;\n            var ii = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ii >>> 26) | 0, ii &= 67108863, l = Math.imul(st, gt), s = Math.imul(st, At), s = s + Math.imul(at, gt) | 0, v = Math.imul(at, At), l = l + Math.imul(ft, bt) | 0, s = s + Math.imul(ft, yt) | 0, s = s + Math.imul(ot, bt) | 0, v = v + Math.imul(ot, yt) | 0, l = l + Math.imul(it, wt) | 0, s = s + Math.imul(it, xt) | 0, s = s + Math.imul(nt, wt) | 0, v = v + Math.imul(nt, xt) | 0, l = l + Math.imul(et, Mt) | 0, s = s + Math.imul(et, Et) | 0, s = s + Math.imul(rt, Mt) | 0, v = v + Math.imul(rt, Et) | 0, l = l + Math.imul($, St) | 0, s = s + Math.imul($, Nt) | 0, s = s + Math.imul(tt, St) | 0, v = v + Math.imul(tt, Nt) | 0, l = l + Math.imul(X, It) | 0, s = s + Math.imul(X, _t) | 0, s = s + Math.imul(Z, It) | 0, v = v + Math.imul(Z, _t) | 0;\n            var ni = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ni >>> 26) | 0, ni &= 67108863, l = Math.imul(st, bt), s = Math.imul(st, yt), s = s + Math.imul(at, bt) | 0, v = Math.imul(at, yt), l = l + Math.imul(ft, wt) | 0, s = s + Math.imul(ft, xt) | 0, s = s + Math.imul(ot, wt) | 0, v = v + Math.imul(ot, xt) | 0, l = l + Math.imul(it, Mt) | 0, s = s + Math.imul(it, Et) | 0, s = s + Math.imul(nt, Mt) | 0, v = v + Math.imul(nt, Et) | 0, l = l + Math.imul(et, St) | 0, s = s + Math.imul(et, Nt) | 0, s = s + Math.imul(rt, St) | 0, v = v + Math.imul(rt, Nt) | 0, l = l + Math.imul($, It) | 0, s = s + Math.imul($, _t) | 0, s = s + Math.imul(tt, It) | 0, v = v + Math.imul(tt, _t) | 0;\n            var fi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (fi >>> 26) | 0, fi &= 67108863, l = Math.imul(st, wt), s = Math.imul(st, xt), s = s + Math.imul(at, wt) | 0, v = Math.imul(at, xt), l = l + Math.imul(ft, Mt) | 0, s = s + Math.imul(ft, Et) | 0, s = s + Math.imul(ot, Mt) | 0, v = v + Math.imul(ot, Et) | 0, l = l + Math.imul(it, St) | 0, s = s + Math.imul(it, Nt) | 0, s = s + Math.imul(nt, St) | 0, v = v + Math.imul(nt, Nt) | 0, l = l + Math.imul(et, It) | 0, s = s + Math.imul(et, _t) | 0, s = s + Math.imul(rt, It) | 0, v = v + Math.imul(rt, _t) | 0;\n            var oi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (oi >>> 26) | 0, oi &= 67108863, l = Math.imul(st, Mt), s = Math.imul(st, Et), s = s + Math.imul(at, Mt) | 0, v = Math.imul(at, Et), l = l + Math.imul(ft, St) | 0, s = s + Math.imul(ft, Nt) | 0, s = s + Math.imul(ot, St) | 0, v = v + Math.imul(ot, Nt) | 0, l = l + Math.imul(it, It) | 0, s = s + Math.imul(it, _t) | 0, s = s + Math.imul(nt, It) | 0, v = v + Math.imul(nt, _t) | 0;\n            var si = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (si >>> 26) | 0, si &= 67108863, l = Math.imul(st, St), s = Math.imul(st, Nt), s = s + Math.imul(at, St) | 0, v = Math.imul(at, Nt), l = l + Math.imul(ft, It) | 0, s = s + Math.imul(ft, _t) | 0, s = s + Math.imul(ot, It) | 0, v = v + Math.imul(ot, _t) | 0;\n            var ai = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ai >>> 26) | 0, ai &= 67108863, l = Math.imul(st, It), s = Math.imul(st, _t), s = s + Math.imul(at, It) | 0, v = Math.imul(at, _t);\n            var ui = (M + l | 0) + ((s & 8191) << 13) | 0;\n            return M = (v + (s >>> 13) | 0) + (ui >>> 26) | 0, ui &= 67108863, x[0] = Me, x[1] = Ee, x[2] = Se, x[3] = Ne, x[4] = Ie, x[5] = Wr, x[6] = Xr, x[7] = Zr, x[8] = $r, x[9] = ti, x[10] = ei, x[11] = ri, x[12] = ii, x[13] = ni, x[14] = fi, x[15] = oi, x[16] = si, x[17] = ai, x[18] = ui, M !== 0 && (x[19] = M, c.length++), c;\n        };\n        Math.imul || (J = U);\n        function Bt(A, f, a) {\n            a.negative = f.negative ^ A.negative, a.length = A.length + f.length;\n            for(var c = 0, d = 0, g = 0; g < a.length - 1; g++){\n                var x = d;\n                d = 0;\n                for(var M = c & 67108863, l = Math.min(g, f.length - 1), s = Math.max(0, g - A.length + 1); s <= l; s++){\n                    var v = g - s, k = A.words[v] | 0, u = f.words[s] | 0, E = k * u, _ = E & 67108863;\n                    x = x + (E / 67108864 | 0) | 0, _ = _ + M | 0, M = _ & 67108863, x = x + (_ >>> 26) | 0, d += x >>> 26, x &= 67108863;\n                }\n                a.words[g] = M, c = x, x = d;\n            }\n            return c !== 0 ? a.words[g] = c : a.length--, a._strip();\n        }\n        function G(A, f, a) {\n            return Bt(A, f, a);\n        }\n        o.prototype.mulTo = function(f, a) {\n            var c, d = this.length + f.length;\n            return this.length === 10 && f.length === 10 ? c = J(this, f, a) : d < 63 ? c = U(this, f, a) : d < 1024 ? c = Bt(this, f, a) : c = G(this, f, a), c;\n        }, o.prototype.mul = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), this.mulTo(f, a);\n        }, o.prototype.mulf = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), G(this, f, a);\n        }, o.prototype.imul = function(f) {\n            return this.clone().mulTo(f, this);\n        }, o.prototype.imuln = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(typeof f == \"number\"), i(f < 67108864);\n            for(var c = 0, d = 0; d < this.length; d++){\n                var g = (this.words[d] | 0) * f, x = (g & 67108863) + (c & 67108863);\n                c >>= 26, c += g / 67108864 | 0, c += x >>> 26, this.words[d] = x & 67108863;\n            }\n            return c !== 0 && (this.words[d] = c, this.length++), a ? this.ineg() : this;\n        }, o.prototype.muln = function(f) {\n            return this.clone().imuln(f);\n        }, o.prototype.sqr = function() {\n            return this.mul(this);\n        }, o.prototype.isqr = function() {\n            return this.imul(this.clone());\n        }, o.prototype.pow = function(f) {\n            var a = F(f);\n            if (a.length === 0) return new o(1);\n            for(var c = this, d = 0; d < a.length && a[d] === 0; d++, c = c.sqr());\n            if (++d < a.length) for(var g = c.sqr(); d < a.length; d++, g = g.sqr())a[d] !== 0 && (c = c.mul(g));\n            return c;\n        }, o.prototype.iushln = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 67108863 >>> 26 - a << 26 - a, g;\n            if (a !== 0) {\n                var x = 0;\n                for(g = 0; g < this.length; g++){\n                    var M = this.words[g] & d, l = (this.words[g] | 0) - M << a;\n                    this.words[g] = l | x, x = M >>> 26 - a;\n                }\n                x && (this.words[g] = x, this.length++);\n            }\n            if (c !== 0) {\n                for(g = this.length - 1; g >= 0; g--)this.words[g + c] = this.words[g];\n                for(g = 0; g < c; g++)this.words[g] = 0;\n                this.length += c;\n            }\n            return this._strip();\n        }, o.prototype.ishln = function(f) {\n            return i(this.negative === 0), this.iushln(f);\n        }, o.prototype.iushrn = function(f, a, c) {\n            i(typeof f == \"number\" && f >= 0);\n            var d;\n            a ? d = (a - a % 26) / 26 : d = 0;\n            var g = f % 26, x = Math.min((f - g) / 26, this.length), M = 67108863 ^ 67108863 >>> g << g, l = c;\n            if (d -= x, d = Math.max(0, d), l) {\n                for(var s = 0; s < x; s++)l.words[s] = this.words[s];\n                l.length = x;\n            }\n            if (x !== 0) if (this.length > x) for(this.length -= x, s = 0; s < this.length; s++)this.words[s] = this.words[s + x];\n            else this.words[0] = 0, this.length = 1;\n            var v = 0;\n            for(s = this.length - 1; s >= 0 && (v !== 0 || s >= d); s--){\n                var k = this.words[s] | 0;\n                this.words[s] = v << 26 - g | k >>> g, v = k & M;\n            }\n            return l && v !== 0 && (l.words[l.length++] = v), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();\n        }, o.prototype.ishrn = function(f, a, c) {\n            return i(this.negative === 0), this.iushrn(f, a, c);\n        }, o.prototype.shln = function(f) {\n            return this.clone().ishln(f);\n        }, o.prototype.ushln = function(f) {\n            return this.clone().iushln(f);\n        }, o.prototype.shrn = function(f) {\n            return this.clone().ishrn(f);\n        }, o.prototype.ushrn = function(f) {\n            return this.clone().iushrn(f);\n        }, o.prototype.testn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return !1;\n            var g = this.words[c];\n            return !!(g & d);\n        }, o.prototype.imaskn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26;\n            if (i(this.negative === 0, \"imaskn works only with positive numbers\"), this.length <= c) return this;\n            if (a !== 0 && c++, this.length = Math.min(c, this.length), a !== 0) {\n                var d = 67108863 ^ 67108863 >>> a << a;\n                this.words[this.length - 1] &= d;\n            }\n            return this._strip();\n        }, o.prototype.maskn = function(f) {\n            return this.clone().imaskn(f);\n        }, o.prototype.iaddn = function(f) {\n            return i(typeof f == \"number\"), i(f < 67108864), f < 0 ? this.isubn(-f) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= f ? (this.words[0] = f - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(f), this.negative = 1, this) : this._iaddn(f);\n        }, o.prototype._iaddn = function(f) {\n            this.words[0] += f;\n            for(var a = 0; a < this.length && this.words[a] >= 67108864; a++)this.words[a] -= 67108864, a === this.length - 1 ? this.words[a + 1] = 1 : this.words[a + 1]++;\n            return this.length = Math.max(this.length, a + 1), this;\n        }, o.prototype.isubn = function(f) {\n            if (i(typeof f == \"number\"), i(f < 67108864), f < 0) return this.iaddn(-f);\n            if (this.negative !== 0) return this.negative = 0, this.iaddn(f), this.negative = 1, this;\n            if (this.words[0] -= f, this.length === 1 && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;\n            else for(var a = 0; a < this.length && this.words[a] < 0; a++)this.words[a] += 67108864, this.words[a + 1] -= 1;\n            return this._strip();\n        }, o.prototype.addn = function(f) {\n            return this.clone().iaddn(f);\n        }, o.prototype.subn = function(f) {\n            return this.clone().isubn(f);\n        }, o.prototype.iabs = function() {\n            return this.negative = 0, this;\n        }, o.prototype.abs = function() {\n            return this.clone().iabs();\n        }, o.prototype._ishlnsubmul = function(f, a, c) {\n            var d = f.length + c, g;\n            this._expand(d);\n            var x, M = 0;\n            for(g = 0; g < f.length; g++){\n                x = (this.words[g + c] | 0) + M;\n                var l = (f.words[g] | 0) * a;\n                x -= l & 67108863, M = (x >> 26) - (l / 67108864 | 0), this.words[g + c] = x & 67108863;\n            }\n            for(; g < this.length - c; g++)x = (this.words[g + c] | 0) + M, M = x >> 26, this.words[g + c] = x & 67108863;\n            if (M === 0) return this._strip();\n            for(i(M === -1), M = 0, g = 0; g < this.length; g++)x = -(this.words[g] | 0) + M, M = x >> 26, this.words[g] = x & 67108863;\n            return this.negative = 1, this._strip();\n        }, o.prototype._wordDiv = function(f, a) {\n            var c = this.length - f.length, d = this.clone(), g = f, x = g.words[g.length - 1] | 0, M = this._countBits(x);\n            c = 26 - M, c !== 0 && (g = g.ushln(c), d.iushln(c), x = g.words[g.length - 1] | 0);\n            var l = d.length - g.length, s;\n            if (a !== \"mod\") {\n                s = new o(null), s.length = l + 1, s.words = new Array(s.length);\n                for(var v = 0; v < s.length; v++)s.words[v] = 0;\n            }\n            var k = d.clone()._ishlnsubmul(g, 1, l);\n            k.negative === 0 && (d = k, s && (s.words[l] = 1));\n            for(var u = l - 1; u >= 0; u--){\n                var E = (d.words[g.length + u] | 0) * 67108864 + (d.words[g.length + u - 1] | 0);\n                for(E = Math.min(E / x | 0, 67108863), d._ishlnsubmul(g, E, u); d.negative !== 0;)E--, d.negative = 0, d._ishlnsubmul(g, 1, u), d.isZero() || (d.negative ^= 1);\n                s && (s.words[u] = E);\n            }\n            return s && s._strip(), d._strip(), a !== \"div\" && c !== 0 && d.iushrn(c), {\n                div: s || null,\n                mod: d\n            };\n        }, o.prototype.divmod = function(f, a, c) {\n            if (i(!f.isZero()), this.isZero()) return {\n                div: new o(0),\n                mod: new o(0)\n            };\n            var d, g, x;\n            return this.negative !== 0 && f.negative === 0 ? (x = this.neg().divmod(f, a), a !== \"mod\" && (d = x.div.neg()), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.iadd(f)), {\n                div: d,\n                mod: g\n            }) : this.negative === 0 && f.negative !== 0 ? (x = this.divmod(f.neg(), a), a !== \"mod\" && (d = x.div.neg()), {\n                div: d,\n                mod: x.mod\n            }) : this.negative & f.negative ? (x = this.neg().divmod(f.neg(), a), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.isub(f)), {\n                div: x.div,\n                mod: g\n            }) : f.length > this.length || this.cmp(f) < 0 ? {\n                div: new o(0),\n                mod: this\n            } : f.length === 1 ? a === \"div\" ? {\n                div: this.divn(f.words[0]),\n                mod: null\n            } : a === \"mod\" ? {\n                div: null,\n                mod: new o(this.modrn(f.words[0]))\n            } : {\n                div: this.divn(f.words[0]),\n                mod: new o(this.modrn(f.words[0]))\n            } : this._wordDiv(f, a);\n        }, o.prototype.div = function(f) {\n            return this.divmod(f, \"div\", !1).div;\n        }, o.prototype.mod = function(f) {\n            return this.divmod(f, \"mod\", !1).mod;\n        }, o.prototype.umod = function(f) {\n            return this.divmod(f, \"mod\", !0).mod;\n        }, o.prototype.divRound = function(f) {\n            var a = this.divmod(f);\n            if (a.mod.isZero()) return a.div;\n            var c = a.div.negative !== 0 ? a.mod.isub(f) : a.mod, d = f.ushrn(1), g = f.andln(1), x = c.cmp(d);\n            return x < 0 || g === 1 && x === 0 ? a.div : a.div.negative !== 0 ? a.div.isubn(1) : a.div.iaddn(1);\n        }, o.prototype.modrn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = (1 << 26) % f, d = 0, g = this.length - 1; g >= 0; g--)d = (c * d + (this.words[g] | 0)) % f;\n            return a ? -d : d;\n        }, o.prototype.modn = function(f) {\n            return this.modrn(f);\n        }, o.prototype.idivn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = 0, d = this.length - 1; d >= 0; d--){\n                var g = (this.words[d] | 0) + c * 67108864;\n                this.words[d] = g / f | 0, c = g % f;\n            }\n            return this._strip(), a ? this.ineg() : this;\n        }, o.prototype.divn = function(f) {\n            return this.clone().idivn(f);\n        }, o.prototype.egcd = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = new o(0), M = new o(1), l = 0; a.isEven() && c.isEven();)a.iushrn(1), c.iushrn(1), ++l;\n            for(var s = c.clone(), v = a.clone(); !a.isZero();){\n                for(var k = 0, u = 1; !(a.words[0] & u) && k < 26; ++k, u <<= 1);\n                if (k > 0) for(a.iushrn(k); k-- > 0;)(d.isOdd() || g.isOdd()) && (d.iadd(s), g.isub(v)), d.iushrn(1), g.iushrn(1);\n                for(var E = 0, _ = 1; !(c.words[0] & _) && E < 26; ++E, _ <<= 1);\n                if (E > 0) for(c.iushrn(E); E-- > 0;)(x.isOdd() || M.isOdd()) && (x.iadd(s), M.isub(v)), x.iushrn(1), M.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(x), g.isub(M)) : (c.isub(a), x.isub(d), M.isub(g));\n            }\n            return {\n                a: x,\n                b: M,\n                gcd: c.iushln(l)\n            };\n        }, o.prototype._invmp = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = c.clone(); a.cmpn(1) > 0 && c.cmpn(1) > 0;){\n                for(var M = 0, l = 1; !(a.words[0] & l) && M < 26; ++M, l <<= 1);\n                if (M > 0) for(a.iushrn(M); M-- > 0;)d.isOdd() && d.iadd(x), d.iushrn(1);\n                for(var s = 0, v = 1; !(c.words[0] & v) && s < 26; ++s, v <<= 1);\n                if (s > 0) for(c.iushrn(s); s-- > 0;)g.isOdd() && g.iadd(x), g.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(g)) : (c.isub(a), g.isub(d));\n            }\n            var k;\n            return a.cmpn(1) === 0 ? k = d : k = g, k.cmpn(0) < 0 && k.iadd(f), k;\n        }, o.prototype.gcd = function(f) {\n            if (this.isZero()) return f.abs();\n            if (f.isZero()) return this.abs();\n            var a = this.clone(), c = f.clone();\n            a.negative = 0, c.negative = 0;\n            for(var d = 0; a.isEven() && c.isEven(); d++)a.iushrn(1), c.iushrn(1);\n            do {\n                for(; a.isEven();)a.iushrn(1);\n                for(; c.isEven();)c.iushrn(1);\n                var g = a.cmp(c);\n                if (g < 0) {\n                    var x = a;\n                    a = c, c = x;\n                } else if (g === 0 || c.cmpn(1) === 0) break;\n                a.isub(c);\n            }while (!0);\n            return c.iushln(d);\n        }, o.prototype.invm = function(f) {\n            return this.egcd(f).a.umod(f);\n        }, o.prototype.isEven = function() {\n            return (this.words[0] & 1) === 0;\n        }, o.prototype.isOdd = function() {\n            return (this.words[0] & 1) === 1;\n        }, o.prototype.andln = function(f) {\n            return this.words[0] & f;\n        }, o.prototype.bincn = function(f) {\n            i(typeof f == \"number\");\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return this._expand(c + 1), this.words[c] |= d, this;\n            for(var g = d, x = c; g !== 0 && x < this.length; x++){\n                var M = this.words[x] | 0;\n                M += g, g = M >>> 26, M &= 67108863, this.words[x] = M;\n            }\n            return g !== 0 && (this.words[x] = g, this.length++), this;\n        }, o.prototype.isZero = function() {\n            return this.length === 1 && this.words[0] === 0;\n        }, o.prototype.cmpn = function(f) {\n            var a = f < 0;\n            if (this.negative !== 0 && !a) return -1;\n            if (this.negative === 0 && a) return 1;\n            this._strip();\n            var c;\n            if (this.length > 1) c = 1;\n            else {\n                a && (f = -f), i(f <= 67108863, \"Number is too big\");\n                var d = this.words[0] | 0;\n                c = d === f ? 0 : d < f ? -1 : 1;\n            }\n            return this.negative !== 0 ? -c | 0 : c;\n        }, o.prototype.cmp = function(f) {\n            if (this.negative !== 0 && f.negative === 0) return -1;\n            if (this.negative === 0 && f.negative !== 0) return 1;\n            var a = this.ucmp(f);\n            return this.negative !== 0 ? -a | 0 : a;\n        }, o.prototype.ucmp = function(f) {\n            if (this.length > f.length) return 1;\n            if (this.length < f.length) return -1;\n            for(var a = 0, c = this.length - 1; c >= 0; c--){\n                var d = this.words[c] | 0, g = f.words[c] | 0;\n                if (d !== g) {\n                    d < g ? a = -1 : d > g && (a = 1);\n                    break;\n                }\n            }\n            return a;\n        }, o.prototype.gtn = function(f) {\n            return this.cmpn(f) === 1;\n        }, o.prototype.gt = function(f) {\n            return this.cmp(f) === 1;\n        }, o.prototype.gten = function(f) {\n            return this.cmpn(f) >= 0;\n        }, o.prototype.gte = function(f) {\n            return this.cmp(f) >= 0;\n        }, o.prototype.ltn = function(f) {\n            return this.cmpn(f) === -1;\n        }, o.prototype.lt = function(f) {\n            return this.cmp(f) === -1;\n        }, o.prototype.lten = function(f) {\n            return this.cmpn(f) <= 0;\n        }, o.prototype.lte = function(f) {\n            return this.cmp(f) <= 0;\n        }, o.prototype.eqn = function(f) {\n            return this.cmpn(f) === 0;\n        }, o.prototype.eq = function(f) {\n            return this.cmp(f) === 0;\n        }, o.red = function(f) {\n            return new Y(f);\n        }, o.prototype.toRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), i(this.negative === 0, \"red works only with positives\"), f.convertTo(this)._forceRed(f);\n        }, o.prototype.fromRed = function() {\n            return i(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);\n        }, o.prototype._forceRed = function(f) {\n            return this.red = f, this;\n        }, o.prototype.forceRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), this._forceRed(f);\n        }, o.prototype.redAdd = function(f) {\n            return i(this.red, \"redAdd works only with red numbers\"), this.red.add(this, f);\n        }, o.prototype.redIAdd = function(f) {\n            return i(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, f);\n        }, o.prototype.redSub = function(f) {\n            return i(this.red, \"redSub works only with red numbers\"), this.red.sub(this, f);\n        }, o.prototype.redISub = function(f) {\n            return i(this.red, \"redISub works only with red numbers\"), this.red.isub(this, f);\n        }, o.prototype.redShl = function(f) {\n            return i(this.red, \"redShl works only with red numbers\"), this.red.shl(this, f);\n        }, o.prototype.redMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.mul(this, f);\n        }, o.prototype.redIMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.imul(this, f);\n        }, o.prototype.redSqr = function() {\n            return i(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);\n        }, o.prototype.redISqr = function() {\n            return i(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);\n        }, o.prototype.redSqrt = function() {\n            return i(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);\n        }, o.prototype.redInvm = function() {\n            return i(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);\n        }, o.prototype.redNeg = function() {\n            return i(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);\n        }, o.prototype.redPow = function(f) {\n            return i(this.red && !f.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, f);\n        };\n        var H = {\n            k256: null,\n            p224: null,\n            p192: null,\n            p25519: null\n        };\n        function z(A, f) {\n            this.name = A, this.p = new o(f, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();\n        }\n        z.prototype._tmp = function() {\n            var f = new o(null);\n            return f.words = new Array(Math.ceil(this.n / 13)), f;\n        }, z.prototype.ireduce = function(f) {\n            var a = f, c;\n            do this.split(a, this.tmp), a = this.imulK(a), a = a.iadd(this.tmp), c = a.bitLength();\n            while (c > this.n);\n            var d = c < this.n ? -1 : a.ucmp(this.p);\n            return d === 0 ? (a.words[0] = 0, a.length = 1) : d > 0 ? a.isub(this.p) : a.strip !== void 0 ? a.strip() : a._strip(), a;\n        }, z.prototype.split = function(f, a) {\n            f.iushrn(this.n, 0, a);\n        }, z.prototype.imulK = function(f) {\n            return f.imul(this.k);\n        };\n        function Pt() {\n            z.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n        }\n        n(Pt, z), Pt.prototype.split = function(f, a) {\n            for(var c = 4194303, d = Math.min(f.length, 9), g = 0; g < d; g++)a.words[g] = f.words[g];\n            if (a.length = d, f.length <= 9) {\n                f.words[0] = 0, f.length = 1;\n                return;\n            }\n            var x = f.words[9];\n            for(a.words[a.length++] = x & c, g = 10; g < f.length; g++){\n                var M = f.words[g] | 0;\n                f.words[g - 10] = (M & c) << 4 | x >>> 22, x = M;\n            }\n            x >>>= 22, f.words[g - 10] = x, x === 0 && f.length > 10 ? f.length -= 10 : f.length -= 9;\n        }, Pt.prototype.imulK = function(f) {\n            f.words[f.length] = 0, f.words[f.length + 1] = 0, f.length += 2;\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = f.words[c] | 0;\n                a += d * 977, f.words[c] = a & 67108863, a = d * 64 + (a / 67108864 | 0);\n            }\n            return f.words[f.length - 1] === 0 && (f.length--, f.words[f.length - 1] === 0 && f.length--), f;\n        };\n        function W() {\n            z.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n        }\n        n(W, z);\n        function Rt() {\n            z.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n        }\n        n(Rt, z);\n        function Yt() {\n            z.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n        }\n        n(Yt, z), Yt.prototype.imulK = function(f) {\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = (f.words[c] | 0) * 19 + a, g = d & 67108863;\n                d >>>= 26, f.words[c] = g, a = d;\n            }\n            return a !== 0 && (f.words[f.length++] = a), f;\n        }, o._prime = function(f) {\n            if (H[f]) return H[f];\n            var a;\n            if (f === \"k256\") a = new Pt;\n            else if (f === \"p224\") a = new W;\n            else if (f === \"p192\") a = new Rt;\n            else if (f === \"p25519\") a = new Yt;\n            else throw new Error(\"Unknown prime \" + f);\n            return H[f] = a, a;\n        };\n        function Y(A) {\n            if (typeof A == \"string\") {\n                var f = o._prime(A);\n                this.m = f.p, this.prime = f;\n            } else i(A.gtn(1), \"modulus must be greater than 1\"), this.m = A, this.prime = null;\n        }\n        Y.prototype._verify1 = function(f) {\n            i(f.negative === 0, \"red works only with positives\"), i(f.red, \"red works only with red numbers\");\n        }, Y.prototype._verify2 = function(f, a) {\n            i((f.negative | a.negative) === 0, \"red works only with positives\"), i(f.red && f.red === a.red, \"red works only with red numbers\");\n        }, Y.prototype.imod = function(f) {\n            return this.prime ? this.prime.ireduce(f)._forceRed(this) : (w(f, f.umod(this.m)._forceRed(this)), f);\n        }, Y.prototype.neg = function(f) {\n            return f.isZero() ? f.clone() : this.m.sub(f)._forceRed(this);\n        }, Y.prototype.add = function(f, a) {\n            this._verify2(f, a);\n            var c = f.add(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);\n        }, Y.prototype.iadd = function(f, a) {\n            this._verify2(f, a);\n            var c = f.iadd(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c;\n        }, Y.prototype.sub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.sub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);\n        }, Y.prototype.isub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.isub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c;\n        }, Y.prototype.shl = function(f, a) {\n            return this._verify1(f), this.imod(f.ushln(a));\n        }, Y.prototype.imul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.imul(a));\n        }, Y.prototype.mul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.mul(a));\n        }, Y.prototype.isqr = function(f) {\n            return this.imul(f, f.clone());\n        }, Y.prototype.sqr = function(f) {\n            return this.mul(f, f);\n        }, Y.prototype.sqrt = function(f) {\n            if (f.isZero()) return f.clone();\n            var a = this.m.andln(3);\n            if (i(a % 2 === 1), a === 3) {\n                var c = this.m.add(new o(1)).iushrn(2);\n                return this.pow(f, c);\n            }\n            for(var d = this.m.subn(1), g = 0; !d.isZero() && d.andln(1) === 0;)g++, d.iushrn(1);\n            i(!d.isZero());\n            var x = new o(1).toRed(this), M = x.redNeg(), l = this.m.subn(1).iushrn(1), s = this.m.bitLength();\n            for(s = new o(2 * s * s).toRed(this); this.pow(s, l).cmp(M) !== 0;)s.redIAdd(M);\n            for(var v = this.pow(s, d), k = this.pow(f, d.addn(1).iushrn(1)), u = this.pow(f, d), E = g; u.cmp(x) !== 0;){\n                for(var _ = u, B = 0; _.cmp(x) !== 0; B++)_ = _.redSqr();\n                i(B < E);\n                var R = this.pow(v, new o(1).iushln(E - B - 1));\n                k = k.redMul(R), v = R.redSqr(), u = u.redMul(v), E = B;\n            }\n            return k;\n        }, Y.prototype.invm = function(f) {\n            var a = f._invmp(this.m);\n            return a.negative !== 0 ? (a.negative = 0, this.imod(a).redNeg()) : this.imod(a);\n        }, Y.prototype.pow = function(f, a) {\n            if (a.isZero()) return new o(1).toRed(this);\n            if (a.cmpn(1) === 0) return f.clone();\n            var c = 4, d = new Array(1 << c);\n            d[0] = new o(1).toRed(this), d[1] = f;\n            for(var g = 2; g < d.length; g++)d[g] = this.mul(d[g - 1], f);\n            var x = d[0], M = 0, l = 0, s = a.bitLength() % 26;\n            for(s === 0 && (s = 26), g = a.length - 1; g >= 0; g--){\n                for(var v = a.words[g], k = s - 1; k >= 0; k--){\n                    var u = v >> k & 1;\n                    if (x !== d[0] && (x = this.sqr(x)), u === 0 && M === 0) {\n                        l = 0;\n                        continue;\n                    }\n                    M <<= 1, M |= u, l++, !(l !== c && (g !== 0 || k !== 0)) && (x = this.mul(x, d[M]), l = 0, M = 0);\n                }\n                s = 26;\n            }\n            return x;\n        }, Y.prototype.convertTo = function(f) {\n            var a = f.umod(this.m);\n            return a === f ? a.clone() : a;\n        }, Y.prototype.convertFrom = function(f) {\n            var a = f.clone();\n            return a.red = null, a;\n        }, o.mont = function(f) {\n            return new Vt(f);\n        };\n        function Vt(A) {\n            Y.call(this, A), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);\n        }\n        n(Vt, Y), Vt.prototype.convertTo = function(f) {\n            return this.imod(f.ushln(this.shift));\n        }, Vt.prototype.convertFrom = function(f) {\n            var a = this.imod(f.mul(this.rinv));\n            return a.red = null, a;\n        }, Vt.prototype.imul = function(f, a) {\n            if (f.isZero() || a.isZero()) return f.words[0] = 0, f.length = 1, f;\n            var c = f.imul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.mul = function(f, a) {\n            if (f.isZero() || a.isZero()) return new o(0)._forceRed(this);\n            var c = f.mul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.invm = function(f) {\n            var a = this.imod(f._invmp(this.m).mul(this.r2));\n            return a._forceRed(this);\n        };\n    })(e, On);\n})(Ln);\nvar K = Ln.exports;\nconst jn = \"bignumber/5.7.0\";\nvar Rr = K.BN;\nconst Ae = new L(jn), wi = {}, Qn = 9007199254740991;\nfunction C0(e) {\n    return e != null && (V.isBigNumber(e) || typeof e == \"number\" && e % 1 === 0 || typeof e == \"string\" && !!e.match(/^-?[0-9]+$/) || Qt(e) || typeof e == \"bigint\" || ir(e));\n}\n_c24 = C0;\nlet Jn = !1;\nclass V {\n    fromTwos(t) {\n        return Lt(j(this).fromTwos(t));\n    }\n    toTwos(t) {\n        return Lt(j(this).toTwos(t));\n    }\n    abs() {\n        return this._hex[0] === \"-\" ? V.from(this._hex.substring(1)) : this;\n    }\n    add(t) {\n        return Lt(j(this).add(j(t)));\n    }\n    sub(t) {\n        return Lt(j(this).sub(j(t)));\n    }\n    div(t) {\n        return V.from(t).isZero() && Wt(\"division-by-zero\", \"div\"), Lt(j(this).div(j(t)));\n    }\n    mul(t) {\n        return Lt(j(this).mul(j(t)));\n    }\n    mod(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"division-by-zero\", \"mod\"), Lt(j(this).umod(r));\n    }\n    pow(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"negative-power\", \"pow\"), Lt(j(this).pow(r));\n    }\n    and(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"and\"), Lt(j(this).and(r));\n    }\n    or(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"or\"), Lt(j(this).or(r));\n    }\n    xor(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"xor\"), Lt(j(this).xor(r));\n    }\n    mask(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"mask\"), Lt(j(this).maskn(t));\n    }\n    shl(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shl\"), Lt(j(this).shln(t));\n    }\n    shr(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shr\"), Lt(j(this).shrn(t));\n    }\n    eq(t) {\n        return j(this).eq(j(t));\n    }\n    lt(t) {\n        return j(this).lt(j(t));\n    }\n    lte(t) {\n        return j(this).lte(j(t));\n    }\n    gt(t) {\n        return j(this).gt(j(t));\n    }\n    gte(t) {\n        return j(this).gte(j(t));\n    }\n    isNegative() {\n        return this._hex[0] === \"-\";\n    }\n    isZero() {\n        return j(this).isZero();\n    }\n    toNumber() {\n        try {\n            return j(this).toNumber();\n        } catch (e) {\n            Wt(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        } catch (e) {}\n        return Ae.throwError(\"this platform does not support BigInt\", L.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        return arguments.length > 0 && (arguments[0] === 10 ? Jn || (Jn = !0, Ae.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\")) : arguments[0] === 16 ? Ae.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", L.errors.UNEXPECTED_ARGUMENT, {}) : Ae.throwError(\"BigNumber.toString does not accept parameters\", L.errors.UNEXPECTED_ARGUMENT, {})), j(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(t) {\n        return {\n            type: \"BigNumber\",\n            hex: this.toHexString()\n        };\n    }\n    static from(t) {\n        if (t instanceof V) return t;\n        if (typeof t == \"string\") return t.match(/^-?0x[0-9a-f]+$/i) ? new V(wi, vr(t)) : t.match(/^-?[0-9]+$/) ? new V(wi, vr(new Rr(t))) : Ae.throwArgumentError(\"invalid BigNumber string\", \"value\", t);\n        if (typeof t == \"number\") return t % 1 && Wt(\"underflow\", \"BigNumber.from\", t), (t >= Qn || t <= -Qn) && Wt(\"overflow\", \"BigNumber.from\", t), V.from(String(t));\n        const r = t;\n        if (typeof r == \"bigint\") return V.from(r.toString());\n        if (ir(r)) return V.from(Kt(r));\n        if (r) if (r.toHexString) {\n            const i = r.toHexString();\n            if (typeof i == \"string\") return V.from(i);\n        } else {\n            let i = r._hex;\n            if (i == null && r.type === \"BigNumber\" && (i = r.hex), typeof i == \"string\" && (Qt(i) || i[0] === \"-\" && Qt(i.substring(1)))) return V.from(i);\n        }\n        return Ae.throwArgumentError(\"invalid BigNumber value\", \"value\", t);\n    }\n    static isBigNumber(t) {\n        return !!(t && t._isBigNumber);\n    }\n    constructor(t, r){\n        t !== wi && Ae.throwError(\"cannot call constructor directly; use BigNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new (BigNumber)\"\n        }), this._hex = r, this._isBigNumber = !0, Object.freeze(this);\n    }\n}\nfunction vr(e) {\n    if (typeof e != \"string\") return vr(e.toString(16));\n    if (e[0] === \"-\") return e = e.substring(1), e[0] === \"-\" && Ae.throwArgumentError(\"invalid hex\", \"value\", e), e = vr(e), e === \"0x00\" ? e : \"-\" + e;\n    if (e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), e === \"0x\") return \"0x00\";\n    for(e.length % 2 && (e = \"0x0\" + e.substring(2)); e.length > 4 && e.substring(0, 4) === \"0x00\";)e = \"0x\" + e.substring(4);\n    return e;\n}\nfunction Lt(e) {\n    return V.from(vr(e));\n}\n_c25 = Lt;\nfunction j(e) {\n    const t = V.from(e).toHexString();\n    return t[0] === \"-\" ? new Rr(\"-\" + t.substring(3), 16) : new Rr(t.substring(2), 16);\n}\nfunction Wt(e, t, r) {\n    const i = {\n        fault: e,\n        operation: t\n    };\n    return r != null && (i.value = r), Ae.throwError(e, L.errors.NUMERIC_FAULT, i);\n}\n_c26 = Wt;\nfunction R0(e) {\n    return new Rr(e, 36).toString(16);\n}\n_c27 = R0;\nconst Ht = new L(jn), mr = {}, Gn = V.from(0), Yn = V.from(-1);\nfunction Vn(e, t, r, i) {\n    const n = {\n        fault: t,\n        operation: r\n    };\n    return i !== void 0 && (n.value = i), Ht.throwError(e, L.errors.NUMERIC_FAULT, n);\n}\n_c28 = Vn;\nlet gr = \"0\";\nfor(; gr.length < 256;)gr += gr;\nfunction xi(e) {\n    if (typeof e != \"number\") try {\n        e = V.from(e).toNumber();\n    } catch (e) {}\n    return typeof e == \"number\" && e >= 0 && e <= 256 && !(e % 1) ? \"1\" + gr.substring(0, e) : Ht.throwArgumentError(\"invalid decimal size\", \"decimals\", e);\n}\nfunction Mi(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    e = V.from(e);\n    const i = e.lt(Gn);\n    i && (e = e.mul(Yn));\n    let n = e.mod(r).toString();\n    for(; n.length < r.length - 1;)n = \"0\" + n;\n    n = n.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const o = e.div(r).toString();\n    return r.length === 1 ? e = o : e = o + \".\" + n, i && (e = \"-\" + e), e;\n}\n_c29 = Mi;\nfunction be(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    (typeof e != \"string\" || !e.match(/^-?[0-9.]+$/)) && Ht.throwArgumentError(\"invalid decimal value\", \"value\", e);\n    const i = e.substring(0, 1) === \"-\";\n    i && (e = e.substring(1)), e === \".\" && Ht.throwArgumentError(\"missing value\", \"value\", e);\n    const n = e.split(\".\");\n    n.length > 2 && Ht.throwArgumentError(\"too many decimal points\", \"value\", e);\n    let o = n[0], h = n[1];\n    for(o || (o = \"0\"), h || (h = \"0\"); h[h.length - 1] === \"0\";)h = h.substring(0, h.length - 1);\n    for(h.length > r.length - 1 && Vn(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\"), h === \"\" && (h = \"0\"); h.length < r.length - 1;)h += \"0\";\n    const p = V.from(o), b = V.from(h);\n    let m = p.mul(r).add(b);\n    return i && (m = m.mul(Yn)), m;\n}\nclass dr {\n    static from(t) {\n        if (t instanceof dr) return t;\n        typeof t == \"number\" && (t = \"fixed128x\".concat(t));\n        let r = !0, i = 128, n = 18;\n        if (typeof t == \"string\") {\n            if (t !== \"fixed\") if (t === \"ufixed\") r = !1;\n            else {\n                const o = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                o || Ht.throwArgumentError(\"invalid fixed format\", \"format\", t), r = o[1] !== \"u\", i = parseInt(o[2]), n = parseInt(o[3]);\n            }\n        } else if (t) {\n            const o = (h, p, b)=>t[h] == null ? b : (typeof t[h] !== p && Ht.throwArgumentError(\"invalid fixed format (\" + h + \" not \" + p + \")\", \"format.\" + h, t[h]), t[h]);\n            r = o(\"signed\", \"boolean\", r), i = o(\"width\", \"number\", i), n = o(\"decimals\", \"number\", n);\n        }\n        return i % 8 && Ht.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", i), n > 80 && Ht.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", n), new dr(mr, r, i, n);\n    }\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.signed = r, this.width = i, this.decimals = n, this.name = (r ? \"\" : \"u\") + \"fixed\" + String(i) + \"x\" + String(n), this._multiplier = xi(n), Object.freeze(this);\n    }\n}\nclass Ut {\n    _checkFormat(t) {\n        this.format.name !== t.format.name && Ht.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", t);\n    }\n    addUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.add(i), this.format.decimals, this.format);\n    }\n    subUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.sub(i), this.format.decimals, this.format);\n    }\n    mulUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(i).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(this.format._multiplier).div(i), this.format.decimals, this.format);\n    }\n    floor() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return this.isNegative() && i && (r = r.subUnsafe(Wn.toFormat(r.format))), r;\n    }\n    ceiling() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return !this.isNegative() && i && (r = r.addUnsafe(Wn.toFormat(r.format))), r;\n    }\n    round(t) {\n        t == null && (t = 0);\n        const r = this.toString().split(\".\");\n        if (r.length === 1 && r.push(\"0\"), (t < 0 || t > 80 || t % 1) && Ht.throwArgumentError(\"invalid decimal count\", \"decimals\", t), r[1].length <= t) return this;\n        const i = Ut.from(\"1\" + gr.substring(0, t), this.format), n = O0.toFormat(this.format);\n        return this.mulUnsafe(i).addUnsafe(n).floor().divUnsafe(i);\n    }\n    isZero() {\n        return this._value === \"0.0\" || this._value === \"0\";\n    }\n    isNegative() {\n        return this._value[0] === \"-\";\n    }\n    toString() {\n        return this._value;\n    }\n    toHexString(t) {\n        if (t == null) return this._hex;\n        t % 8 && Ht.throwArgumentError(\"invalid byte width\", \"width\", t);\n        const r = V.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();\n        return oe(r, t / 8);\n    }\n    toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    toFormat(t) {\n        return Ut.fromString(this._value, t);\n    }\n    static fromValue(t, r, i) {\n        return i == null && r != null && !C0(r) && (i = r, r = null), r == null && (r = 0), i == null && (i = \"fixed\"), Ut.fromString(Mi(t, r), dr.from(i));\n    }\n    static fromString(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r), n = be(t, i.decimals);\n        !i.signed && n.lt(Gn) && Vn(\"unsigned value cannot be negative\", \"overflow\", \"value\", t);\n        let o = null;\n        i.signed ? o = n.toTwos(i.width).toHexString() : (o = n.toHexString(), o = oe(o, i.width / 8));\n        const h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static fromBytes(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r);\n        if (Ot(t).length > i.width / 8) throw new Error(\"overflow\");\n        let n = V.from(t);\n        i.signed && (n = n.fromTwos(i.width));\n        const o = n.toTwos((i.signed ? 0 : 1) + i.width).toHexString(), h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static from(t, r) {\n        if (typeof t == \"string\") return Ut.fromString(t, r);\n        if (ir(t)) return Ut.fromBytes(t, r);\n        try {\n            return Ut.fromValue(t, 0, r);\n        } catch (i) {\n            if (i.code !== L.errors.INVALID_ARGUMENT) throw i;\n        }\n        return Ht.throwArgumentError(\"invalid FixedNumber value\", \"value\", t);\n    }\n    static isFixedNumber(t) {\n        return !!(t && t._isFixedNumber);\n    }\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.format = n, this._hex = r, this._value = i, this._isFixedNumber = !0, Object.freeze(this);\n    }\n}\nconst Wn = Ut.from(1), O0 = Ut.from(\"0.5\"), P0 = \"strings/5.7.0\", Xn = new L(P0);\nvar Or;\n(function(e) {\n    e.current = \"\", e.NFC = \"NFC\", e.NFD = \"NFD\", e.NFKC = \"NFKC\", e.NFKD = \"NFKD\";\n})(Or || (Or = {}));\nvar nr;\n(function(e) {\n    e.UNEXPECTED_CONTINUE = \"unexpected continuation byte\", e.BAD_PREFIX = \"bad codepoint prefix\", e.OVERRUN = \"string overrun\", e.MISSING_CONTINUE = \"missing continuation byte\", e.OUT_OF_RANGE = \"out of UTF-8 range\", e.UTF16_SURROGATE = \"UTF-16 surrogate\", e.OVERLONG = \"overlong representation\";\n})(nr || (nr = {}));\nfunction D0(e, t, r, i, n) {\n    return Xn.throwArgumentError(\"invalid codepoint at offset \".concat(t, \"; \").concat(e), \"bytes\", r);\n}\n_c30 = D0;\nfunction Zn(e, t, r, i, n) {\n    if (e === nr.BAD_PREFIX || e === nr.UNEXPECTED_CONTINUE) {\n        let o = 0;\n        for(let h = t + 1; h < r.length && r[h] >> 6 === 2; h++)o++;\n        return o;\n    }\n    return e === nr.OVERRUN ? r.length - t - 1 : 0;\n}\n_c31 = Zn;\nfunction F0(e, t, r, i, n) {\n    return e === nr.OVERLONG ? (i.push(n), 0) : (i.push(65533), Zn(e, t, r));\n}\n_c32 = F0;\nObject.freeze({\n    error: D0,\n    ignore: Zn,\n    replace: F0\n});\nfunction Ei(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Or.current;\n    t != Or.current && (Xn.checkNormalize(), e = e.normalize(t));\n    let r = [];\n    for(let i = 0; i < e.length; i++){\n        const n = e.charCodeAt(i);\n        if (n < 128) r.push(n);\n        else if (n < 2048) r.push(n >> 6 | 192), r.push(n & 63 | 128);\n        else if ((n & 64512) == 55296) {\n            i++;\n            const o = e.charCodeAt(i);\n            if (i >= e.length || (o & 64512) !== 56320) throw new Error(\"invalid utf-8 string\");\n            const h = 65536 + ((n & 1023) << 10) + (o & 1023);\n            r.push(h >> 18 | 240), r.push(h >> 12 & 63 | 128), r.push(h >> 6 & 63 | 128), r.push(h & 63 | 128);\n        } else r.push(n >> 12 | 224), r.push(n >> 6 & 63 | 128), r.push(n & 63 | 128);\n    }\n    return Ot(r);\n}\n_c33 = Ei;\nfunction T0(e) {\n    if (e.length % 4 !== 0) throw new Error(\"bad data\");\n    let t = [];\n    for(let r = 0; r < e.length; r += 4)t.push(parseInt(e.substring(r, r + 4), 16));\n    return t;\n}\n_c34 = T0;\nfunction Si(e, t) {\n    t || (t = function(n) {\n        return [\n            parseInt(n, 16)\n        ];\n    });\n    let r = 0, i = {};\n    return e.split(\",\").forEach((n)=>{\n        let o = n.split(\":\");\n        r += parseInt(o[0], 16), i[r] = t(o[1]);\n    }), i;\n}\n_c35 = Si;\nfunction $n(e) {\n    let t = 0;\n    return e.split(\",\").map((r)=>{\n        let i = r.split(\"-\");\n        i.length === 1 ? i[1] = \"0\" : i[1] === \"\" && (i[1] = \"1\");\n        let n = t + parseInt(i[0], 16);\n        return t = parseInt(i[1], 16), {\n            l: n,\n            h: t\n        };\n    });\n}\n$n(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\"), \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((e)=>parseInt(e, 16)), Si(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\"), Si(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\"), Si(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", T0), $n(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nconst tf = \"hash/5.7.0\";\nfunction U0(e) {\n    e = atob(e);\n    const t = [];\n    for(let r = 0; r < e.length; r++)t.push(e.charCodeAt(r));\n    return Ot(t);\n}\n_c36 = U0;\nfunction ef(e, t) {\n    t == null && (t = 1);\n    const r = [], i = r.forEach, n = function(o, h) {\n        i.call(o, function(p) {\n            h > 0 && Array.isArray(p) ? n(p, h - 1) : r.push(p);\n        });\n    };\n    return n(e, t), r;\n}\nfunction k0(e) {\n    const t = {};\n    for(let r = 0; r < e.length; r++){\n        const i = e[r];\n        t[i[0]] = i[1];\n    }\n    return t;\n}\nfunction q0(e) {\n    let t = 0;\n    function r() {\n        return e[t++] << 8 | e[t++];\n    }\n    let i = r(), n = 1, o = [\n        0,\n        1\n    ];\n    for(let H = 1; H < i; H++)o.push(n += r());\n    let h = r(), p = t;\n    t += h;\n    let b = 0, m = 0;\n    function w() {\n        return b == 0 && (m = m << 8 | e[t++], b = 8), m >> --b & 1;\n    }\n    const y = 31, S = Math.pow(2, y), I = S >>> 1, N = I >> 1, C = S - 1;\n    let F = 0;\n    for(let H = 0; H < y; H++)F = F << 1 | w();\n    let U = [], J = 0, Bt = S;\n    for(;;){\n        let H = Math.floor(((F - J + 1) * n - 1) / Bt), z = 0, Pt = i;\n        for(; Pt - z > 1;){\n            let Yt = z + Pt >>> 1;\n            H < o[Yt] ? Pt = Yt : z = Yt;\n        }\n        if (z == 0) break;\n        U.push(z);\n        let W = J + Math.floor(Bt * o[z] / n), Rt = J + Math.floor(Bt * o[z + 1] / n) - 1;\n        for(; !((W ^ Rt) & I);)F = F << 1 & C | w(), W = W << 1 & C, Rt = Rt << 1 & C | 1;\n        for(; W & ~Rt & N;)F = F & I | F << 1 & C >>> 1 | w(), W = W << 1 ^ I, Rt = (Rt ^ I) << 1 | I | 1;\n        J = W, Bt = 1 + Rt - W;\n    }\n    let G = i - 4;\n    return U.map((H)=>{\n        switch(H - G){\n            case 3:\n                return G + 65792 + (e[p++] << 16 | e[p++] << 8 | e[p++]);\n            case 2:\n                return G + 256 + (e[p++] << 8 | e[p++]);\n            case 1:\n                return G + e[p++];\n            default:\n                return H - 1;\n        }\n    });\n}\nfunction K0(e) {\n    let t = 0;\n    return ()=>e[t++];\n}\n_c37 = K0;\nfunction H0(e) {\n    return K0(q0(e));\n}\n_c38 = H0;\nfunction z0(e) {\n    return e & 1 ? ~e >> 1 : e >> 1;\n}\nfunction L0(e, t) {\n    let r = Array(e);\n    for(let i = 0; i < e; i++)r[i] = 1 + t();\n    return r;\n}\n_c39 = L0;\nfunction rf(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = -1; i < e; i++)r[i] = n += 1 + t();\n    return r;\n}\nfunction j0(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = 0; i < e; i++)r[i] = n += z0(t());\n    return r;\n}\nfunction Pr(e, t) {\n    let r = rf(e(), e), i = e(), n = rf(i, e), o = L0(i, e);\n    for(let h = 0; h < i; h++)for(let p = 0; p < o[h]; p++)r.push(n[h] + p);\n    return t ? r.map((h)=>t[h]) : r;\n}\n_c40 = Pr;\nfunction Q0(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push(G0(r, e));\n    }\n    for(;;){\n        let r = e() - 1;\n        if (r < 0) break;\n        t.push(Y0(r, e));\n    }\n    return k0(ef(t));\n}\n_c41 = Q0;\nfunction J0(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push(r);\n    }\n    return t;\n}\n_c42 = J0;\nfunction nf(e, t, r) {\n    let i = Array(e).fill(void 0).map(()=>[]);\n    for(let n = 0; n < t; n++)j0(e, r).forEach((o, h)=>i[h].push(o));\n    return i;\n}\nfunction G0(e, t) {\n    let r = 1 + t(), i = t(), n = J0(t), o = nf(n.length, 1 + e, t);\n    return ef(o.map((h, p)=>{\n        const b = h[0], m = h.slice(1);\n        return Array(n[p]).fill(void 0).map((w, y)=>{\n            let S = y * i;\n            return [\n                b + y * r,\n                m.map((I)=>I + S)\n            ];\n        });\n    }));\n}\n_c43 = G0;\nfunction Y0(e, t) {\n    let r = 1 + t();\n    return nf(r, 1 + e, t).map((n)=>[\n            n[0],\n            n.slice(1)\n        ]);\n}\n_c44 = Y0;\nfunction V0(e) {\n    let t = Pr(e).sort((i, n)=>i - n);\n    return r();\n    function r() {\n        let i = [];\n        for(;;){\n            let m = Pr(e, t);\n            if (m.length == 0) break;\n            i.push({\n                set: new Set(m),\n                node: r()\n            });\n        }\n        i.sort((m, w)=>w.set.size - m.set.size);\n        let n = e(), o = n % 3;\n        n = n / 3 | 0;\n        let h = !!(n & 1);\n        n >>= 1;\n        let p = n == 1, b = n == 2;\n        return {\n            branches: i,\n            valid: o,\n            fe0f: h,\n            save: p,\n            check: b\n        };\n    }\n}\n_c45 = V0;\nfunction W0() {\n    return H0(U0(\"\"));\n}\n_c46 = W0;\nconst Dr = W0();\nnew Set(Pr(Dr)), new Set(Pr(Dr)), Q0(Dr), V0(Dr), new L(tf);\nconst X0 = new Uint8Array(32);\nX0.fill(0);\nconst Z0 = \"\\x19Ethereum Signed Message:\\n\";\nfunction ff(e) {\n    return typeof e == \"string\" && (e = Ei(e)), yi(E0([\n        Ei(Z0),\n        Ei(String(e.length)),\n        e\n    ]));\n}\nconst $0 = \"rlp/5.7.0\";\nnew L($0);\nconst ts = \"address/5.7.0\", Ar = new L(ts);\nfunction of(e) {\n    Qt(e, 20) || Ar.throwArgumentError(\"invalid address\", \"address\", e), e = e.toLowerCase();\n    const t = e.substring(2).split(\"\"), r = new Uint8Array(40);\n    for(let n = 0; n < 40; n++)r[n] = t[n].charCodeAt(0);\n    const i = Ot(yi(r));\n    for(let n = 0; n < 40; n += 2)i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (i[n >> 1] & 15) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());\n    return \"0x\" + t.join(\"\");\n}\nconst es = 9007199254740991;\nfunction rs(e) {\n    return Math.log10 ? Math.log10(e) : Math.log(e) / Math.LN10;\n}\nconst Ni = {};\nfor(let e = 0; e < 10; e++)Ni[String(e)] = String(e);\nfor(let e = 0; e < 26; e++)Ni[String.fromCharCode(65 + e)] = String(10 + e);\nconst sf = Math.floor(rs(es));\nfunction is(e) {\n    e = e.toUpperCase(), e = e.substring(4) + e.substring(0, 2) + \"00\";\n    let t = e.split(\"\").map((i)=>Ni[i]).join(\"\");\n    for(; t.length >= sf;){\n        let i = t.substring(0, sf);\n        t = parseInt(i, 10) % 97 + t.substring(i.length);\n    }\n    let r = String(98 - parseInt(t, 10) % 97);\n    for(; r.length < 2;)r = \"0\" + r;\n    return r;\n}\nfunction ns(e) {\n    let t = null;\n    if (typeof e != \"string\" && Ar.throwArgumentError(\"invalid address\", \"address\", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), t = of(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && Ar.throwArgumentError(\"bad address checksum\", \"address\", e);\n    else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        for(e.substring(2, 4) !== is(e) && Ar.throwArgumentError(\"bad icap checksum\", \"address\", e), t = R0(e.substring(4)); t.length < 40;)t = \"0\" + t;\n        t = of(\"0x\" + t);\n    } else Ar.throwArgumentError(\"invalid address\", \"address\", e);\n    return t;\n}\nconst fs = \"properties/5.7.0\";\nnew L(fs);\nfunction br(e, t, r) {\n    Object.defineProperty(e, t, {\n        enumerable: !0,\n        value: r,\n        writable: !1\n    });\n}\nnew L(tf);\nconst os = new Uint8Array(32);\nos.fill(0), V.from(-1);\nconst ss = V.from(0), as = V.from(1);\nV.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), oe(as.toHexString(), 32), oe(ss.toHexString(), 32);\nvar se = {}, Q = {}, yr = af;\nfunction af(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\naf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar Ii = {\n    exports: {}\n};\ntypeof Object.create == \"function\" ? Ii.exports = function(t, r) {\n    r && (t.super_ = r, t.prototype = Object.create(r.prototype, {\n        constructor: {\n            value: t,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n        }\n    }));\n} : Ii.exports = function(t, r) {\n    if (r) {\n        t.super_ = r;\n        var i = function() {};\n        i.prototype = r.prototype, t.prototype = new i, t.prototype.constructor = t;\n    }\n};\nvar us = yr, hs = Ii.exports;\nQ.inherits = hs;\nfunction cs(e, t) {\n    return (e.charCodeAt(t) & 64512) !== 55296 || t < 0 || t + 1 >= e.length ? !1 : (e.charCodeAt(t + 1) & 64512) === 56320;\n}\nfunction ls(e, t) {\n    if (Array.isArray(e)) return e.slice();\n    if (!e) return [];\n    var r = [];\n    if (typeof e == \"string\") if (t) {\n        if (t === \"hex\") for(e = e.replace(/[^a-z0-9]+/ig, \"\"), e.length % 2 !== 0 && (e = \"0\" + e), n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));\n    } else for(var i = 0, n = 0; n < e.length; n++){\n        var o = e.charCodeAt(n);\n        o < 128 ? r[i++] = o : o < 2048 ? (r[i++] = o >> 6 | 192, r[i++] = o & 63 | 128) : cs(e, n) ? (o = 65536 + ((o & 1023) << 10) + (e.charCodeAt(++n) & 1023), r[i++] = o >> 18 | 240, r[i++] = o >> 12 & 63 | 128, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128) : (r[i++] = o >> 12 | 224, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128);\n    }\n    else for(n = 0; n < e.length; n++)r[n] = e[n] | 0;\n    return r;\n}\nQ.toArray = ls;\nfunction ds(e) {\n    for(var t = \"\", r = 0; r < e.length; r++)t += hf(e[r].toString(16));\n    return t;\n}\nQ.toHex = ds;\nfunction uf(e) {\n    var t = e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (e & 255) << 24;\n    return t >>> 0;\n}\nQ.htonl = uf;\nfunction ps(e, t) {\n    for(var r = \"\", i = 0; i < e.length; i++){\n        var n = e[i];\n        t === \"little\" && (n = uf(n)), r += cf(n.toString(16));\n    }\n    return r;\n}\nQ.toHex32 = ps;\nfunction hf(e) {\n    return e.length === 1 ? \"0\" + e : e;\n}\nQ.zero2 = hf;\nfunction cf(e) {\n    return e.length === 7 ? \"0\" + e : e.length === 6 ? \"00\" + e : e.length === 5 ? \"000\" + e : e.length === 4 ? \"0000\" + e : e.length === 3 ? \"00000\" + e : e.length === 2 ? \"000000\" + e : e.length === 1 ? \"0000000\" + e : e;\n}\nQ.zero8 = cf;\nfunction vs(e, t, r, i) {\n    var n = r - t;\n    us(n % 4 === 0);\n    for(var o = new Array(n / 4), h = 0, p = t; h < o.length; h++, p += 4){\n        var b;\n        i === \"big\" ? b = e[p] << 24 | e[p + 1] << 16 | e[p + 2] << 8 | e[p + 3] : b = e[p + 3] << 24 | e[p + 2] << 16 | e[p + 1] << 8 | e[p], o[h] = b >>> 0;\n    }\n    return o;\n}\nQ.join32 = vs;\nfunction ms(e, t) {\n    for(var r = new Array(e.length * 4), i = 0, n = 0; i < e.length; i++, n += 4){\n        var o = e[i];\n        t === \"big\" ? (r[n] = o >>> 24, r[n + 1] = o >>> 16 & 255, r[n + 2] = o >>> 8 & 255, r[n + 3] = o & 255) : (r[n + 3] = o >>> 24, r[n + 2] = o >>> 16 & 255, r[n + 1] = o >>> 8 & 255, r[n] = o & 255);\n    }\n    return r;\n}\nQ.split32 = ms;\nfunction gs(e, t) {\n    return e >>> t | e << 32 - t;\n}\nQ.rotr32 = gs;\nfunction As(e, t) {\n    return e << t | e >>> 32 - t;\n}\n_c47 = As;\nQ.rotl32 = As;\nfunction bs(e, t) {\n    return e + t >>> 0;\n}\nQ.sum32 = bs;\nfunction ys(e, t, r) {\n    return e + t + r >>> 0;\n}\nQ.sum32_3 = ys;\nfunction ws(e, t, r, i) {\n    return e + t + r + i >>> 0;\n}\nQ.sum32_4 = ws;\nfunction xs(e, t, r, i, n) {\n    return e + t + r + i + n >>> 0;\n}\nQ.sum32_5 = xs;\nfunction Ms(e, t, r, i) {\n    var n = e[t], o = e[t + 1], h = i + o >>> 0, p = (h < i ? 1 : 0) + r + n;\n    e[t] = p >>> 0, e[t + 1] = h;\n}\n_c48 = Ms;\nQ.sum64 = Ms;\nfunction Es(e, t, r, i) {\n    var n = t + i >>> 0, o = (n < t ? 1 : 0) + e + r;\n    return o >>> 0;\n}\n_c49 = Es;\nQ.sum64_hi = Es;\nfunction Ss(e, t, r, i) {\n    var n = t + i;\n    return n >>> 0;\n}\n_c50 = Ss;\nQ.sum64_lo = Ss;\nfunction Ns(e, t, r, i, n, o, h, p) {\n    var b = 0, m = t;\n    m = m + i >>> 0, b += m < t ? 1 : 0, m = m + o >>> 0, b += m < o ? 1 : 0, m = m + p >>> 0, b += m < p ? 1 : 0;\n    var w = e + r + n + h + b;\n    return w >>> 0;\n}\n_c51 = Ns;\nQ.sum64_4_hi = Ns;\nfunction Is(e, t, r, i, n, o, h, p) {\n    var b = t + i + o + p;\n    return b >>> 0;\n}\n_c52 = Is;\nQ.sum64_4_lo = Is;\nfunction _s(e, t, r, i, n, o, h, p, b, m) {\n    var w = 0, y = t;\n    y = y + i >>> 0, w += y < t ? 1 : 0, y = y + o >>> 0, w += y < o ? 1 : 0, y = y + p >>> 0, w += y < p ? 1 : 0, y = y + m >>> 0, w += y < m ? 1 : 0;\n    var S = e + r + n + h + b + w;\n    return S >>> 0;\n}\nQ.sum64_5_hi = _s;\nfunction Bs(e, t, r, i, n, o, h, p, b, m) {\n    var w = t + i + o + p + m;\n    return w >>> 0;\n}\n_c53 = Bs;\nQ.sum64_5_lo = Bs;\nfunction Cs(e, t, r) {\n    var i = t << 32 - r | e >>> r;\n    return i >>> 0;\n}\n_c54 = Cs;\nQ.rotr64_hi = Cs;\nfunction Rs(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\n_c55 = Rs;\nQ.rotr64_lo = Rs;\nfunction Os(e, t, r) {\n    return e >>> r;\n}\n_c56 = Os;\nQ.shr64_hi = Os;\nfunction Ps(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\n_c57 = Ps;\nQ.shr64_lo = Ps;\nvar fr = {}, lf = Q, Ds = yr;\nfunction Fr() {\n    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = \"big\", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;\n}\n_c58 = Fr;\nfr.BlockHash = Fr, Fr.prototype.update = function(t, r) {\n    if (t = lf.toArray(t, r), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, this.pendingTotal += t.length, this.pending.length >= this._delta8) {\n        t = this.pending;\n        var i = t.length % this._delta8;\n        this.pending = t.slice(t.length - i, t.length), this.pending.length === 0 && (this.pending = null), t = lf.join32(t, 0, t.length - i, this.endian);\n        for(var n = 0; n < t.length; n += this._delta32)this._update(t, n, n + this._delta32);\n    }\n    return this;\n}, Fr.prototype.digest = function(t) {\n    return this.update(this._pad()), Ds(this.pending === null), this._digest(t);\n}, Fr.prototype._pad = function() {\n    var t = this.pendingTotal, r = this._delta8, i = r - (t + this.padLength) % r, n = new Array(i + this.padLength);\n    n[0] = 128;\n    for(var o = 1; o < i; o++)n[o] = 0;\n    if (t <<= 3, this.endian === \"big\") {\n        for(var h = 8; h < this.padLength; h++)n[o++] = 0;\n        n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = t >>> 24 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 8 & 255, n[o++] = t & 255;\n    } else for(n[o++] = t & 255, n[o++] = t >>> 8 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 24 & 255, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, h = 8; h < this.padLength; h++)n[o++] = 0;\n    return n;\n};\nvar or = {}, ae = {}, Fs = Q, ue = Fs.rotr32;\nfunction Ts(e, t, r, i) {\n    if (e === 0) return df(t, r, i);\n    if (e === 1 || e === 3) return vf(t, r, i);\n    if (e === 2) return pf(t, r, i);\n}\n_c59 = Ts;\nae.ft_1 = Ts;\nfunction df(e, t, r) {\n    return e & t ^ ~e & r;\n}\nae.ch32 = df;\nfunction pf(e, t, r) {\n    return e & t ^ e & r ^ t & r;\n}\nae.maj32 = pf;\nfunction vf(e, t, r) {\n    return e ^ t ^ r;\n}\nae.p32 = vf;\nfunction Us(e) {\n    return ue(e, 2) ^ ue(e, 13) ^ ue(e, 22);\n}\n_c60 = Us;\nae.s0_256 = Us;\nfunction ks(e) {\n    return ue(e, 6) ^ ue(e, 11) ^ ue(e, 25);\n}\nae.s1_256 = ks;\nfunction qs(e) {\n    return ue(e, 7) ^ ue(e, 18) ^ e >>> 3;\n}\nae.g0_256 = qs;\nfunction Ks(e) {\n    return ue(e, 17) ^ ue(e, 19) ^ e >>> 10;\n}\n_c61 = Ks;\nae.g1_256 = Ks;\nvar sr = Q, Hs = fr, zs = ae, _i = sr.rotl32, wr = sr.sum32, Ls = sr.sum32_5, js = zs.ft_1, mf = Hs.BlockHash, Qs = [\n    1518500249,\n    1859775393,\n    2400959708,\n    3395469782\n];\nfunction he() {\n    if (!(this instanceof he)) return new he;\n    mf.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.W = new Array(80);\n}\nsr.inherits(he, mf);\nvar Js = he;\nhe.blockSize = 512, he.outSize = 160, he.hmacStrength = 80, he.padLength = 64, he.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = _i(i[n - 3] ^ i[n - 8] ^ i[n - 14] ^ i[n - 16], 1);\n    var o = this.h[0], h = this.h[1], p = this.h[2], b = this.h[3], m = this.h[4];\n    for(n = 0; n < i.length; n++){\n        var w = ~~(n / 20), y = Ls(_i(o, 5), js(w, h, p, b), m, i[n], Qs[w]);\n        m = b, b = p, p = _i(h, 30), h = o, o = y;\n    }\n    this.h[0] = wr(this.h[0], o), this.h[1] = wr(this.h[1], h), this.h[2] = wr(this.h[2], p), this.h[3] = wr(this.h[3], b), this.h[4] = wr(this.h[4], m);\n}, he.prototype._digest = function(t) {\n    return t === \"hex\" ? sr.toHex32(this.h, \"big\") : sr.split32(this.h, \"big\");\n};\nvar ar = Q, Gs = fr, ur = ae, Ys = yr, ie = ar.sum32, Vs = ar.sum32_4, Ws = ar.sum32_5, Xs = ur.ch32, Zs = ur.maj32, $s = ur.s0_256, ta = ur.s1_256, ea = ur.g0_256, ra = ur.g1_256, gf = Gs.BlockHash, ia = [\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n];\nfunction ce() {\n    if (!(this instanceof ce)) return new ce;\n    gf.call(this), this.h = [\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n    ], this.k = ia, this.W = new Array(64);\n}\nar.inherits(ce, gf);\nvar Af = ce;\nce.blockSize = 512, ce.outSize = 256, ce.hmacStrength = 192, ce.padLength = 64, ce.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = Vs(ra(i[n - 2]), i[n - 7], ea(i[n - 15]), i[n - 16]);\n    var o = this.h[0], h = this.h[1], p = this.h[2], b = this.h[3], m = this.h[4], w = this.h[5], y = this.h[6], S = this.h[7];\n    for(Ys(this.k.length === i.length), n = 0; n < i.length; n++){\n        var I = Ws(S, ta(m), Xs(m, w, y), this.k[n], i[n]), N = ie($s(o), Zs(o, h, p));\n        S = y, y = w, w = m, m = ie(b, I), b = p, p = h, h = o, o = ie(I, N);\n    }\n    this.h[0] = ie(this.h[0], o), this.h[1] = ie(this.h[1], h), this.h[2] = ie(this.h[2], p), this.h[3] = ie(this.h[3], b), this.h[4] = ie(this.h[4], m), this.h[5] = ie(this.h[5], w), this.h[6] = ie(this.h[6], y), this.h[7] = ie(this.h[7], S);\n}, ce.prototype._digest = function(t) {\n    return t === \"hex\" ? ar.toHex32(this.h, \"big\") : ar.split32(this.h, \"big\");\n};\nvar Bi = Q, bf = Af;\nfunction ye() {\n    if (!(this instanceof ye)) return new ye;\n    bf.call(this), this.h = [\n        3238371032,\n        914150663,\n        812702999,\n        4144912697,\n        4290775857,\n        1750603025,\n        1694076839,\n        3204075428\n    ];\n}\nBi.inherits(ye, bf);\nvar na = ye;\nye.blockSize = 512, ye.outSize = 224, ye.hmacStrength = 192, ye.padLength = 64, ye.prototype._digest = function(t) {\n    return t === \"hex\" ? Bi.toHex32(this.h.slice(0, 7), \"big\") : Bi.split32(this.h.slice(0, 7), \"big\");\n};\nvar jt = Q, fa = fr, oa = yr, le = jt.rotr64_hi, de = jt.rotr64_lo, yf = jt.shr64_hi, wf = jt.shr64_lo, Be = jt.sum64, Ci = jt.sum64_hi, Ri = jt.sum64_lo, sa = jt.sum64_4_hi, aa = jt.sum64_4_lo, ua = jt.sum64_5_hi, ha = jt.sum64_5_lo, xf = fa.BlockHash, ca = [\n    1116352408,\n    3609767458,\n    1899447441,\n    602891725,\n    3049323471,\n    3964484399,\n    3921009573,\n    2173295548,\n    961987163,\n    4081628472,\n    1508970993,\n    3053834265,\n    2453635748,\n    2937671579,\n    2870763221,\n    3664609560,\n    3624381080,\n    2734883394,\n    310598401,\n    1164996542,\n    607225278,\n    1323610764,\n    1426881987,\n    3590304994,\n    1925078388,\n    4068182383,\n    2162078206,\n    991336113,\n    2614888103,\n    633803317,\n    3248222580,\n    3479774868,\n    3835390401,\n    2666613458,\n    4022224774,\n    944711139,\n    264347078,\n    2341262773,\n    604807628,\n    2007800933,\n    770255983,\n    1495990901,\n    1249150122,\n    1856431235,\n    1555081692,\n    3175218132,\n    1996064986,\n    2198950837,\n    2554220882,\n    3999719339,\n    2821834349,\n    766784016,\n    2952996808,\n    2566594879,\n    3210313671,\n    3203337956,\n    3336571891,\n    1034457026,\n    3584528711,\n    2466948901,\n    113926993,\n    3758326383,\n    338241895,\n    168717936,\n    666307205,\n    1188179964,\n    773529912,\n    1546045734,\n    1294757372,\n    1522805485,\n    1396182291,\n    2643833823,\n    1695183700,\n    2343527390,\n    1986661051,\n    1014477480,\n    2177026350,\n    1206759142,\n    2456956037,\n    344077627,\n    2730485921,\n    1290863460,\n    2820302411,\n    3158454273,\n    3259730800,\n    3505952657,\n    3345764771,\n    106217008,\n    3516065817,\n    3606008344,\n    3600352804,\n    1432725776,\n    4094571909,\n    1467031594,\n    275423344,\n    851169720,\n    430227734,\n    3100823752,\n    506948616,\n    1363258195,\n    659060556,\n    3750685593,\n    883997877,\n    3785050280,\n    958139571,\n    3318307427,\n    1322822218,\n    3812723403,\n    1537002063,\n    2003034995,\n    1747873779,\n    3602036899,\n    1955562222,\n    1575990012,\n    2024104815,\n    1125592928,\n    2227730452,\n    2716904306,\n    2361852424,\n    442776044,\n    2428436474,\n    593698344,\n    2756734187,\n    3733110249,\n    3204031479,\n    2999351573,\n    3329325298,\n    3815920427,\n    3391569614,\n    3928383900,\n    3515267271,\n    566280711,\n    3940187606,\n    3454069534,\n    4118630271,\n    4000239992,\n    116418474,\n    1914138554,\n    174292421,\n    2731055270,\n    289380356,\n    3203993006,\n    460393269,\n    320620315,\n    685471733,\n    587496836,\n    852142971,\n    1086792851,\n    1017036298,\n    365543100,\n    1126000580,\n    2618297676,\n    1288033470,\n    3409855158,\n    1501505948,\n    4234509866,\n    1607167915,\n    987167468,\n    1816402316,\n    1246189591\n];\nfunction ne() {\n    if (!(this instanceof ne)) return new ne;\n    xf.call(this), this.h = [\n        1779033703,\n        4089235720,\n        3144134277,\n        2227873595,\n        1013904242,\n        4271175723,\n        2773480762,\n        1595750129,\n        1359893119,\n        2917565137,\n        2600822924,\n        725511199,\n        528734635,\n        4215389547,\n        1541459225,\n        327033209\n    ], this.k = ca, this.W = new Array(160);\n}\njt.inherits(ne, xf);\nvar Mf = ne;\nne.blockSize = 1024, ne.outSize = 512, ne.hmacStrength = 192, ne.padLength = 128, ne.prototype._prepareBlock = function(t, r) {\n    for(var i = this.W, n = 0; n < 32; n++)i[n] = t[r + n];\n    for(; n < i.length; n += 2){\n        var o = xa(i[n - 4], i[n - 3]), h = Ma(i[n - 4], i[n - 3]), p = i[n - 14], b = i[n - 13], m = ya(i[n - 30], i[n - 29]), w = wa(i[n - 30], i[n - 29]), y = i[n - 32], S = i[n - 31];\n        i[n] = sa(o, h, p, b, m, w, y, S), i[n + 1] = aa(o, h, p, b, m, w, y, S);\n    }\n}, ne.prototype._update = function(t, r) {\n    this._prepareBlock(t, r);\n    var i = this.W, n = this.h[0], o = this.h[1], h = this.h[2], p = this.h[3], b = this.h[4], m = this.h[5], w = this.h[6], y = this.h[7], S = this.h[8], I = this.h[9], N = this.h[10], C = this.h[11], F = this.h[12], U = this.h[13], J = this.h[14], Bt = this.h[15];\n    oa(this.k.length === i.length);\n    for(var G = 0; G < i.length; G += 2){\n        var H = J, z = Bt, Pt = Aa(S, I), W = ba(S, I), Rt = la(S, I, N, C, F), Yt = da(S, I, N, C, F, U), Y = this.k[G], Vt = this.k[G + 1], A = i[G], f = i[G + 1], a = ua(H, z, Pt, W, Rt, Yt, Y, Vt, A, f), c = ha(H, z, Pt, W, Rt, Yt, Y, Vt, A, f);\n        H = ma(n, o), z = ga(n, o), Pt = pa(n, o, h, p, b), W = va(n, o, h, p, b, m);\n        var d = Ci(H, z, Pt, W), g = Ri(H, z, Pt, W);\n        J = F, Bt = U, F = N, U = C, N = S, C = I, S = Ci(w, y, a, c), I = Ri(y, y, a, c), w = b, y = m, b = h, m = p, h = n, p = o, n = Ci(a, c, d, g), o = Ri(a, c, d, g);\n    }\n    Be(this.h, 0, n, o), Be(this.h, 2, h, p), Be(this.h, 4, b, m), Be(this.h, 6, w, y), Be(this.h, 8, S, I), Be(this.h, 10, N, C), Be(this.h, 12, F, U), Be(this.h, 14, J, Bt);\n}, ne.prototype._digest = function(t) {\n    return t === \"hex\" ? jt.toHex32(this.h, \"big\") : jt.split32(this.h, \"big\");\n};\nfunction la(e, t, r, i, n) {\n    var o = e & r ^ ~e & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction da(e, t, r, i, n, o) {\n    var h = t & i ^ ~t & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction pa(e, t, r, i, n) {\n    var o = e & r ^ e & n ^ r & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction va(e, t, r, i, n, o) {\n    var h = t & i ^ t & o ^ i & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction ma(e, t) {\n    var r = le(e, t, 28), i = le(t, e, 2), n = le(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction ga(e, t) {\n    var r = de(e, t, 28), i = de(t, e, 2), n = de(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Aa(e, t) {\n    var r = le(e, t, 14), i = le(e, t, 18), n = le(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\n_c62 = Aa;\nfunction ba(e, t) {\n    var r = de(e, t, 14), i = de(e, t, 18), n = de(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction ya(e, t) {\n    var r = le(e, t, 1), i = le(e, t, 8), n = yf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction wa(e, t) {\n    var r = de(e, t, 1), i = de(e, t, 8), n = wf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction xa(e, t) {\n    var r = le(e, t, 19), i = le(t, e, 29), n = yf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ma(e, t) {\n    var r = de(e, t, 19), i = de(t, e, 29), n = wf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\n_c63 = Ma;\nvar Oi = Q, Ef = Mf;\nfunction we() {\n    if (!(this instanceof we)) return new we;\n    Ef.call(this), this.h = [\n        3418070365,\n        3238371032,\n        1654270250,\n        914150663,\n        2438529370,\n        812702999,\n        355462360,\n        4144912697,\n        1731405415,\n        4290775857,\n        2394180231,\n        1750603025,\n        3675008525,\n        1694076839,\n        1203062813,\n        3204075428\n    ];\n}\nOi.inherits(we, Ef);\nvar Ea = we;\nwe.blockSize = 1024, we.outSize = 384, we.hmacStrength = 192, we.padLength = 128, we.prototype._digest = function(t) {\n    return t === \"hex\" ? Oi.toHex32(this.h.slice(0, 12), \"big\") : Oi.split32(this.h.slice(0, 12), \"big\");\n}, or.sha1 = Js, or.sha224 = na, or.sha256 = Af, or.sha384 = Ea, or.sha512 = Mf;\nvar Sf = {}, Xe = Q, Sa = fr, Tr = Xe.rotl32, Nf = Xe.sum32, xr = Xe.sum32_3, If = Xe.sum32_4, _f = Sa.BlockHash;\nfunction pe() {\n    if (!(this instanceof pe)) return new pe;\n    _f.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.endian = \"little\";\n}\nXe.inherits(pe, _f), Sf.ripemd160 = pe, pe.blockSize = 512, pe.outSize = 160, pe.hmacStrength = 192, pe.padLength = 64, pe.prototype._update = function(t, r) {\n    for(var i = this.h[0], n = this.h[1], o = this.h[2], h = this.h[3], p = this.h[4], b = i, m = n, w = o, y = h, S = p, I = 0; I < 80; I++){\n        var N = Nf(Tr(If(i, Bf(I, n, o, h), t[_a[I] + r], Na(I)), Ca[I]), p);\n        i = p, p = h, h = Tr(o, 10), o = n, n = N, N = Nf(Tr(If(b, Bf(79 - I, m, w, y), t[Ba[I] + r], Ia(I)), Ra[I]), S), b = S, S = y, y = Tr(w, 10), w = m, m = N;\n    }\n    N = xr(this.h[1], o, y), this.h[1] = xr(this.h[2], h, S), this.h[2] = xr(this.h[3], p, b), this.h[3] = xr(this.h[4], i, m), this.h[4] = xr(this.h[0], n, w), this.h[0] = N;\n}, pe.prototype._digest = function(t) {\n    return t === \"hex\" ? Xe.toHex32(this.h, \"little\") : Xe.split32(this.h, \"little\");\n};\nfunction Bf(e, t, r, i) {\n    return e <= 15 ? t ^ r ^ i : e <= 31 ? t & r | ~t & i : e <= 47 ? (t | ~r) ^ i : e <= 63 ? t & i | r & ~i : t ^ (r | ~i);\n}\n_c64 = Bf;\nfunction Na(e) {\n    return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;\n}\n_c65 = Na;\nfunction Ia(e) {\n    return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;\n}\n_c66 = Ia;\nvar _a = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n], Ba = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n], Ca = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n], Ra = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n], Oa = Q, Pa = yr;\nfunction hr(e, t, r) {\n    if (!(this instanceof hr)) return new hr(e, t, r);\n    this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(Oa.toArray(t, r));\n}\nvar Da = hr;\nhr.prototype._init = function(t) {\n    t.length > this.blockSize && (t = new this.Hash().update(t).digest()), Pa(t.length <= this.blockSize);\n    for(var r = t.length; r < this.blockSize; r++)t.push(0);\n    for(r = 0; r < t.length; r++)t[r] ^= 54;\n    for(this.inner = new this.Hash().update(t), r = 0; r < t.length; r++)t[r] ^= 106;\n    this.outer = new this.Hash().update(t);\n}, hr.prototype.update = function(t, r) {\n    return this.inner.update(t, r), this;\n}, hr.prototype.digest = function(t) {\n    return this.outer.update(this.inner.digest()), this.outer.digest(t);\n}, function(e) {\n    var t = e;\n    t.utils = Q, t.common = fr, t.sha = or, t.ripemd = Sf, t.hmac = Da, t.sha1 = t.sha.sha1, t.sha256 = t.sha.sha256, t.sha224 = t.sha.sha224, t.sha384 = t.sha.sha384, t.sha512 = t.sha.sha512, t.ripemd160 = t.ripemd.ripemd160;\n}(se);\nfunction cr(e, t, r) {\n    return r = {\n        path: t,\n        exports: {},\n        require: function(i, n) {\n            return Fa(i, n !== null && n !== void 0 ? n : r.path);\n        }\n    }, e(r, r.exports), r.exports;\n}\nfunction Fa() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\n_c67 = Fa;\nvar Pi = Cf;\nfunction Cf(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\n_c68 = Cf;\nCf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar fe = cr(function(e, t) {\n    var r = t;\n    function i(h, p) {\n        if (Array.isArray(h)) return h.slice();\n        if (!h) return [];\n        var b = [];\n        if (typeof h != \"string\") {\n            for(var m = 0; m < h.length; m++)b[m] = h[m] | 0;\n            return b;\n        }\n        if (p === \"hex\") {\n            h = h.replace(/[^a-z0-9]+/ig, \"\"), h.length % 2 !== 0 && (h = \"0\" + h);\n            for(var m = 0; m < h.length; m += 2)b.push(parseInt(h[m] + h[m + 1], 16));\n        } else for(var m = 0; m < h.length; m++){\n            var w = h.charCodeAt(m), y = w >> 8, S = w & 255;\n            y ? b.push(y, S) : b.push(S);\n        }\n        return b;\n    }\n    r.toArray = i;\n    function n(h) {\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    r.zero2 = n;\n    function o(h) {\n        for(var p = \"\", b = 0; b < h.length; b++)p += n(h[b].toString(16));\n        return p;\n    }\n    r.toHex = o, r.encode = function(p, b) {\n        return b === \"hex\" ? o(p) : p;\n    };\n}), Jt = cr(function(e, t) {\n    var r = t;\n    r.assert = Pi, r.toArray = fe.toArray, r.zero2 = fe.zero2, r.toHex = fe.toHex, r.encode = fe.encode;\n    function i(b, m, w) {\n        var y = new Array(Math.max(b.bitLength(), w) + 1);\n        y.fill(0);\n        for(var S = 1 << m + 1, I = b.clone(), N = 0; N < y.length; N++){\n            var C, F = I.andln(S - 1);\n            I.isOdd() ? (F > (S >> 1) - 1 ? C = (S >> 1) - F : C = F, I.isubn(C)) : C = 0, y[N] = C, I.iushrn(1);\n        }\n        return y;\n    }\n    r.getNAF = i;\n    function n(b, m) {\n        var w = [\n            [],\n            []\n        ];\n        b = b.clone(), m = m.clone();\n        for(var y = 0, S = 0, I; b.cmpn(-y) > 0 || m.cmpn(-S) > 0;){\n            var N = b.andln(3) + y & 3, C = m.andln(3) + S & 3;\n            N === 3 && (N = -1), C === 3 && (C = -1);\n            var F;\n            N & 1 ? (I = b.andln(7) + y & 7, (I === 3 || I === 5) && C === 2 ? F = -N : F = N) : F = 0, w[0].push(F);\n            var U;\n            C & 1 ? (I = m.andln(7) + S & 7, (I === 3 || I === 5) && N === 2 ? U = -C : U = C) : U = 0, w[1].push(U), 2 * y === F + 1 && (y = 1 - y), 2 * S === U + 1 && (S = 1 - S), b.iushrn(1), m.iushrn(1);\n        }\n        return w;\n    }\n    r.getJSF = n;\n    function o(b, m, w) {\n        var y = \"_\" + m;\n        b.prototype[m] = function() {\n            return this[y] !== void 0 ? this[y] : this[y] = w.call(this);\n        };\n    }\n    r.cachedProperty = o;\n    function h(b) {\n        return typeof b == \"string\" ? r.toArray(b, \"hex\") : b;\n    }\n    r.parseBytes = h;\n    function p(b) {\n        return new K(b, \"hex\", \"le\");\n    }\n    r.intFromLE = p;\n}), Ur = Jt.getNAF, Ta = Jt.getJSF, kr = Jt.assert;\nfunction Ce(e, t) {\n    this.type = e, this.p = new K(t.p, 16), this.red = t.prime ? K.red(t.prime) : K.mont(this.p), this.zero = new K(0).toRed(this.red), this.one = new K(1).toRed(this.red), this.two = new K(2).toRed(this.red), this.n = t.n && new K(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;\n    var r = this.n && this.p.div(this.n);\n    !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));\n}\n_c69 = Ce;\nvar Ze = Ce;\nCe.prototype.point = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype.validate = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype._fixedNafMul = function(t, r) {\n    kr(t.precomputed);\n    var i = t._getDoubles(), n = Ur(r, 1, this._bitLength), o = (1 << i.step + 1) - (i.step % 2 === 0 ? 2 : 1);\n    o /= 3;\n    var h = [], p, b;\n    for(p = 0; p < n.length; p += i.step){\n        b = 0;\n        for(var m = p + i.step - 1; m >= p; m--)b = (b << 1) + n[m];\n        h.push(b);\n    }\n    for(var w = this.jpoint(null, null, null), y = this.jpoint(null, null, null), S = o; S > 0; S--){\n        for(p = 0; p < h.length; p++)b = h[p], b === S ? y = y.mixedAdd(i.points[p]) : b === -S && (y = y.mixedAdd(i.points[p].neg()));\n        w = w.add(y);\n    }\n    return w.toP();\n}, Ce.prototype._wnafMul = function(t, r) {\n    var i = 4, n = t._getNAFPoints(i);\n    i = n.wnd;\n    for(var o = n.points, h = Ur(r, i, this._bitLength), p = this.jpoint(null, null, null), b = h.length - 1; b >= 0; b--){\n        for(var m = 0; b >= 0 && h[b] === 0; b--)m++;\n        if (b >= 0 && m++, p = p.dblp(m), b < 0) break;\n        var w = h[b];\n        kr(w !== 0), t.type === \"affine\" ? w > 0 ? p = p.mixedAdd(o[w - 1 >> 1]) : p = p.mixedAdd(o[-w - 1 >> 1].neg()) : w > 0 ? p = p.add(o[w - 1 >> 1]) : p = p.add(o[-w - 1 >> 1].neg());\n    }\n    return t.type === \"affine\" ? p.toP() : p;\n}, Ce.prototype._wnafMulAdd = function(t, r, i, n, o) {\n    var h = this._wnafT1, p = this._wnafT2, b = this._wnafT3, m = 0, w, y, S;\n    for(w = 0; w < n; w++){\n        S = r[w];\n        var I = S._getNAFPoints(t);\n        h[w] = I.wnd, p[w] = I.points;\n    }\n    for(w = n - 1; w >= 1; w -= 2){\n        var N = w - 1, C = w;\n        if (h[N] !== 1 || h[C] !== 1) {\n            b[N] = Ur(i[N], h[N], this._bitLength), b[C] = Ur(i[C], h[C], this._bitLength), m = Math.max(b[N].length, m), m = Math.max(b[C].length, m);\n            continue;\n        }\n        var F = [\n            r[N],\n            null,\n            null,\n            r[C]\n        ];\n        r[N].y.cmp(r[C].y) === 0 ? (F[1] = r[N].add(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg())) : r[N].y.cmp(r[C].y.redNeg()) === 0 ? (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].add(r[C].neg())) : (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg()));\n        var U = [\n            -3,\n            -1,\n            -5,\n            -7,\n            0,\n            7,\n            5,\n            1,\n            3\n        ], J = Ta(i[N], i[C]);\n        for(m = Math.max(J[0].length, m), b[N] = new Array(m), b[C] = new Array(m), y = 0; y < m; y++){\n            var Bt = J[0][y] | 0, G = J[1][y] | 0;\n            b[N][y] = U[(Bt + 1) * 3 + (G + 1)], b[C][y] = 0, p[N] = F;\n        }\n    }\n    var H = this.jpoint(null, null, null), z = this._wnafT4;\n    for(w = m; w >= 0; w--){\n        for(var Pt = 0; w >= 0;){\n            var W = !0;\n            for(y = 0; y < n; y++)z[y] = b[y][w] | 0, z[y] !== 0 && (W = !1);\n            if (!W) break;\n            Pt++, w--;\n        }\n        if (w >= 0 && Pt++, H = H.dblp(Pt), w < 0) break;\n        for(y = 0; y < n; y++){\n            var Rt = z[y];\n            Rt !== 0 && (Rt > 0 ? S = p[y][Rt - 1 >> 1] : Rt < 0 && (S = p[y][-Rt - 1 >> 1].neg()), S.type === \"affine\" ? H = H.mixedAdd(S) : H = H.add(S));\n        }\n    }\n    for(w = 0; w < n; w++)p[w] = null;\n    return o ? H : H.toP();\n};\nfunction Xt(e, t) {\n    this.curve = e, this.type = t, this.precomputed = null;\n}\n_c70 = Xt;\nCe.BasePoint = Xt, Xt.prototype.eq = function() {\n    throw new Error(\"Not implemented\");\n}, Xt.prototype.validate = function() {\n    return this.curve.validate(this);\n}, Ce.prototype.decodePoint = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = this.p.byteLength();\n    if ((t[0] === 4 || t[0] === 6 || t[0] === 7) && t.length - 1 === 2 * i) {\n        t[0] === 6 ? kr(t[t.length - 1] % 2 === 0) : t[0] === 7 && kr(t[t.length - 1] % 2 === 1);\n        var n = this.point(t.slice(1, 1 + i), t.slice(1 + i, 1 + 2 * i));\n        return n;\n    } else if ((t[0] === 2 || t[0] === 3) && t.length - 1 === i) return this.pointFromX(t.slice(1, 1 + i), t[0] === 3);\n    throw new Error(\"Unknown point format\");\n}, Xt.prototype.encodeCompressed = function(t) {\n    return this.encode(t, !0);\n}, Xt.prototype._encode = function(t) {\n    var r = this.curve.p.byteLength(), i = this.getX().toArray(\"be\", r);\n    return t ? [\n        this.getY().isEven() ? 2 : 3\n    ].concat(i) : [\n        4\n    ].concat(i, this.getY().toArray(\"be\", r));\n}, Xt.prototype.encode = function(t, r) {\n    return Jt.encode(this._encode(r), t);\n}, Xt.prototype.precompute = function(t) {\n    if (this.precomputed) return this;\n    var r = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    return r.naf = this._getNAFPoints(8), r.doubles = this._getDoubles(4, t), r.beta = this._getBeta(), this.precomputed = r, this;\n}, Xt.prototype._hasDoubles = function(t) {\n    if (!this.precomputed) return !1;\n    var r = this.precomputed.doubles;\n    return r ? r.points.length >= Math.ceil((t.bitLength() + 1) / r.step) : !1;\n}, Xt.prototype._getDoubles = function(t, r) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    for(var i = [\n        this\n    ], n = this, o = 0; o < r; o += t){\n        for(var h = 0; h < t; h++)n = n.dbl();\n        i.push(n);\n    }\n    return {\n        step: t,\n        points: i\n    };\n}, Xt.prototype._getNAFPoints = function(t) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    for(var r = [\n        this\n    ], i = (1 << t) - 1, n = i === 1 ? null : this.dbl(), o = 1; o < i; o++)r[o] = r[o - 1].add(n);\n    return {\n        wnd: t,\n        points: r\n    };\n}, Xt.prototype._getBeta = function() {\n    return null;\n}, Xt.prototype.dblp = function(t) {\n    for(var r = this, i = 0; i < t; i++)r = r.dbl();\n    return r;\n};\nvar Di = cr(function(e) {\n    typeof Object.create == \"function\" ? e.exports = function(r, i) {\n        i && (r.super_ = i, r.prototype = Object.create(i.prototype, {\n            constructor: {\n                value: r,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        }));\n    } : e.exports = function(r, i) {\n        if (i) {\n            r.super_ = i;\n            var n = function() {};\n            n.prototype = i.prototype, r.prototype = new n, r.prototype.constructor = r;\n        }\n    };\n}), Ua = Jt.assert;\nfunction Zt(e) {\n    Ze.call(this, \"short\", e), this.a = new K(e.a, 16).toRed(this.red), this.b = new K(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);\n}\n_c71 = Zt;\nDi(Zt, Ze);\nvar ka = Zt;\nZt.prototype._getEndomorphism = function(t) {\n    if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {\n        var r, i;\n        if (t.beta) r = new K(t.beta, 16).toRed(this.red);\n        else {\n            var n = this._getEndoRoots(this.p);\n            r = n[0].cmp(n[1]) < 0 ? n[0] : n[1], r = r.toRed(this.red);\n        }\n        if (t.lambda) i = new K(t.lambda, 16);\n        else {\n            var o = this._getEndoRoots(this.n);\n            this.g.mul(o[0]).x.cmp(this.g.x.redMul(r)) === 0 ? i = o[0] : (i = o[1], Ua(this.g.mul(i).x.cmp(this.g.x.redMul(r)) === 0));\n        }\n        var h;\n        return t.basis ? h = t.basis.map(function(p) {\n            return {\n                a: new K(p.a, 16),\n                b: new K(p.b, 16)\n            };\n        }) : h = this._getEndoBasis(i), {\n            beta: r,\n            lambda: i,\n            basis: h\n        };\n    }\n}, Zt.prototype._getEndoRoots = function(t) {\n    var r = t === this.p ? this.red : K.mont(t), i = new K(2).toRed(r).redInvm(), n = i.redNeg(), o = new K(3).toRed(r).redNeg().redSqrt().redMul(i), h = n.redAdd(o).fromRed(), p = n.redSub(o).fromRed();\n    return [\n        h,\n        p\n    ];\n}, Zt.prototype._getEndoBasis = function(t) {\n    for(var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), i = t, n = this.n.clone(), o = new K(1), h = new K(0), p = new K(0), b = new K(1), m, w, y, S, I, N, C, F = 0, U, J; i.cmpn(0) !== 0;){\n        var Bt = n.div(i);\n        U = n.sub(Bt.mul(i)), J = p.sub(Bt.mul(o));\n        var G = b.sub(Bt.mul(h));\n        if (!y && U.cmp(r) < 0) m = C.neg(), w = o, y = U.neg(), S = J;\n        else if (y && ++F === 2) break;\n        C = U, n = i, i = U, p = o, o = J, b = h, h = G;\n    }\n    I = U.neg(), N = J;\n    var H = y.sqr().add(S.sqr()), z = I.sqr().add(N.sqr());\n    return z.cmp(H) >= 0 && (I = m, N = w), y.negative && (y = y.neg(), S = S.neg()), I.negative && (I = I.neg(), N = N.neg()), [\n        {\n            a: y,\n            b: S\n        },\n        {\n            a: I,\n            b: N\n        }\n    ];\n}, Zt.prototype._endoSplit = function(t) {\n    var r = this.endo.basis, i = r[0], n = r[1], o = n.b.mul(t).divRound(this.n), h = i.b.neg().mul(t).divRound(this.n), p = o.mul(i.a), b = h.mul(n.a), m = o.mul(i.b), w = h.mul(n.b), y = t.sub(p).sub(b), S = m.add(w).neg();\n    return {\n        k1: y,\n        k2: S\n    };\n}, Zt.prototype.pointFromX = function(t, r) {\n    t = new K(t, 16), t.red || (t = t.toRed(this.red));\n    var i = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), n = i.redSqrt();\n    if (n.redSqr().redSub(i).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    var o = n.fromRed().isOdd();\n    return (r && !o || !r && o) && (n = n.redNeg()), this.point(t, n);\n}, Zt.prototype.validate = function(t) {\n    if (t.inf) return !0;\n    var r = t.x, i = t.y, n = this.a.redMul(r), o = r.redSqr().redMul(r).redIAdd(n).redIAdd(this.b);\n    return i.redSqr().redISub(o).cmpn(0) === 0;\n}, Zt.prototype._endoWnafMulAdd = function(t, r, i) {\n    for(var n = this._endoWnafT1, o = this._endoWnafT2, h = 0; h < t.length; h++){\n        var p = this._endoSplit(r[h]), b = t[h], m = b._getBeta();\n        p.k1.negative && (p.k1.ineg(), b = b.neg(!0)), p.k2.negative && (p.k2.ineg(), m = m.neg(!0)), n[h * 2] = b, n[h * 2 + 1] = m, o[h * 2] = p.k1, o[h * 2 + 1] = p.k2;\n    }\n    for(var w = this._wnafMulAdd(1, n, o, h * 2, i), y = 0; y < h * 2; y++)n[y] = null, o[y] = null;\n    return w;\n};\nfunction Ft(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"affine\"), t === null && r === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new K(t, 16), this.y = new K(r, 16), i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);\n}\n_c72 = Ft;\nDi(Ft, Ze.BasePoint), Zt.prototype.point = function(t, r, i) {\n    return new Ft(this, t, r, i);\n}, Zt.prototype.pointFromJSON = function(t, r) {\n    return Ft.fromJSON(this, t, r);\n}, Ft.prototype._getBeta = function() {\n    if (this.curve.endo) {\n        var t = this.precomputed;\n        if (t && t.beta) return t.beta;\n        var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n        if (t) {\n            var i = this.curve, n = function(o) {\n                return i.point(o.x.redMul(i.endo.beta), o.y);\n            };\n            t.beta = r, r.precomputed = {\n                beta: null,\n                naf: t.naf && {\n                    wnd: t.naf.wnd,\n                    points: t.naf.points.map(n)\n                },\n                doubles: t.doubles && {\n                    step: t.doubles.step,\n                    points: t.doubles.points.map(n)\n                }\n            };\n        }\n        return r;\n    }\n}, Ft.prototype.toJSON = function() {\n    return this.precomputed ? [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ] : [\n        this.x,\n        this.y\n    ];\n}, Ft.fromJSON = function(t, r, i) {\n    typeof r == \"string\" && (r = JSON.parse(r));\n    var n = t.point(r[0], r[1], i);\n    if (!r[2]) return n;\n    function o(p) {\n        return t.point(p[0], p[1], i);\n    }\n    var h = r[2];\n    return n.precomputed = {\n        beta: null,\n        doubles: h.doubles && {\n            step: h.doubles.step,\n            points: [\n                n\n            ].concat(h.doubles.points.map(o))\n        },\n        naf: h.naf && {\n            wnd: h.naf.wnd,\n            points: [\n                n\n            ].concat(h.naf.points.map(o))\n        }\n    }, n;\n}, Ft.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC Point Infinity>\" : \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n}, Ft.prototype.isInfinity = function() {\n    return this.inf;\n}, Ft.prototype.add = function(t) {\n    if (this.inf) return t;\n    if (t.inf) return this;\n    if (this.eq(t)) return this.dbl();\n    if (this.neg().eq(t)) return this.curve.point(null, null);\n    if (this.x.cmp(t.x) === 0) return this.curve.point(null, null);\n    var r = this.y.redSub(t.y);\n    r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(t.x).redInvm()));\n    var i = r.redSqr().redISub(this.x).redISub(t.x), n = r.redMul(this.x.redSub(i)).redISub(this.y);\n    return this.curve.point(i, n);\n}, Ft.prototype.dbl = function() {\n    if (this.inf) return this;\n    var t = this.y.redAdd(this.y);\n    if (t.cmpn(0) === 0) return this.curve.point(null, null);\n    var r = this.curve.a, i = this.x.redSqr(), n = t.redInvm(), o = i.redAdd(i).redIAdd(i).redIAdd(r).redMul(n), h = o.redSqr().redISub(this.x.redAdd(this.x)), p = o.redMul(this.x.redSub(h)).redISub(this.y);\n    return this.curve.point(h, p);\n}, Ft.prototype.getX = function() {\n    return this.x.fromRed();\n}, Ft.prototype.getY = function() {\n    return this.y.fromRed();\n}, Ft.prototype.mul = function(t) {\n    return t = new K(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([\n        this\n    ], [\n        t\n    ]) : this.curve._wnafMul(this, t);\n}, Ft.prototype.mulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o) : this.curve._wnafMulAdd(1, n, o, 2);\n}, Ft.prototype.jmulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o, !0) : this.curve._wnafMulAdd(1, n, o, 2, !0);\n}, Ft.prototype.eq = function(t) {\n    return this === t || this.inf === t.inf && (this.inf || this.x.cmp(t.x) === 0 && this.y.cmp(t.y) === 0);\n}, Ft.prototype.neg = function(t) {\n    if (this.inf) return this;\n    var r = this.curve.point(this.x, this.y.redNeg());\n    if (t && this.precomputed) {\n        var i = this.precomputed, n = function(o) {\n            return o.neg();\n        };\n        r.precomputed = {\n            naf: i.naf && {\n                wnd: i.naf.wnd,\n                points: i.naf.points.map(n)\n            },\n            doubles: i.doubles && {\n                step: i.doubles.step,\n                points: i.doubles.points.map(n)\n            }\n        };\n    }\n    return r;\n}, Ft.prototype.toJ = function() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var t = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return t;\n};\nfunction Tt(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"jacobian\"), t === null && r === null && i === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new K(0)) : (this.x = new K(t, 16), this.y = new K(r, 16), this.z = new K(i, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;\n}\n_c73 = Tt;\nDi(Tt, Ze.BasePoint), Zt.prototype.jpoint = function(t, r, i) {\n    return new Tt(this, t, r, i);\n}, Tt.prototype.toP = function() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var t = this.z.redInvm(), r = t.redSqr(), i = this.x.redMul(r), n = this.y.redMul(r).redMul(t);\n    return this.curve.point(i, n);\n}, Tt.prototype.neg = function() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n}, Tt.prototype.add = function(t) {\n    if (this.isInfinity()) return t;\n    if (t.isInfinity()) return this;\n    var r = t.z.redSqr(), i = this.z.redSqr(), n = this.x.redMul(r), o = t.x.redMul(i), h = this.y.redMul(r.redMul(t.z)), p = t.y.redMul(i.redMul(this.z)), b = n.redSub(o), m = h.redSub(p);\n    if (b.cmpn(0) === 0) return m.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var w = b.redSqr(), y = w.redMul(b), S = n.redMul(w), I = m.redSqr().redIAdd(y).redISub(S).redISub(S), N = m.redMul(S.redISub(I)).redISub(h.redMul(y)), C = this.z.redMul(t.z).redMul(b);\n    return this.curve.jpoint(I, N, C);\n}, Tt.prototype.mixedAdd = function(t) {\n    if (this.isInfinity()) return t.toJ();\n    if (t.isInfinity()) return this;\n    var r = this.z.redSqr(), i = this.x, n = t.x.redMul(r), o = this.y, h = t.y.redMul(r).redMul(this.z), p = i.redSub(n), b = o.redSub(h);\n    if (p.cmpn(0) === 0) return b.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var m = p.redSqr(), w = m.redMul(p), y = i.redMul(m), S = b.redSqr().redIAdd(w).redISub(y).redISub(y), I = b.redMul(y.redISub(S)).redISub(o.redMul(w)), N = this.z.redMul(p);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.dblp = function(t) {\n    if (t === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!t) return this.dbl();\n    var r;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var i = this;\n        for(r = 0; r < t; r++)i = i.dbl();\n        return i;\n    }\n    var n = this.curve.a, o = this.curve.tinv, h = this.x, p = this.y, b = this.z, m = b.redSqr().redSqr(), w = p.redAdd(p);\n    for(r = 0; r < t; r++){\n        var y = h.redSqr(), S = w.redSqr(), I = S.redSqr(), N = y.redAdd(y).redIAdd(y).redIAdd(n.redMul(m)), C = h.redMul(S), F = N.redSqr().redISub(C.redAdd(C)), U = C.redISub(F), J = N.redMul(U);\n        J = J.redIAdd(J).redISub(I);\n        var Bt = w.redMul(b);\n        r + 1 < t && (m = m.redMul(I)), h = F, b = Bt, w = J;\n    }\n    return this.curve.jpoint(h, w.redMul(o), b);\n}, Tt.prototype.dbl = function() {\n    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();\n}, Tt.prototype._zeroDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var b = n.redAdd(n).redIAdd(n), m = b.redSqr().redISub(p).redISub(p), w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), t = m, r = b.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.x.redSqr(), S = this.y.redSqr(), I = S.redSqr(), N = this.x.redAdd(S).redSqr().redISub(y).redISub(I);\n        N = N.redIAdd(N);\n        var C = y.redAdd(y).redIAdd(y), F = C.redSqr(), U = I.redIAdd(I);\n        U = U.redIAdd(U), U = U.redIAdd(U), t = F.redISub(N).redISub(N), r = C.redMul(N.redISub(t)).redISub(U), i = this.y.redMul(this.z), i = i.redIAdd(i);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._threeDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var b = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), m = b.redSqr().redISub(p).redISub(p);\n        t = m;\n        var w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), r = b.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.z.redSqr(), S = this.y.redSqr(), I = this.x.redMul(S), N = this.x.redSub(y).redMul(this.x.redAdd(y));\n        N = N.redAdd(N).redIAdd(N);\n        var C = I.redIAdd(I);\n        C = C.redIAdd(C);\n        var F = C.redAdd(C);\n        t = N.redSqr().redISub(F), i = this.y.redAdd(this.z).redSqr().redISub(S).redISub(y);\n        var U = S.redSqr();\n        U = U.redIAdd(U), U = U.redIAdd(U), U = U.redIAdd(U), r = N.redMul(C.redISub(t)).redISub(U);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._dbl = function() {\n    var t = this.curve.a, r = this.x, i = this.y, n = this.z, o = n.redSqr().redSqr(), h = r.redSqr(), p = i.redSqr(), b = h.redAdd(h).redIAdd(h).redIAdd(t.redMul(o)), m = r.redAdd(r);\n    m = m.redIAdd(m);\n    var w = m.redMul(p), y = b.redSqr().redISub(w.redAdd(w)), S = w.redISub(y), I = p.redSqr();\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = b.redMul(S).redISub(I), C = i.redAdd(i).redMul(n);\n    return this.curve.jpoint(y, N, C);\n}, Tt.prototype.trpl = function() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    var t = this.x.redSqr(), r = this.y.redSqr(), i = this.z.redSqr(), n = r.redSqr(), o = t.redAdd(t).redIAdd(t), h = o.redSqr(), p = this.x.redAdd(r).redSqr().redISub(t).redISub(n);\n    p = p.redIAdd(p), p = p.redAdd(p).redIAdd(p), p = p.redISub(h);\n    var b = p.redSqr(), m = n.redIAdd(n);\n    m = m.redIAdd(m), m = m.redIAdd(m), m = m.redIAdd(m);\n    var w = o.redIAdd(p).redSqr().redISub(h).redISub(b).redISub(m), y = r.redMul(w);\n    y = y.redIAdd(y), y = y.redIAdd(y);\n    var S = this.x.redMul(b).redISub(y);\n    S = S.redIAdd(S), S = S.redIAdd(S);\n    var I = this.y.redMul(w.redMul(m.redISub(w)).redISub(p.redMul(b)));\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = this.z.redAdd(p).redSqr().redISub(i).redISub(b);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.mul = function(t, r) {\n    return t = new K(t, r), this.curve._wnafMul(this, t);\n}, Tt.prototype.eq = function(t) {\n    if (t.type === \"affine\") return this.eq(t.toJ());\n    if (this === t) return !0;\n    var r = this.z.redSqr(), i = t.z.redSqr();\n    if (this.x.redMul(i).redISub(t.x.redMul(r)).cmpn(0) !== 0) return !1;\n    var n = r.redMul(this.z), o = i.redMul(t.z);\n    return this.y.redMul(o).redISub(t.y.redMul(n)).cmpn(0) === 0;\n}, Tt.prototype.eqXToP = function(t) {\n    var r = this.z.redSqr(), i = t.toRed(this.curve.red).redMul(r);\n    if (this.x.cmp(i) === 0) return !0;\n    for(var n = t.clone(), o = this.curve.redN.redMul(r);;){\n        if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;\n        if (i.redIAdd(o), this.x.cmp(i) === 0) return !0;\n    }\n}, Tt.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC JPoint Infinity>\" : \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n}, Tt.prototype.isInfinity = function() {\n    return this.z.cmpn(0) === 0;\n};\nvar qr = cr(function(e, t) {\n    var r = t;\n    r.base = Ze, r.short = ka, r.mont = null, r.edwards = null;\n}), Kr = cr(function(e, t) {\n    var r = t, i = Jt.assert;\n    function n(p) {\n        p.type === \"short\" ? this.curve = new qr.short(p) : p.type === \"edwards\" ? this.curve = new qr.edwards(p) : this.curve = new qr.mont(p), this.g = this.curve.g, this.n = this.curve.n, this.hash = p.hash, i(this.g.validate(), \"Invalid curve\"), i(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    r.PresetCurve = n;\n    function o(p, b) {\n        Object.defineProperty(r, p, {\n            configurable: !0,\n            enumerable: !0,\n            get: function() {\n                var m = new n(b);\n                return Object.defineProperty(r, p, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: m\n                }), m;\n            }\n        });\n    }\n    o(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    }), o(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    }), o(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    }), o(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: se.sha384,\n        gRed: !1,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    }), o(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: se.sha512,\n        gRed: !1,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    }), o(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"9\"\n        ]\n    }), o(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var h;\n    try {\n        h = null.crash();\n    } catch (e) {\n        h = void 0;\n    }\n    o(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: se.sha256,\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: !1,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            h\n        ]\n    });\n});\nfunction Re(e) {\n    if (!(this instanceof Re)) return new Re(e);\n    this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;\n    var t = fe.toArray(e.entropy, e.entropyEnc || \"hex\"), r = fe.toArray(e.nonce, e.nonceEnc || \"hex\"), i = fe.toArray(e.pers, e.persEnc || \"hex\");\n    Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._init(t, r, i);\n}\n_c74 = Re;\nvar Rf = Re;\nRe.prototype._init = function(t, r, i) {\n    var n = t.concat(r).concat(i);\n    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);\n    for(var o = 0; o < this.V.length; o++)this.K[o] = 0, this.V[o] = 1;\n    this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;\n}, Re.prototype._hmac = function() {\n    return new se.hmac(this.hash, this.K);\n}, Re.prototype._update = function(t) {\n    var r = this._hmac().update(this.V).update([\n        0\n    ]);\n    t && (r = r.update(t)), this.K = r.digest(), this.V = this._hmac().update(this.V).digest(), t && (this.K = this._hmac().update(this.V).update([\n        1\n    ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());\n}, Re.prototype.reseed = function(t, r, i, n) {\n    typeof r != \"string\" && (n = i, i = r, r = null), t = fe.toArray(t, r), i = fe.toArray(i, n), Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._update(t.concat(i || [])), this._reseed = 1;\n}, Re.prototype.generate = function(t, r, i, n) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    typeof r != \"string\" && (n = i, i = r, r = null), i && (i = fe.toArray(i, n || \"hex\"), this._update(i));\n    for(var o = []; o.length < t;)this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);\n    var h = o.slice(0, t);\n    return this._update(i), this._reseed++, fe.encode(h, r);\n};\nvar Fi = Jt.assert;\nfunction kt(e, t) {\n    this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);\n}\nvar Ti = kt;\nkt.fromPublic = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        pub: r,\n        pubEnc: i\n    });\n}, kt.fromPrivate = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        priv: r,\n        privEnc: i\n    });\n}, kt.prototype.validate = function() {\n    var t = this.getPublic();\n    return t.isInfinity() ? {\n        result: !1,\n        reason: \"Invalid public key\"\n    } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {\n        result: !0,\n        reason: null\n    } : {\n        result: !1,\n        reason: \"Public key * N != O\"\n    } : {\n        result: !1,\n        reason: \"Public key is not a point\"\n    };\n}, kt.prototype.getPublic = function(t, r) {\n    return typeof t == \"string\" && (r = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, t) : this.pub;\n}, kt.prototype.getPrivate = function(t) {\n    return t === \"hex\" ? this.priv.toString(16, 2) : this.priv;\n}, kt.prototype._importPrivate = function(t, r) {\n    this.priv = new K(t, r || 16), this.priv = this.priv.umod(this.ec.curve.n);\n}, kt.prototype._importPublic = function(t, r) {\n    if (t.x || t.y) {\n        this.ec.curve.type === \"mont\" ? Fi(t.x, \"Need x coordinate\") : (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") && Fi(t.x && t.y, \"Need both x and y coordinate\"), this.pub = this.ec.curve.point(t.x, t.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(t, r);\n}, kt.prototype.derive = function(t) {\n    return t.validate() || Fi(t.validate(), \"public point not validated\"), t.mul(this.priv).getX();\n}, kt.prototype.sign = function(t, r, i) {\n    return this.ec.sign(t, this, r, i);\n}, kt.prototype.verify = function(t, r) {\n    return this.ec.verify(t, r, this);\n}, kt.prototype.inspect = function() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\nvar qa = Jt.assert;\nfunction Hr(e, t) {\n    if (e instanceof Hr) return e;\n    this._importDER(e, t) || (qa(e.r && e.s, \"Signature without r or s\"), this.r = new K(e.r, 16), this.s = new K(e.s, 16), e.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);\n}\n_c75 = Hr;\nvar zr = Hr;\nfunction Ka() {\n    this.place = 0;\n}\n_c76 = Ka;\nfunction Ui(e, t) {\n    var r = e[t.place++];\n    if (!(r & 128)) return r;\n    var i = r & 15;\n    if (i === 0 || i > 4) return !1;\n    for(var n = 0, o = 0, h = t.place; o < i; o++, h++)n <<= 8, n |= e[h], n >>>= 0;\n    return n <= 127 ? !1 : (t.place = h, n);\n}\n_c77 = Ui;\nfunction Of(e) {\n    for(var t = 0, r = e.length - 1; !e[t] && !(e[t + 1] & 128) && t < r;)t++;\n    return t === 0 ? e : e.slice(t);\n}\n_c78 = Of;\nHr.prototype._importDER = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = new Ka;\n    if (t[i.place++] !== 48) return !1;\n    var n = Ui(t, i);\n    if (n === !1 || n + i.place !== t.length || t[i.place++] !== 2) return !1;\n    var o = Ui(t, i);\n    if (o === !1) return !1;\n    var h = t.slice(i.place, o + i.place);\n    if (i.place += o, t[i.place++] !== 2) return !1;\n    var p = Ui(t, i);\n    if (p === !1 || t.length !== p + i.place) return !1;\n    var b = t.slice(i.place, p + i.place);\n    if (h[0] === 0) if (h[1] & 128) h = h.slice(1);\n    else return !1;\n    if (b[0] === 0) if (b[1] & 128) b = b.slice(1);\n    else return !1;\n    return this.r = new K(h), this.s = new K(b), this.recoveryParam = null, !0;\n};\nfunction ki(e, t) {\n    if (t < 128) {\n        e.push(t);\n        return;\n    }\n    var r = 1 + (Math.log(t) / Math.LN2 >>> 3);\n    for(e.push(r | 128); --r;)e.push(t >>> (r << 3) & 255);\n    e.push(t);\n}\nHr.prototype.toDER = function(t) {\n    var r = this.r.toArray(), i = this.s.toArray();\n    for(r[0] & 128 && (r = [\n        0\n    ].concat(r)), i[0] & 128 && (i = [\n        0\n    ].concat(i)), r = Of(r), i = Of(i); !i[0] && !(i[1] & 128);)i = i.slice(1);\n    var n = [\n        2\n    ];\n    ki(n, r.length), n = n.concat(r), n.push(2), ki(n, i.length);\n    var o = n.concat(i), h = [\n        48\n    ];\n    return ki(h, o.length), h = h.concat(o), Jt.encode(h, t);\n};\nvar Ha = function() {\n    throw new Error(\"unsupported\");\n}, Pf = Jt.assert;\nfunction $t(e) {\n    if (!(this instanceof $t)) return new $t(e);\n    typeof e == \"string\" && (Pf(Object.prototype.hasOwnProperty.call(Kr, e), \"Unknown curve \" + e), e = Kr[e]), e instanceof Kr.PresetCurve && (e = {\n        curve: e\n    }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;\n}\nvar za = $t;\n$t.prototype.keyPair = function(t) {\n    return new Ti(this, t);\n}, $t.prototype.keyFromPrivate = function(t, r) {\n    return Ti.fromPrivate(this, t, r);\n}, $t.prototype.keyFromPublic = function(t, r) {\n    return Ti.fromPublic(this, t, r);\n}, $t.prototype.genKeyPair = function(t) {\n    t || (t = {});\n    for(var r = new Rf({\n        hash: this.hash,\n        pers: t.pers,\n        persEnc: t.persEnc || \"utf8\",\n        entropy: t.entropy || Ha(this.hash.hmacStrength),\n        entropyEnc: t.entropy && t.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    }), i = this.n.byteLength(), n = this.n.sub(new K(2));;){\n        var o = new K(r.generate(i));\n        if (!(o.cmp(n) > 0)) return o.iaddn(1), this.keyFromPrivate(o);\n    }\n}, $t.prototype._truncateToN = function(t, r) {\n    var i = t.byteLength() * 8 - this.n.bitLength();\n    return i > 0 && (t = t.ushrn(i)), !r && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;\n}, $t.prototype.sign = function(t, r, i, n) {\n    typeof i == \"object\" && (n = i, i = null), n || (n = {}), r = this.keyFromPrivate(r, i), t = this._truncateToN(new K(t, 16));\n    for(var o = this.n.byteLength(), h = r.getPrivate().toArray(\"be\", o), p = t.toArray(\"be\", o), b = new Rf({\n        hash: this.hash,\n        entropy: h,\n        nonce: p,\n        pers: n.pers,\n        persEnc: n.persEnc || \"utf8\"\n    }), m = this.n.sub(new K(1)), w = 0;; w++){\n        var y = n.k ? n.k(w) : new K(b.generate(this.n.byteLength()));\n        if (y = this._truncateToN(y, !0), !(y.cmpn(1) <= 0 || y.cmp(m) >= 0)) {\n            var S = this.g.mul(y);\n            if (!S.isInfinity()) {\n                var I = S.getX(), N = I.umod(this.n);\n                if (N.cmpn(0) !== 0) {\n                    var C = y.invm(this.n).mul(N.mul(r.getPrivate()).iadd(t));\n                    if (C = C.umod(this.n), C.cmpn(0) !== 0) {\n                        var F = (S.getY().isOdd() ? 1 : 0) | (I.cmp(N) !== 0 ? 2 : 0);\n                        return n.canonical && C.cmp(this.nh) > 0 && (C = this.n.sub(C), F ^= 1), new zr({\n                            r: N,\n                            s: C,\n                            recoveryParam: F\n                        });\n                    }\n                }\n            }\n        }\n    }\n}, $t.prototype.verify = function(t, r, i, n) {\n    t = this._truncateToN(new K(t, 16)), i = this.keyFromPublic(i, n), r = new zr(r, \"hex\");\n    var o = r.r, h = r.s;\n    if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0 || h.cmpn(1) < 0 || h.cmp(this.n) >= 0) return !1;\n    var p = h.invm(this.n), b = p.mul(t).umod(this.n), m = p.mul(o).umod(this.n), w;\n    return this.curve._maxwellTrick ? (w = this.g.jmulAdd(b, i.getPublic(), m), w.isInfinity() ? !1 : w.eqXToP(o)) : (w = this.g.mulAdd(b, i.getPublic(), m), w.isInfinity() ? !1 : w.getX().umod(this.n).cmp(o) === 0);\n}, $t.prototype.recoverPubKey = function(e, t, r, i) {\n    Pf((3 & r) === r, \"The recovery param is more than two bits\"), t = new zr(t, i);\n    var n = this.n, o = new K(e), h = t.r, p = t.s, b = r & 1, m = r >> 1;\n    if (h.cmp(this.curve.p.umod(this.curve.n)) >= 0 && m) throw new Error(\"Unable to find sencond key candinate\");\n    m ? h = this.curve.pointFromX(h.add(this.curve.n), b) : h = this.curve.pointFromX(h, b);\n    var w = t.r.invm(n), y = n.sub(o).mul(w).umod(n), S = p.mul(w).umod(n);\n    return this.g.mulAdd(y, h, S);\n}, $t.prototype.getKeyRecoveryParam = function(e, t, r, i) {\n    if (t = new zr(t, i), t.recoveryParam !== null) return t.recoveryParam;\n    for(var n = 0; n < 4; n++){\n        var o;\n        try {\n            o = this.recoverPubKey(e, t, n);\n        } catch (e) {\n            continue;\n        }\n        if (o.eq(r)) return n;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar La = cr(function(e, t) {\n    var r = t;\n    r.version = \"6.5.4\", r.utils = Jt, r.rand = function() {\n        throw new Error(\"unsupported\");\n    }, r.curve = qr, r.curves = Kr, r.ec = za, r.eddsa = null;\n}), ja = La.ec;\nconst Qa = \"signing-key/5.7.0\", qi = new L(Qa);\nlet Ki = null;\nfunction ve() {\n    return Ki || (Ki = new ja(\"secp256k1\")), Ki;\n}\nclass Ja {\n    _addPoint(t) {\n        const r = ve().keyFromPublic(Ot(this.publicKey)), i = ve().keyFromPublic(Ot(t));\n        return \"0x\" + r.pub.add(i.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = Ot(t);\n        i.length !== 32 && qi.throwArgumentError(\"bad digest length\", \"digest\", t);\n        const n = r.sign(i, {\n            canonical: !0\n        });\n        return zn({\n            recoveryParam: n.recoveryParam,\n            r: oe(\"0x\" + n.r.toString(16), 32),\n            s: oe(\"0x\" + n.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = ve().keyFromPublic(Ot(Df(t)));\n        return oe(\"0x\" + r.derive(i.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(t) {\n        return !!(t && t._isSigningKey);\n    }\n    constructor(t){\n        br(this, \"curve\", \"secp256k1\"), br(this, \"privateKey\", Kt(t)), N0(this.privateKey) !== 32 && qi.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        const r = ve().keyFromPrivate(Ot(this.privateKey));\n        br(this, \"publicKey\", \"0x\" + r.getPublic(!1, \"hex\")), br(this, \"compressedPublicKey\", \"0x\" + r.getPublic(!0, \"hex\")), br(this, \"_isSigningKey\", !0);\n    }\n}\nfunction Ga(e, t) {\n    const r = zn(t), i = {\n        r: Ot(r.r),\n        s: Ot(r.s)\n    };\n    return \"0x\" + ve().recoverPubKey(Ot(e), i, r.recoveryParam).encode(\"hex\", !1);\n}\n_c79 = Ga;\nfunction Df(e, t) {\n    const r = Ot(e);\n    if (r.length === 32) {\n        const i = new Ja(r);\n        return t ? \"0x\" + ve().keyFromPrivate(r).getPublic(!0, \"hex\") : i.publicKey;\n    } else {\n        if (r.length === 33) return t ? Kt(r) : \"0x\" + ve().keyFromPublic(r).getPublic(!1, \"hex\");\n        if (r.length === 65) return t ? \"0x\" + ve().keyFromPublic(r).getPublic(!0, \"hex\") : Kt(r);\n    }\n    return qi.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n_c80 = Df;\nconst Ya = \"transactions/5.7.0\";\nnew L(Ya);\nvar Ff;\n(function(e) {\n    e[e.legacy = 0] = \"legacy\", e[e.eip2930 = 1] = \"eip2930\", e[e.eip1559 = 2] = \"eip1559\";\n})(Ff || (Ff = {}));\nfunction Va(e) {\n    const t = Df(e);\n    return ns(Hn(yi(Hn(t, 1)), 12));\n}\n_c81 = Va;\nfunction Wa(e, t) {\n    return Va(Ga(Ot(e), t));\n}\n_c82 = Wa;\nconst Xa = \"https://rpc.walletconnect.com/v1\";\nasync function Tf(e, t, r, i, n, o) {\n    switch(r.t){\n        case \"eip191\":\n            return Uf(e, t, r.s);\n        case \"eip1271\":\n            return await kf(e, t, r.s, i, n, o);\n        default:\n            throw new Error(\"verifySignature failed: Attempted to verify CacaoSignature with unknown type: \".concat(r.t));\n    }\n}\n_c83 = Tf;\nfunction Uf(e, t, r) {\n    return Wa(ff(t), r).toLowerCase() === e.toLowerCase();\n}\n_c84 = Uf;\nasync function kf(e, t, r, i, n, o) {\n    try {\n        const h = \"0x1626ba7e\", p = \"0000000000000000000000000000000000000000000000000000000000000040\", b = \"0000000000000000000000000000000000000000000000000000000000000041\", m = r.substring(2), w = ff(t).substring(2), y = h + w + p + b + m, S = await fetch(\"\".concat(o || Xa, \"/?chainId=\").concat(i, \"&projectId=\").concat(n), {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: Za(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: e,\n                        data: y\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: I } = await S.json();\n        return I ? I.slice(0, h.length).toLowerCase() === h.toLowerCase() : !1;\n    } catch (h) {\n        return console.error(\"isValidEip1271Signature: \", h), !1;\n    }\n}\nfunction Za() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\n_c85 = Za;\nvar $a = Object.defineProperty, tu = Object.defineProperties, eu = Object.getOwnPropertyDescriptors, qf = Object.getOwnPropertySymbols, ru = Object.prototype.hasOwnProperty, iu = Object.prototype.propertyIsEnumerable, Kf = (e, t, r)=>t in e ? $a(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Hi = (e, t)=>{\n    for(var r in t || (t = {}))ru.call(t, r) && Kf(e, r, t[r]);\n    if (qf) for (var r of qf(t))iu.call(t, r) && Kf(e, r, t[r]);\n    return e;\n}, Hf = (e, t)=>tu(e, eu(t));\nconst nu = \"did:pkh:\", Lr = (e)=>e === null || e === void 0 ? void 0 : e.split(\":\"), zi = (e)=>{\n    const t = e && Lr(e);\n    if (t) return e.includes(nu) ? t[3] : t[1];\n}, fu = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t[2] + \":\" + t[3];\n}, Li = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t.pop();\n};\nasync function ou(e) {\n    const { cacao: t, projectId: r } = e, { s: i, p: n } = t, o = zf(n, n.iss), h = Li(n.iss);\n    return await Tf(h, o, i, zi(n.iss), r);\n}\nconst zf = (e, t)=>{\n    const r = \"\".concat(e.domain, \" wants you to sign in with your Ethereum account:\"), i = Li(t);\n    if (!e.aud && !e.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let n = e.statement || void 0;\n    const o = \"URI: \".concat(e.aud || e.uri), h = \"Version: \".concat(e.version), p = \"Chain ID: \".concat(zi(t)), b = \"Nonce: \".concat(e.nonce), m = \"Issued At: \".concat(e.iat), w = e.resources ? \"Resources:\".concat(e.resources.map((S)=>\"\\n- \".concat(S)).join(\"\")) : void 0, y = Qr(e.resources);\n    if (y) {\n        const S = Oe(y);\n        n = Ji(n, S);\n    }\n    return [\n        r,\n        i,\n        \"\",\n        n,\n        \"\",\n        o,\n        h,\n        p,\n        b,\n        m,\n        w\n    ].filter((S)=>S != null).join(\"\\n\");\n};\nfunction su(e, t, r) {\n    return r.includes(\"did:pkh:\") || (r = \"did:pkh:\".concat(r)), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: r,\n            domain: e.domain,\n            aud: e.aud,\n            version: e.version,\n            nonce: e.nonce,\n            iat: e.iat,\n            statement: e.statement,\n            requestId: e.requestId,\n            resources: e.resources,\n            nbf: e.nbf,\n            exp: e.exp\n        },\n        s: t\n    };\n}\nfunction au(e) {\n    var t;\n    const { authPayload: r, chains: i, methods: n } = e, o = r.statement || \"\";\n    if (!(i != null && i.length)) return r;\n    const h = r.chains, p = mi(h, i);\n    if (!(p != null && p.length)) throw new Error(\"No supported chains\");\n    const b = Lf(r.resources);\n    if (!b) return r;\n    me(b);\n    const m = jf(b, \"eip155\");\n    let w = (r === null || r === void 0 ? void 0 : r.resources) || [];\n    if (m != null && m.length) {\n        const y = Qf(m), S = mi(y, n);\n        if (!(S != null && S.length)) throw new Error(\"Supported methods don't satisfy the requested: \".concat(JSON.stringify(y), \", supported: \").concat(JSON.stringify(n)));\n        const I = ji(\"request\", S, {\n            chains: p\n        }), N = Vf(b, \"eip155\", I);\n        w = ((t = r === null || r === void 0 ? void 0 : r.resources) == null ? void 0 : t.slice(0, -1)) || [], w.push(jr(N));\n    }\n    return Hf(Hi({}, r), {\n        statement: Xf(o, Qr(w)),\n        chains: p,\n        resources: r != null && r.resources || w.length > 0 ? w : void 0\n    });\n}\nfunction Lf(e) {\n    const t = Qr(e);\n    if (t && Qi(t)) return Oe(t);\n}\n_c86 = Lf;\nfunction uu(e, t) {\n    var r;\n    return (r = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : r.hasOwnProperty(t);\n}\nfunction jf(e, t) {\n    var r, i;\n    return (r = e === null || e === void 0 ? void 0 : e.att) != null && r[t] ? Object.keys((i = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : i[t]) : [];\n}\nfunction hu(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>Object.keys(t))) || [];\n}\nfunction Qf(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>{\n        var r;\n        return (r = t.split(\"/\")) == null ? void 0 : r[1];\n    })) || [];\n}\n_c87 = Qf;\nfunction Jf(e) {\n    return Buffer.from(JSON.stringify(e)).toString(\"base64\");\n}\n_c88 = Jf;\nfunction Gf(e) {\n    return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf-8\"));\n}\n_c89 = Gf;\nfunction me(e) {\n    if (!e) throw new Error(\"No recap provided, value is undefined\");\n    if (!e.att) throw new Error(\"No `att` property found\");\n    const t = Object.keys(e.att);\n    if (!(t != null && t.length)) throw new Error(\"No resources found in `att` property\");\n    t.forEach((r)=>{\n        const i = e.att[r];\n        if (Array.isArray(i)) throw new Error(\"Resource must be an object: \".concat(r));\n        if (typeof i != \"object\") throw new Error(\"Resource must be an object: \".concat(r));\n        if (!Object.keys(i).length) throw new Error(\"Resource object is empty: \".concat(r));\n        Object.keys(i).forEach((n)=>{\n            const o = i[n];\n            if (!Array.isArray(o)) throw new Error(\"Ability limits \".concat(n, \" must be an array of objects, found: \").concat(o));\n            if (!o.length) throw new Error(\"Value of \".concat(n, \" is empty array, must be an array with objects\"));\n            o.forEach((h)=>{\n                if (typeof h != \"object\") throw new Error(\"Ability limits (\".concat(n, \") must be an array of objects, found: \").concat(h));\n            });\n        });\n    });\n}\nfunction Yf(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    return r === null || r === void 0 ? void 0 : r.sort((n, o)=>n.localeCompare(o)), {\n        att: {\n            [e]: ji(t, r, i)\n        }\n    };\n}\n_c90 = Yf;\nfunction Vf(e, t, r) {\n    var i;\n    return e.att[t] = Hi({}, r), ((i = Object.keys(e.att)) == null ? void 0 : i.sort((n, o)=>n.localeCompare(o))).reduce((n, o)=>(n.att[o] = e.att[o], n), {\n        att: {}\n    });\n}\n_c91 = Vf;\nfunction ji(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    t = t === null || t === void 0 ? void 0 : t.sort((n, o)=>n.localeCompare(o));\n    const i = t.map((n)=>({\n            [\"\".concat(e, \"/\").concat(n)]: [\n                r\n            ]\n        }));\n    return Object.assign({}, ...i);\n}\nfunction jr(e) {\n    return me(e), \"urn:recap:\".concat(Jf(e).replace(/=/g, \"\"));\n}\nfunction Oe(e) {\n    const t = Gf(e.replace(\"urn:recap:\", \"\"));\n    return me(t), t;\n}\n_c92 = Oe;\nfunction cu(e, t, r) {\n    const i = Yf(e, t, r);\n    return jr(i);\n}\nfunction Qi(e) {\n    return e && e.includes(\"urn:recap:\");\n}\n_c93 = Qi;\nfunction lu(e, t) {\n    const r = Oe(e), i = Oe(t), n = Wf(r, i);\n    return jr(n);\n}\nfunction Wf(e, t) {\n    me(e), me(t);\n    const r = Object.keys(e.att).concat(Object.keys(t.att)).sort((n, o)=>n.localeCompare(o)), i = {\n        att: {}\n    };\n    return r.forEach((n)=>{\n        var o, h;\n        Object.keys(((o = e.att) == null ? void 0 : o[n]) || {}).concat(Object.keys(((h = t.att) == null ? void 0 : h[n]) || {})).sort((p, b)=>p.localeCompare(b)).forEach((p)=>{\n            var b, m;\n            i.att[n] = Hf(Hi({}, i.att[n]), {\n                [p]: ((b = e.att[n]) == null ? void 0 : b[p]) || ((m = t.att[n]) == null ? void 0 : m[p])\n            });\n        });\n    }), i;\n}\n_c94 = Wf;\nfunction Ji() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", t = arguments.length > 1 ? arguments[1] : void 0;\n    me(t);\n    const r = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (e.includes(r)) return e;\n    const i = [];\n    let n = 0;\n    Object.keys(t.att).forEach((p)=>{\n        const b = Object.keys(t.att[p]).map((y)=>({\n                ability: y.split(\"/\")[0],\n                action: y.split(\"/\")[1]\n            }));\n        b.sort((y, S)=>y.action.localeCompare(S.action));\n        const m = {};\n        b.forEach((y)=>{\n            m[y.ability] || (m[y.ability] = []), m[y.ability].push(y.action);\n        });\n        const w = Object.keys(m).map((y)=>(n++, \"(\".concat(n, \") '\").concat(y, \"': '\").concat(m[y].join(\"', '\"), \"' for '\").concat(p, \"'.\")));\n        i.push(w.join(\", \").replace(\".,\", \".\"));\n    });\n    const o = i.join(\" \"), h = \"\".concat(r).concat(o);\n    return \"\".concat(e ? e + \" \" : \"\").concat(h);\n}\n_c95 = Ji;\nfunction du(e) {\n    var t;\n    const r = Oe(e);\n    me(r);\n    const i = (t = r.att) == null ? void 0 : t.eip155;\n    return i ? Object.keys(i).map((n)=>n.split(\"/\")[1]) : [];\n}\nfunction pu(e) {\n    const t = Oe(e);\n    me(t);\n    const r = [];\n    return Object.values(t.att).forEach((i)=>{\n        Object.values(i).forEach((n)=>{\n            var o;\n            (o = n === null || n === void 0 ? void 0 : n[0]) != null && o.chains && r.push(n[0].chains);\n        });\n    }), [\n        ...new Set(r.flat())\n    ];\n}\nfunction Xf(e, t) {\n    if (!t) return e;\n    const r = Oe(t);\n    return me(r), Ji(e, r);\n}\n_c96 = Xf;\nfunction Qr(e) {\n    if (!e) return;\n    const t = e === null || e === void 0 ? void 0 : e[e.length - 1];\n    return Qi(t) ? t : void 0;\n}\n_c97 = Qr;\nconst Gi = \"base10\", zt = \"base16\", Jr = \"base64pad\", Gr = \"utf8\", Yi = 0, lr = 1, vu = 0, Zf = 1, Vi = 12, Wi = 32;\nfunction mu() {\n    const e = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.generateKeyPair();\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.secretKey, zt),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.publicKey, zt)\n    };\n}\nfunction gu() {\n    const e = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, zt);\n}\nfunction Au(e, t) {\n    const r = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(t, zt), !0), i = new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.SHA256, r).expand(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(i, zt);\n}\n_c98 = Au;\nfunction bu(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction yu(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Gr));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction $f(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(\"\".concat(e), Gi);\n}\nfunction Mr(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, Gi));\n}\n_c99 = Mr;\nfunction wu(e) {\n    const t = $f(typeof e.type < \"u\" ? e.type : Yi);\n    if (Mr(t) === lr && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const r = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.senderPublicKey, zt) : void 0, i = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.iv, zt) : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Vi), n = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)).seal(i, (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.message, Gr));\n    return to({\n        type: t,\n        sealed: n,\n        iv: i,\n        senderPublicKey: r\n    });\n}\nfunction xu(e) {\n    const t = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)), { sealed: r, iv: i } = Xi(e.encoded), n = t.open(i, r);\n    if (n === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(n, Gr);\n}\nfunction to(e) {\n    if (Mr(e.type) === lr) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), Jr);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), Jr);\n}\nfunction Xi(e) {\n    const t = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Jr), r = t.slice(vu, Zf), i = Zf;\n    if (Mr(r) === lr) {\n        const p = i + Wi, b = p + Vi, m = t.slice(i, p), w = t.slice(p, b), y = t.slice(b);\n        return {\n            type: r,\n            sealed: y,\n            iv: w,\n            senderPublicKey: m\n        };\n    }\n    const n = i + Vi, o = t.slice(i, n), h = t.slice(n);\n    return {\n        type: r,\n        sealed: h,\n        iv: o\n    };\n}\n_c100 = Xi;\nfunction Mu(e, t) {\n    const r = Xi(e);\n    return eo({\n        type: Mr(r.type),\n        senderPublicKey: typeof r.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(r.senderPublicKey, zt) : void 0,\n        receiverPublicKey: t === null || t === void 0 ? void 0 : t.receiverPublicKey\n    });\n}\n_c101 = Mu;\nfunction eo(e) {\n    const t = (e === null || e === void 0 ? void 0 : e.type) || Yi;\n    if (t === lr) {\n        if (typeof (e === null || e === void 0 ? void 0 : e.senderPublicKey) > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof (e === null || e === void 0 ? void 0 : e.receiverPublicKey) > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: t,\n        senderPublicKey: e === null || e === void 0 ? void 0 : e.senderPublicKey,\n        receiverPublicKey: e === null || e === void 0 ? void 0 : e.receiverPublicKey\n    };\n}\nfunction Eu(e) {\n    return e.type === lr && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\n_c102 = Eu;\nconst ro = \"irn\";\nfunction Su(e) {\n    return (e === null || e === void 0 ? void 0 : e.relay) || {\n        protocol: ro\n    };\n}\n_c103 = Su;\nfunction Nu(e) {\n    const t = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__.RELAY_JSONRPC[e];\n    if (typeof t > \"u\") throw new Error(\"Relay Protocol not supported: \".concat(e));\n    return t;\n}\n_c104 = Nu;\nvar Iu = Object.defineProperty, _u = Object.defineProperties, Bu = Object.getOwnPropertyDescriptors, io = Object.getOwnPropertySymbols, Cu = Object.prototype.hasOwnProperty, Ru = Object.prototype.propertyIsEnumerable, no = (e, t, r)=>t in e ? Iu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, fo = (e, t)=>{\n    for(var r in t || (t = {}))Cu.call(t, r) && no(e, r, t[r]);\n    if (io) for (var r of io(t))Ru.call(t, r) && no(e, r, t[r]);\n    return e;\n}, Ou = (e, t)=>_u(e, Bu(t));\nfunction oo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const r = {}, i = \"relay\" + t;\n    return Object.keys(e).forEach((n)=>{\n        if (n.startsWith(i)) {\n            const o = n.replace(i, \"\"), h = e[n];\n            r[o] = h;\n        }\n    }), r;\n}\nfunction Pu(e) {\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const t = e.indexOf(\":\"), r = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, i = e.substring(0, t), n = e.substring(t + 1, r).split(\"@\"), o = typeof r < \"u\" ? e.substring(r) : \"\", h = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(o), p = typeof h.methods == \"string\" ? h.methods.split(\",\") : void 0;\n    return {\n        protocol: i,\n        topic: so(n[0]),\n        version: parseInt(n[1], 10),\n        symKey: h.symKey,\n        relay: oo(h),\n        methods: p,\n        expiryTimestamp: h.expiryTimestamp ? parseInt(h.expiryTimestamp, 10) : void 0\n    };\n}\n_c105 = Pu;\nfunction so(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction ao(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const r = \"relay\", i = {};\n    return Object.keys(e).forEach((n)=>{\n        const o = r + t + n;\n        e[n] && (i[o] = e[n]);\n    }), i;\n}\nfunction Du(e) {\n    return \"\".concat(e.protocol, \":\").concat(e.topic, \"@\").concat(e.version, \"?\") + query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(fo(Ou(fo({\n        symKey: e.symKey\n    }, ao(e.relay)), {\n        expiryTimestamp: e.expiryTimestamp\n    }), e.methods ? {\n        methods: e.methods.join(\",\")\n    } : {}));\n}\n_c106 = Du;\nvar Fu = Object.defineProperty, Tu = Object.defineProperties, Uu = Object.getOwnPropertyDescriptors, uo = Object.getOwnPropertySymbols, ku = Object.prototype.hasOwnProperty, qu = Object.prototype.propertyIsEnumerable, ho = (e, t, r)=>t in e ? Fu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Ku = (e, t)=>{\n    for(var r in t || (t = {}))ku.call(t, r) && ho(e, r, t[r]);\n    if (uo) for (var r of uo(t))qu.call(t, r) && ho(e, r, t[r]);\n    return e;\n}, Hu = (e, t)=>Tu(e, Uu(t));\nfunction $e(e) {\n    const t = [];\n    return e.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t.push(\"\".concat(i, \":\").concat(n));\n    }), t;\n}\nfunction co(e) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        t.push(...$e(r.accounts));\n    }), t;\n}\nfunction lo(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.methods);\n    }), r;\n}\nfunction po(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.events);\n    }), r;\n}\nfunction zu(e, t) {\n    const r = So(e, t);\n    if (r) throw new Error(r.message);\n    const i = {};\n    for (const [n, o] of Object.entries(e))i[n] = {\n        methods: o.methods,\n        events: o.events,\n        chains: o.accounts.map((h)=>\"\".concat(h.split(\":\")[0], \":\").concat(h.split(\":\")[1]))\n    };\n    return i;\n}\nfunction Lu(e) {\n    const { proposal: { requiredNamespaces: t, optionalNamespaces: r = {} }, supportedNamespaces: i } = e, n = $i(t), o = $i(r), h = {};\n    Object.keys(i).forEach((m)=>{\n        const w = i[m].chains, y = i[m].methods, S = i[m].events, I = i[m].accounts;\n        w.forEach((N)=>{\n            if (!I.some((C)=>C.includes(N))) throw new Error(\"No accounts provided for chain \".concat(N, \" in namespace \").concat(m));\n        }), h[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    });\n    const p = Io(t, h, \"approve()\");\n    if (p) throw new Error(p.message);\n    const b = {};\n    return !Object.keys(t).length && !Object.keys(r).length ? h : (Object.keys(n).forEach((m)=>{\n        const w = i[m].chains.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.chains) == null ? void 0 : F.includes(N);\n        }), y = i[m].methods.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.methods) == null ? void 0 : F.includes(N);\n        }), S = i[m].events.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.events) == null ? void 0 : F.includes(N);\n        }), I = w.map((N)=>i[m].accounts.filter((C)=>C.includes(\"\".concat(N, \":\")))).flat();\n        b[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    }), Object.keys(o).forEach((m)=>{\n        var w, y, S, I, N, C;\n        if (!i[m]) return;\n        const F = (y = (w = o[m]) == null ? void 0 : w.chains) == null ? void 0 : y.filter((G)=>i[m].chains.includes(G)), U = i[m].methods.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.methods) == null ? void 0 : z.includes(G);\n        }), J = i[m].events.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.events) == null ? void 0 : z.includes(G);\n        }), Bt = F === null || F === void 0 ? void 0 : F.map((G)=>i[m].accounts.filter((H)=>H.includes(\"\".concat(G, \":\")))).flat();\n        b[m] = {\n            chains: ge((S = b[m]) == null ? void 0 : S.chains, F),\n            methods: ge((I = b[m]) == null ? void 0 : I.methods, U),\n            events: ge((N = b[m]) == null ? void 0 : N.events, J),\n            accounts: ge((C = b[m]) == null ? void 0 : C.accounts, Bt)\n        };\n    }), b);\n}\n_c107 = Lu;\nfunction Zi(e) {\n    return e.includes(\":\");\n}\n_c108 = Zi;\nfunction vo(e) {\n    return Zi(e) ? e.split(\":\")[0] : e;\n}\nfunction $i(e) {\n    var t, r, i;\n    const n = {};\n    if (!Yr(e)) return n;\n    for (const [o, h] of Object.entries(e)){\n        const p = Zi(o) ? [\n            o\n        ] : h.chains, b = h.methods || [], m = h.events || [], w = vo(o);\n        n[w] = Hu(Ku({}, n[w]), {\n            chains: ge(p, (t = n[w]) == null ? void 0 : t.chains),\n            methods: ge(b, (r = n[w]) == null ? void 0 : r.methods),\n            events: ge(m, (i = n[w]) == null ? void 0 : i.events)\n        });\n    }\n    return n;\n}\nfunction mo(e) {\n    const t = {};\n    return e === null || e === void 0 ? void 0 : e.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t[i] || (t[i] = {\n            accounts: [],\n            chains: [],\n            events: []\n        }), t[i].accounts.push(r), t[i].chains.push(\"\".concat(i, \":\").concat(n));\n    }), t;\n}\nfunction ju(e, t) {\n    t = t.map((i)=>i.replace(\"did:pkh:\", \"\"));\n    const r = mo(t);\n    for (const [i, n] of Object.entries(r))n.methods ? n.methods = ge(n.methods, e) : n.methods = e, n.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return r;\n}\nconst go = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, Ao = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction xe(e, t) {\n    const { message: r, code: i } = Ao[e];\n    return {\n        message: t ? \"\".concat(r, \" \").concat(t) : r,\n        code: i\n    };\n}\nfunction tr(e, t) {\n    const { message: r, code: i } = go[e];\n    return {\n        message: t ? \"\".concat(r, \" \").concat(t) : r,\n        code: i\n    };\n}\nfunction Er(e, t) {\n    return Array.isArray(e) ? typeof t < \"u\" && e.length ? e.every(t) : !0 : !1;\n}\n_c109 = Er;\nfunction Yr(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\n_c110 = Yr;\nfunction Pe(e) {\n    return typeof e > \"u\";\n}\n_c111 = Pe;\nfunction Gt(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\n_c112 = Gt;\nfunction Vr(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\n_c113 = Vr;\nfunction Qu(e, t) {\n    const { requiredNamespaces: r } = t, i = Object.keys(e.namespaces), n = Object.keys(r);\n    let o = !0;\n    return _e(n, i) ? (i.forEach((h)=>{\n        const { accounts: p, methods: b, events: m } = e.namespaces[h], w = $e(p), y = r[h];\n        (!_e(_r(h, y), w) || !_e(y.methods, b) || !_e(y.events, m)) && (o = !1);\n    }), o) : !1;\n}\n_c114 = Qu;\nfunction Sr(e) {\n    return Gt(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\n_c115 = Sr;\nfunction bo(e) {\n    if (Gt(e, !1) && e.includes(\":\")) {\n        const t = e.split(\":\");\n        if (t.length === 3) {\n            const r = t[0] + \":\" + t[1];\n            return !!t[2] && Sr(r);\n        }\n    }\n    return !1;\n}\nfunction Ju(e) {\n    if (Gt(e, !1)) try {\n        return typeof new URL(e) < \"u\";\n    } catch (e) {\n        return !1;\n    }\n    return !1;\n}\n_c116 = Ju;\nfunction Gu(e) {\n    var t;\n    return (t = e === null || e === void 0 ? void 0 : e.proposer) == null ? void 0 : t.publicKey;\n}\n_c117 = Gu;\nfunction Yu(e) {\n    return e === null || e === void 0 ? void 0 : e.topic;\n}\n_c118 = Yu;\nfunction Vu(e, t) {\n    let r = null;\n    return Gt(e === null || e === void 0 ? void 0 : e.publicKey, !1) || (r = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \" controller public key should be a string\"))), r;\n}\n_c119 = Vu;\nfunction tn(e) {\n    let t = !0;\n    return Er(e) ? e.length && (t = e.every((r)=>Gt(r, !1))) : t = !1, t;\n}\nfunction yo(e, t, r) {\n    let i = null;\n    return Er(t) && t.length ? t.forEach((n)=>{\n        i || Sr(n) || (i = tr(\"UNSUPPORTED_CHAINS\", \"\".concat(r, \", chain \").concat(n, ' should be a string and conform to \"namespace:chainId\" format')));\n    }) : Sr(e) || (i = tr(\"UNSUPPORTED_CHAINS\", \"\".concat(r, ', chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }'))), i;\n}\nfunction wo(e, t, r) {\n    let i = null;\n    return Object.entries(e).forEach((param)=>{\n        let [n, o] = param;\n        if (i) return;\n        const h = yo(n, _r(n, o), \"\".concat(t, \" \").concat(r));\n        h && (i = h);\n    }), i;\n}\nfunction xo(e, t) {\n    let r = null;\n    return Er(e) ? e.forEach((i)=>{\n        r || bo(i) || (r = tr(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, \", account \").concat(i, ' should be a string and conform to \"namespace:chainId:address\" format')));\n    }) : r = tr(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, ', accounts should be an array of strings conforming to \"namespace:chainId:address\" format')), r;\n}\nfunction Mo(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = xo(i === null || i === void 0 ? void 0 : i.accounts, \"\".concat(t, \" namespace\"));\n        n && (r = n);\n    }), r;\n}\n_c120 = Mo;\nfunction Eo(e, t) {\n    let r = null;\n    return tn(e === null || e === void 0 ? void 0 : e.methods) ? tn(e === null || e === void 0 ? void 0 : e.events) || (r = tr(\"UNSUPPORTED_EVENTS\", \"\".concat(t, \", events should be an array of strings or empty array for no events\"))) : r = tr(\"UNSUPPORTED_METHODS\", \"\".concat(t, \", methods should be an array of strings or empty array for no methods\")), r;\n}\n_c121 = Eo;\nfunction en(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = Eo(i, \"\".concat(t, \", namespace\"));\n        n && (r = n);\n    }), r;\n}\nfunction Wu(e, t, r) {\n    let i = null;\n    if (e && Yr(e)) {\n        const n = en(e, t);\n        n && (i = n);\n        const o = wo(e, t, r);\n        o && (i = o);\n    } else i = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \", \").concat(r, \" should be an object with data\"));\n    return i;\n}\n_c122 = Wu;\nfunction So(e, t) {\n    let r = null;\n    if (e && Yr(e)) {\n        const i = en(e, t);\n        i && (r = i);\n        const n = Mo(e, t);\n        n && (r = n);\n    } else r = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \", namespaces should be an object with data\"));\n    return r;\n}\n_c123 = So;\nfunction No(e) {\n    return Gt(e.protocol, !0);\n}\n_c124 = No;\nfunction Xu(e, t) {\n    let r = !1;\n    return t && !e ? r = !0 : e && Er(e) && e.length && e.forEach((i)=>{\n        r = No(i);\n    }), r;\n}\n_c125 = Xu;\nfunction Zu(e) {\n    return typeof e == \"number\";\n}\n_c126 = Zu;\nfunction $u(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\nfunction th(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !Vr(e.code, !1) || !e.message || !Gt(e.message, !1));\n}\nfunction eh(e) {\n    return !(Pe(e) || !Gt(e.method, !1));\n}\nfunction rh(e) {\n    return !(Pe(e) || Pe(e.result) && Pe(e.error) || !Vr(e.id, !1) || !Gt(e.jsonrpc, !1));\n}\nfunction ih(e) {\n    return !(Pe(e) || !Gt(e.name, !1));\n}\nfunction nh(e, t) {\n    return !(!Sr(t) || !co(e).includes(t));\n}\nfunction fh(e, t, r) {\n    return Gt(r, !1) ? lo(e, t).includes(r) : !1;\n}\nfunction oh(e, t, r) {\n    return Gt(r, !1) ? po(e, t).includes(r) : !1;\n}\nfunction Io(e, t, r) {\n    let i = null;\n    const n = sh(e), o = ah(t), h = Object.keys(n), p = Object.keys(o), b = _o(Object.keys(e)), m = _o(Object.keys(t)), w = b.filter((y)=>!m.includes(y));\n    return w.length && (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces keys don't satisfy requiredNamespaces.\\n      Required: \").concat(w.toString(), \"\\n      Received: \").concat(Object.keys(t).toString()))), _e(h, p) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces chains don't satisfy required namespaces.\\n      Required: \").concat(h.toString(), \"\\n      Approved: \").concat(p.toString()))), Object.keys(t).forEach((y)=>{\n        if (!y.includes(\":\") || i) return;\n        const S = $e(t[y].accounts);\n        S.includes(y) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces accounts don't satisfy namespace accounts for \").concat(y, \"\\n        Required: \").concat(y, \"\\n        Approved: \").concat(S.toString())));\n    }), h.forEach((y)=>{\n        i || (_e(n[y].methods, o[y].methods) ? _e(n[y].events, o[y].events) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces events don't satisfy namespace events for \").concat(y))) : i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces methods don't satisfy namespace methods for \").concat(y)));\n    }), i;\n}\n_c127 = Io;\nfunction sh(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        var i;\n        r.includes(\":\") ? t[r] = e[r] : (i = e[r].chains) == null || i.forEach((n)=>{\n            t[n] = {\n                methods: e[r].methods,\n                events: e[r].events\n            };\n        });\n    }), t;\n}\nfunction _o(e) {\n    return [\n        ...new Set(e.map((t)=>t.includes(\":\") ? t.split(\":\")[0] : t))\n    ];\n}\nfunction ah(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        if (r.includes(\":\")) t[r] = e[r];\n        else {\n            const i = $e(e[r].accounts);\n            i === null || i === void 0 ? void 0 : i.forEach((n)=>{\n                t[n] = {\n                    accounts: e[r].accounts.filter((o)=>o.includes(\"\".concat(n, \":\"))),\n                    methods: e[r].methods,\n                    events: e[r].events\n                };\n            });\n        }\n    }), t;\n}\nfunction uh(e, t) {\n    return Vr(e, !1) && e <= t.max && e >= t.min;\n}\nfunction hh() {\n    const e = We();\n    return new Promise((t)=>{\n        switch(e){\n            case qt.browser:\n                t(Bo());\n                break;\n            case qt.reactNative:\n                t(Co());\n                break;\n            case qt.node:\n                t(Ro());\n                break;\n            default:\n                t(!0);\n        }\n    });\n}\nfunction Bo() {\n    var _navigator;\n    return pr() && ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine);\n}\n_c128 = Bo;\nasync function Co() {\n    if (er() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo) {\n        const e = await (__webpack_require__.g == null ? void 0 : __webpack_require__.g.NetInfo.fetch());\n        return e === null || e === void 0 ? void 0 : e.isConnected;\n    }\n    return !0;\n}\n_c129 = Co;\nfunction Ro() {\n    return !0;\n}\n_c130 = Ro;\nfunction ch(e) {\n    switch(We()){\n        case qt.browser:\n            Oo(e);\n            break;\n        case qt.reactNative:\n            Po(e);\n            break;\n        case qt.node:\n            break;\n    }\n}\nfunction Oo(e) {\n    !er() && pr() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\n_c131 = Oo;\nfunction Po(e) {\n    var _global;\n    er() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo && ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.NetInfo.addEventListener((t)=>e(t === null || t === void 0 ? void 0 : t.isConnected)));\n}\n_c132 = Po;\nconst rn = {};\nclass lh {\n    static get(t) {\n        return rn[t];\n    }\n    static set(t, r) {\n        rn[t] = r;\n    }\n    static delete(t) {\n        delete rn[t];\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115, _c116, _c117, _c118, _c119, _c120, _c121, _c122, _c123, _c124, _c125, _c126, _c127, _c128, _c129, _c130, _c131, _c132;\n$RefreshReg$(_c, \"Ko\");\n$RefreshReg$(_c1, \"Ho\");\n$RefreshReg$(_c2, \"An\");\n$RefreshReg$(_c3, \"Lo\");\n$RefreshReg$(_c4, \"We\");\n$RefreshReg$(_c5, \"Wo\");\n$RefreshReg$(_c6, \"Sn\");\n$RefreshReg$(_c7, \"Xo\");\n$RefreshReg$(_c8, \"Zo\");\n$RefreshReg$(_c9, \"Nn\");\n$RefreshReg$(_c10, \"In\");\n$RefreshReg$(_c11, \"Bn\");\n$RefreshReg$(_c12, \"Cn\");\n$RefreshReg$(_c13, \"Rn\");\n$RefreshReg$(_c14, \"A0\");\n$RefreshReg$(_c15, \"M0\");\n$RefreshReg$(_c16, \"Kn\");\n$RefreshReg$(_c17, \"Ot\");\n$RefreshReg$(_c18, \"E0\");\n$RefreshReg$(_c19, \"S0\");\n$RefreshReg$(_c20, \"Qt\");\n$RefreshReg$(_c21, \"Kt\");\n$RefreshReg$(_c22, \"N0\");\n$RefreshReg$(_c23, \"Hn\");\n$RefreshReg$(_c24, \"C0\");\n$RefreshReg$(_c25, \"Lt\");\n$RefreshReg$(_c26, \"Wt\");\n$RefreshReg$(_c27, \"R0\");\n$RefreshReg$(_c28, \"Vn\");\n$RefreshReg$(_c29, \"Mi\");\n$RefreshReg$(_c30, \"D0\");\n$RefreshReg$(_c31, \"Zn\");\n$RefreshReg$(_c32, \"F0\");\n$RefreshReg$(_c33, \"Ei\");\n$RefreshReg$(_c34, \"T0\");\n$RefreshReg$(_c35, \"Si\");\n$RefreshReg$(_c36, \"U0\");\n$RefreshReg$(_c37, \"K0\");\n$RefreshReg$(_c38, \"H0\");\n$RefreshReg$(_c39, \"L0\");\n$RefreshReg$(_c40, \"Pr\");\n$RefreshReg$(_c41, \"Q0\");\n$RefreshReg$(_c42, \"J0\");\n$RefreshReg$(_c43, \"G0\");\n$RefreshReg$(_c44, \"Y0\");\n$RefreshReg$(_c45, \"V0\");\n$RefreshReg$(_c46, \"W0\");\n$RefreshReg$(_c47, \"As\");\n$RefreshReg$(_c48, \"Ms\");\n$RefreshReg$(_c49, \"Es\");\n$RefreshReg$(_c50, \"Ss\");\n$RefreshReg$(_c51, \"Ns\");\n$RefreshReg$(_c52, \"Is\");\n$RefreshReg$(_c53, \"Bs\");\n$RefreshReg$(_c54, \"Cs\");\n$RefreshReg$(_c55, \"Rs\");\n$RefreshReg$(_c56, \"Os\");\n$RefreshReg$(_c57, \"Ps\");\n$RefreshReg$(_c58, \"Fr\");\n$RefreshReg$(_c59, \"Ts\");\n$RefreshReg$(_c60, \"Us\");\n$RefreshReg$(_c61, \"Ks\");\n$RefreshReg$(_c62, \"Aa\");\n$RefreshReg$(_c63, \"Ma\");\n$RefreshReg$(_c64, \"Bf\");\n$RefreshReg$(_c65, \"Na\");\n$RefreshReg$(_c66, \"Ia\");\n$RefreshReg$(_c67, \"Fa\");\n$RefreshReg$(_c68, \"Cf\");\n$RefreshReg$(_c69, \"Ce\");\n$RefreshReg$(_c70, \"Xt\");\n$RefreshReg$(_c71, \"Zt\");\n$RefreshReg$(_c72, \"Ft\");\n$RefreshReg$(_c73, \"Tt\");\n$RefreshReg$(_c74, \"Re\");\n$RefreshReg$(_c75, \"Hr\");\n$RefreshReg$(_c76, \"Ka\");\n$RefreshReg$(_c77, \"Ui\");\n$RefreshReg$(_c78, \"Of\");\n$RefreshReg$(_c79, \"Ga\");\n$RefreshReg$(_c80, \"Df\");\n$RefreshReg$(_c81, \"Va\");\n$RefreshReg$(_c82, \"Wa\");\n$RefreshReg$(_c83, \"Tf\");\n$RefreshReg$(_c84, \"Uf\");\n$RefreshReg$(_c85, \"Za\");\n$RefreshReg$(_c86, \"Lf\");\n$RefreshReg$(_c87, \"Qf\");\n$RefreshReg$(_c88, \"Jf\");\n$RefreshReg$(_c89, \"Gf\");\n$RefreshReg$(_c90, \"Yf\");\n$RefreshReg$(_c91, \"Vf\");\n$RefreshReg$(_c92, \"Oe\");\n$RefreshReg$(_c93, \"Qi\");\n$RefreshReg$(_c94, \"Wf\");\n$RefreshReg$(_c95, \"Ji\");\n$RefreshReg$(_c96, \"Xf\");\n$RefreshReg$(_c97, \"Qr\");\n$RefreshReg$(_c98, \"Au\");\n$RefreshReg$(_c99, \"Mr\");\n$RefreshReg$(_c100, \"Xi\");\n$RefreshReg$(_c101, \"Mu\");\n$RefreshReg$(_c102, \"Eu\");\n$RefreshReg$(_c103, \"Su\");\n$RefreshReg$(_c104, \"Nu\");\n$RefreshReg$(_c105, \"Pu\");\n$RefreshReg$(_c106, \"Du\");\n$RefreshReg$(_c107, \"Lu\");\n$RefreshReg$(_c108, \"Zi\");\n$RefreshReg$(_c109, \"Er\");\n$RefreshReg$(_c110, \"Yr\");\n$RefreshReg$(_c111, \"Pe\");\n$RefreshReg$(_c112, \"Gt\");\n$RefreshReg$(_c113, \"Vr\");\n$RefreshReg$(_c114, \"Qu\");\n$RefreshReg$(_c115, \"Sr\");\n$RefreshReg$(_c116, \"Ju\");\n$RefreshReg$(_c117, \"Gu\");\n$RefreshReg$(_c118, \"Yu\");\n$RefreshReg$(_c119, \"Vu\");\n$RefreshReg$(_c120, \"Mo\");\n$RefreshReg$(_c121, \"Eo\");\n$RefreshReg$(_c122, \"Wu\");\n$RefreshReg$(_c123, \"So\");\n$RefreshReg$(_c124, \"No\");\n$RefreshReg$(_c125, \"Xu\");\n$RefreshReg$(_c126, \"Zu\");\n$RefreshReg$(_c127, \"Io\");\n$RefreshReg$(_c128, \"Bo\");\n$RefreshReg$(_c129, \"Co\");\n$RefreshReg$(_c130, \"Ro\");\n$RefreshReg$(_c131, \"Oo\");\n$RefreshReg$(_c132, \"Po\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/@walletconnect/utils/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/proxy-compare/dist/index.modern.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/node_modules/proxy-compare/dist/index.modern.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   affectedToPathList: function() { return /* binding */ w; },\n/* harmony export */   createProxy: function() { return /* binding */ a; },\n/* harmony export */   getUntracked: function() { return /* binding */ y; },\n/* harmony export */   isChanged: function() { return /* binding */ p; },\n/* harmony export */   markToTrack: function() { return /* binding */ h; },\n/* harmony export */   replaceNewProxy: function() { return /* binding */ O; },\n/* harmony export */   trackMemo: function() { return /* binding */ g; }\n/* harmony export */ });\nconst e = Symbol(), t = Symbol(), r = \"a\", n = \"w\";\nlet o = (e, t)=>new Proxy(e, t);\nconst s = Object.getPrototypeOf, c = new WeakMap, l = (e)=>e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype), f = (e)=>\"object\" == typeof e && null !== e, i = (e)=>{\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach((e)=>{\n        e.configurable = !0;\n    }), Object.create(s(e), t);\n}, u = (e)=>e[t] || e, a = (s, c, f, p)=>{\n    if (!l(s)) return s;\n    let g = p && p.get(s);\n    if (!g) {\n        const e = u(s);\n        g = ((e)=>Object.values(Object.getOwnPropertyDescriptors(e)).some((e)=>!e.configurable && !e.writable))(e) ? [\n            e,\n            i(e)\n        ] : [\n            e\n        ], null == p || p.set(s, g);\n    }\n    const [y, h] = g;\n    let w = f && f.get(y);\n    return w && w[1].f === !!h || (w = ((o, s)=>{\n        const c = {\n            f: s\n        };\n        let l = !1;\n        const f = (e, t)=>{\n            if (!l) {\n                let s = c[r].get(o);\n                if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;\n                else {\n                    let r = s[e];\n                    r || (r = new Set, s[e] = r), r.add(t);\n                }\n            }\n        }, i = {\n            get: (e, n)=>n === t ? o : (f(\"k\", n), a(Reflect.get(e, n), c[r], c.c, c.t)),\n            has: (t, n)=>n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n            getOwnPropertyDescriptor: (e, t)=>(f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n            ownKeys: (e)=>(f(n), Reflect.ownKeys(e))\n        };\n        return s && (i.set = i.deleteProperty = ()=>!1), [\n            i,\n            c\n        ];\n    })(y, !!h), w[1].p = o(h || y, w[0]), f && f.set(y, w)), w[1][r] = c, w[1].c = f, w[1].t = p, w[1].p;\n}, p = (e, t, r, o)=>{\n    if (Object.is(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const s = r.get(u(e));\n    if (!s) return !0;\n    if (o) {\n        const r = o.get(e);\n        if (r && r.n === t) return r.g;\n        o.set(e, {\n            n: t,\n            g: !1\n        });\n    }\n    let c = null;\n    try {\n        for (const r of s.h || [])if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n        if (!0 === s[n]) {\n            if (c = ((e, t)=>{\n                const r = Reflect.ownKeys(e), n = Reflect.ownKeys(t);\n                return r.length !== n.length || r.some((e, t)=>e !== n[t]);\n            })(e, t), c) return c;\n        } else for (const r of s.o || [])if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n        for (const n of s.k || [])if (c = p(e[n], t[n], r, o), c) return c;\n        return null === c && (c = !0), c;\n    } finally{\n        o && o.set(e, {\n            n: t,\n            g: c\n        });\n    }\n}, g = (t)=>!!l(t) && e in t, y = (e)=>l(e) && e[t] || null, h = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n    c.set(e, t);\n}, w = (e, t, r)=>{\n    const o = [], s = new WeakSet, c = (e, l)=>{\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(u(e));\n        if (i) {\n            var a, p;\n            if (null == (a = i.h) || a.forEach((e)=>{\n                const t = \":has(\".concat(String(e), \")\");\n                o.push(l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            }), !0 === i[n]) {\n                const e = \":ownKeys\";\n                o.push(l ? [\n                    ...l,\n                    e\n                ] : [\n                    e\n                ]);\n            } else {\n                var g;\n                null == (g = i.o) || g.forEach((e)=>{\n                    const t = \":hasOwn(\".concat(String(e), \")\");\n                    o.push(l ? [\n                        ...l,\n                        t\n                    ] : [\n                        t\n                    ]);\n                });\n            }\n            null == (p = i.k) || p.forEach((t)=>{\n                r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            });\n        } else l && o.push(l);\n    };\n    return c(e), o;\n}, O = (e)=>{\n    o = e;\n};\n //# sourceMappingURL=index.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/proxy-compare/dist/index.modern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/controller/SIWEController.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/core/controller/SIWEController.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SIWEController: function() { return /* binding */ SIWEController; }\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! valtio/vanilla/utils */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla/utils.mjs\");\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! valtio/vanilla */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla.mjs\");\n/* harmony import */ var _web3modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3modal/core */ \"(app-pages-browser)/./node_modules/@web3modal/core/dist/esm/index.js\");\n\n\n\nconst state = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_1__.proxy)({\n    status: \"uninitialized\"\n});\nconst SIWEController = {\n    state,\n    subscribeKey (key, callback) {\n        return (0,valtio_vanilla_utils__WEBPACK_IMPORTED_MODULE_2__.subscribeKey)(state, key, callback);\n    },\n    subscribe (callback) {\n        return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_1__.subscribe)(state, ()=>callback(state));\n    },\n    _getClient () {\n        if (!state._client) {\n            throw new Error(\"SIWEController client not set\");\n        }\n        return state._client;\n    },\n    async getNonce (address) {\n        const client = this._getClient();\n        const nonce = await client.getNonce(address);\n        this.setNonce(nonce);\n        return nonce;\n    },\n    async getSession () {\n        try {\n            const client = this._getClient();\n            const session = await client.getSession();\n            if (session) {\n                this.setSession(session);\n                this.setStatus(\"success\");\n            }\n            return session;\n        } catch (e) {\n            return undefined;\n        }\n    },\n    createMessage (args) {\n        const client = this._getClient();\n        const message = client.createMessage(args);\n        this.setMessage(message);\n        return message;\n    },\n    async verifyMessage (args) {\n        const client = this._getClient();\n        const isValid = await client.verifyMessage(args);\n        return isValid;\n    },\n    async signIn () {\n        const client = this._getClient();\n        const session = await client.signIn();\n        return session;\n    },\n    async signOut () {\n        var _client_onSignOut;\n        const client = this._getClient();\n        await client.signOut();\n        this.setStatus(\"ready\");\n        this.setSession(undefined);\n        (_client_onSignOut = client.onSignOut) === null || _client_onSignOut === void 0 ? void 0 : _client_onSignOut.call(client);\n    },\n    onSignIn (args) {\n        var _client_onSignIn;\n        const client = this._getClient();\n        (_client_onSignIn = client.onSignIn) === null || _client_onSignIn === void 0 ? void 0 : _client_onSignIn.call(client, args);\n    },\n    onSignOut () {\n        var _client_onSignOut;\n        const client = this._getClient();\n        (_client_onSignOut = client.onSignOut) === null || _client_onSignOut === void 0 ? void 0 : _client_onSignOut.call(client);\n    },\n    setSIWEClient (client) {\n        state._client = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_1__.ref)(client);\n        state.status = \"ready\";\n        _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.OptionsController.setIsSiweEnabled(client.options.enabled);\n    },\n    setNonce (nonce) {\n        state.nonce = nonce;\n    },\n    setStatus (status) {\n        state.status = status;\n    },\n    setMessage (message) {\n        state.message = message;\n    },\n    setSession (session) {\n        state.session = session;\n        state.status = session ? \"success\" : \"ready\";\n    }\n}; //# sourceMappingURL=SIWEController.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vY29yZS9jb250cm9sbGVyL1NJV0VDb250cm9sbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEQ7QUFDQTtBQUNWO0FBQ3BELE1BQU1PLFFBQVFMLHFEQUFLQSxDQUFDO0lBQ2hCTSxRQUFRO0FBQ1o7QUFDTyxNQUFNQyxpQkFBaUI7SUFDMUJGO0lBQ0FQLGNBQWFVLEdBQUcsRUFBRUMsUUFBUTtRQUN0QixPQUFPVixrRUFBTUEsQ0FBQ00sT0FBT0csS0FBS0M7SUFDOUI7SUFDQVAsV0FBVU8sUUFBUTtRQUNkLE9BQU9OLHlEQUFHQSxDQUFDRSxPQUFPLElBQU1JLFNBQVNKO0lBQ3JDO0lBQ0FLO1FBQ0ksSUFBSSxDQUFDTCxNQUFNTSxPQUFPLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsT0FBT1AsTUFBTU0sT0FBTztJQUN4QjtJQUNBLE1BQU1FLFVBQVNDLE9BQU87UUFDbEIsTUFBTUMsU0FBUyxJQUFJLENBQUNMLFVBQVU7UUFDOUIsTUFBTU0sUUFBUSxNQUFNRCxPQUFPRixRQUFRLENBQUNDO1FBQ3BDLElBQUksQ0FBQ0csUUFBUSxDQUFDRDtRQUNkLE9BQU9BO0lBQ1g7SUFDQSxNQUFNRTtRQUNGLElBQUk7WUFDQSxNQUFNSCxTQUFTLElBQUksQ0FBQ0wsVUFBVTtZQUM5QixNQUFNUyxVQUFVLE1BQU1KLE9BQU9HLFVBQVU7WUFDdkMsSUFBSUMsU0FBUztnQkFDVCxJQUFJLENBQUNDLFVBQVUsQ0FBQ0Q7Z0JBQ2hCLElBQUksQ0FBQ0UsU0FBUyxDQUFDO1lBQ25CO1lBQ0EsT0FBT0Y7UUFDWCxFQUNBLFVBQU07WUFDRixPQUFPRztRQUNYO0lBQ0o7SUFDQUMsZUFBY0MsSUFBSTtRQUNkLE1BQU1ULFNBQVMsSUFBSSxDQUFDTCxVQUFVO1FBQzlCLE1BQU1lLFVBQVVWLE9BQU9RLGFBQWEsQ0FBQ0M7UUFDckMsSUFBSSxDQUFDRSxVQUFVLENBQUNEO1FBQ2hCLE9BQU9BO0lBQ1g7SUFDQSxNQUFNRSxlQUFjSCxJQUFJO1FBQ3BCLE1BQU1ULFNBQVMsSUFBSSxDQUFDTCxVQUFVO1FBQzlCLE1BQU1rQixVQUFVLE1BQU1iLE9BQU9ZLGFBQWEsQ0FBQ0g7UUFDM0MsT0FBT0k7SUFDWDtJQUNBLE1BQU1DO1FBQ0YsTUFBTWQsU0FBUyxJQUFJLENBQUNMLFVBQVU7UUFDOUIsTUFBTVMsVUFBVSxNQUFNSixPQUFPYyxNQUFNO1FBQ25DLE9BQU9WO0lBQ1g7SUFDQSxNQUFNVztZQUtGZjtRQUpBLE1BQU1BLFNBQVMsSUFBSSxDQUFDTCxVQUFVO1FBQzlCLE1BQU1LLE9BQU9lLE9BQU87UUFDcEIsSUFBSSxDQUFDVCxTQUFTLENBQUM7UUFDZixJQUFJLENBQUNELFVBQVUsQ0FBQ0U7U0FDaEJQLG9CQUFBQSxPQUFPZ0IsU0FBUyxjQUFoQmhCLHdDQUFBQSx1QkFBQUE7SUFDSjtJQUNBaUIsVUFBU1IsSUFBSTtZQUVUVDtRQURBLE1BQU1BLFNBQVMsSUFBSSxDQUFDTCxVQUFVO1NBQzlCSyxtQkFBQUEsT0FBT2lCLFFBQVEsY0FBZmpCLHVDQUFBQSxzQkFBQUEsUUFBa0JTO0lBQ3RCO0lBQ0FPO1lBRUloQjtRQURBLE1BQU1BLFNBQVMsSUFBSSxDQUFDTCxVQUFVO1NBQzlCSyxvQkFBQUEsT0FBT2dCLFNBQVMsY0FBaEJoQix3Q0FBQUEsdUJBQUFBO0lBQ0o7SUFDQWtCLGVBQWNsQixNQUFNO1FBQ2hCVixNQUFNTSxPQUFPLEdBQUdWLG1EQUFHQSxDQUFDYztRQUNwQlYsTUFBTUMsTUFBTSxHQUFHO1FBQ2ZGLDhEQUFpQkEsQ0FBQzhCLGdCQUFnQixDQUFDbkIsT0FBT29CLE9BQU8sQ0FBQ0MsT0FBTztJQUM3RDtJQUNBbkIsVUFBU0QsS0FBSztRQUNWWCxNQUFNVyxLQUFLLEdBQUdBO0lBQ2xCO0lBQ0FLLFdBQVVmLE1BQU07UUFDWkQsTUFBTUMsTUFBTSxHQUFHQTtJQUNuQjtJQUNBb0IsWUFBV0QsT0FBTztRQUNkcEIsTUFBTW9CLE9BQU8sR0FBR0E7SUFDcEI7SUFDQUwsWUFBV0QsT0FBTztRQUNkZCxNQUFNYyxPQUFPLEdBQUdBO1FBQ2hCZCxNQUFNQyxNQUFNLEdBQUdhLFVBQVUsWUFBWTtJQUN6QztBQUNKLEVBQUUsQ0FDRiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzbW9kYWwvc2l3ZS9kaXN0L2VzbS9jb3JlL2NvbnRyb2xsZXIvU0lXRUNvbnRyb2xsZXIuanM/N2FjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdWJzY3JpYmVLZXkgYXMgc3ViS2V5IH0gZnJvbSAndmFsdGlvL3ZhbmlsbGEvdXRpbHMnO1xuaW1wb3J0IHsgcHJveHksIHJlZiwgc3Vic2NyaWJlIGFzIHN1YiB9IGZyb20gJ3ZhbHRpby92YW5pbGxhJztcbmltcG9ydCB7IE9wdGlvbnNDb250cm9sbGVyIH0gZnJvbSAnQHdlYjNtb2RhbC9jb3JlJztcbmNvbnN0IHN0YXRlID0gcHJveHkoe1xuICAgIHN0YXR1czogJ3VuaW5pdGlhbGl6ZWQnXG59KTtcbmV4cG9ydCBjb25zdCBTSVdFQ29udHJvbGxlciA9IHtcbiAgICBzdGF0ZSxcbiAgICBzdWJzY3JpYmVLZXkoa2V5LCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gc3ViS2V5KHN0YXRlLCBrZXksIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gc3ViKHN0YXRlLCAoKSA9PiBjYWxsYmFjayhzdGF0ZSkpO1xuICAgIH0sXG4gICAgX2dldENsaWVudCgpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5fY2xpZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NJV0VDb250cm9sbGVyIGNsaWVudCBub3Qgc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlLl9jbGllbnQ7XG4gICAgfSxcbiAgICBhc3luYyBnZXROb25jZShhZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuX2dldENsaWVudCgpO1xuICAgICAgICBjb25zdCBub25jZSA9IGF3YWl0IGNsaWVudC5nZXROb25jZShhZGRyZXNzKTtcbiAgICAgICAgdGhpcy5zZXROb25jZShub25jZSk7XG4gICAgICAgIHJldHVybiBub25jZTtcbiAgICB9LFxuICAgIGFzeW5jIGdldFNlc3Npb24oKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9nZXRDbGllbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBjbGllbnQuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0dXMoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZU1lc3NhZ2UoYXJncykge1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9nZXRDbGllbnQoKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNsaWVudC5jcmVhdGVNZXNzYWdlKGFyZ3MpO1xuICAgICAgICB0aGlzLnNldE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0sXG4gICAgYXN5bmMgdmVyaWZ5TWVzc2FnZShhcmdzKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuX2dldENsaWVudCgpO1xuICAgICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgY2xpZW50LnZlcmlmeU1lc3NhZ2UoYXJncyk7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH0sXG4gICAgYXN5bmMgc2lnbkluKCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9nZXRDbGllbnQoKTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IGNsaWVudC5zaWduSW4oKTtcbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfSxcbiAgICBhc3luYyBzaWduT3V0KCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9nZXRDbGllbnQoKTtcbiAgICAgICAgYXdhaXQgY2xpZW50LnNpZ25PdXQoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0dXMoJ3JlYWR5Jyk7XG4gICAgICAgIHRoaXMuc2V0U2Vzc2lvbih1bmRlZmluZWQpO1xuICAgICAgICBjbGllbnQub25TaWduT3V0Py4oKTtcbiAgICB9LFxuICAgIG9uU2lnbkluKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gdGhpcy5fZ2V0Q2xpZW50KCk7XG4gICAgICAgIGNsaWVudC5vblNpZ25Jbj8uKGFyZ3MpO1xuICAgIH0sXG4gICAgb25TaWduT3V0KCkge1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9nZXRDbGllbnQoKTtcbiAgICAgICAgY2xpZW50Lm9uU2lnbk91dD8uKCk7XG4gICAgfSxcbiAgICBzZXRTSVdFQ2xpZW50KGNsaWVudCkge1xuICAgICAgICBzdGF0ZS5fY2xpZW50ID0gcmVmKGNsaWVudCk7XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9ICdyZWFkeSc7XG4gICAgICAgIE9wdGlvbnNDb250cm9sbGVyLnNldElzU2l3ZUVuYWJsZWQoY2xpZW50Lm9wdGlvbnMuZW5hYmxlZCk7XG4gICAgfSxcbiAgICBzZXROb25jZShub25jZSkge1xuICAgICAgICBzdGF0ZS5ub25jZSA9IG5vbmNlO1xuICAgIH0sXG4gICAgc2V0U3RhdHVzKHN0YXR1cykge1xuICAgICAgICBzdGF0ZS5zdGF0dXMgPSBzdGF0dXM7XG4gICAgfSxcbiAgICBzZXRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgc3RhdGUubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfSxcbiAgICBzZXRTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgICAgc3RhdGUuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgICAgIHN0YXRlLnN0YXR1cyA9IHNlc3Npb24gPyAnc3VjY2VzcycgOiAncmVhZHknO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TSVdFQ29udHJvbGxlci5qcy5tYXAiXSwibmFtZXMiOlsic3Vic2NyaWJlS2V5Iiwic3ViS2V5IiwicHJveHkiLCJyZWYiLCJzdWJzY3JpYmUiLCJzdWIiLCJPcHRpb25zQ29udHJvbGxlciIsInN0YXRlIiwic3RhdHVzIiwiU0lXRUNvbnRyb2xsZXIiLCJrZXkiLCJjYWxsYmFjayIsIl9nZXRDbGllbnQiLCJfY2xpZW50IiwiRXJyb3IiLCJnZXROb25jZSIsImFkZHJlc3MiLCJjbGllbnQiLCJub25jZSIsInNldE5vbmNlIiwiZ2V0U2Vzc2lvbiIsInNlc3Npb24iLCJzZXRTZXNzaW9uIiwic2V0U3RhdHVzIiwidW5kZWZpbmVkIiwiY3JlYXRlTWVzc2FnZSIsImFyZ3MiLCJtZXNzYWdlIiwic2V0TWVzc2FnZSIsInZlcmlmeU1lc3NhZ2UiLCJpc1ZhbGlkIiwic2lnbkluIiwic2lnbk91dCIsIm9uU2lnbk91dCIsIm9uU2lnbkluIiwic2V0U0lXRUNsaWVudCIsInNldElzU2l3ZUVuYWJsZWQiLCJvcHRpb25zIiwiZW5hYmxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/controller/SIWEController.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/helpers/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/core/helpers/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddressFromMessage: function() { return /* binding */ getAddressFromMessage; },\n/* harmony export */   getChainIdFromMessage: function() { return /* binding */ getChainIdFromMessage; },\n/* harmony export */   verifySignature: function() { return /* binding */ verifySignature; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/@walletconnect/utils/dist/index.es.js\");\n\nconst ETH_ADDRESS_PATTERN = /0x[a-fA-F0-9]{40}/u;\nconst ETH_CHAIN_ID_IN_SIWE_PATTERN = RegExp(\"Chain ID: (?<temp1>\\\\d+)\", \"u\");\nfunction getAddressFromMessage(message) {\n    var _message_match;\n    return ((_message_match = message.match(ETH_ADDRESS_PATTERN)) === null || _message_match === void 0 ? void 0 : _message_match[0]) || \"\";\n}\nfunction getChainIdFromMessage(message) {\n    var _message_match;\n    return \"eip155:\".concat(((_message_match = message.match(ETH_CHAIN_ID_IN_SIWE_PATTERN)) === null || _message_match === void 0 ? void 0 : _message_match[1]) || 1);\n}\nasync function verifySignature(param) {\n    let { address, message, signature, chainId, projectId } = param;\n    let isValid = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_0__.isValidEip191Signature)(address, message, signature);\n    if (!isValid) {\n        isValid = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_0__.isValidEip1271Signature)(address, message, signature, chainId, projectId);\n    }\n    return isValid;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vY29yZS9oZWxwZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUY7QUFDdkYsTUFBTUUsc0JBQXNCO0FBQzVCLE1BQU1DLCtCQUErQjtBQUM5QixTQUFTQyxzQkFBc0JDLE9BQU87UUFDbENBO0lBQVAsT0FBT0EsRUFBQUEsaUJBQUFBLFFBQVFDLEtBQUssQ0FBQ0osa0NBQWRHLHFDQUFBQSxjQUFvQyxDQUFDLEVBQUUsS0FBSTtBQUN0RDtBQUNPLFNBQVNFLHNCQUFzQkYsT0FBTztRQUN4QkE7SUFBakIsT0FBTyxVQUFnRSxPQUF0REEsRUFBQUEsaUJBQUFBLFFBQVFDLEtBQUssQ0FBQ0gsMkNBQWRFLHFDQUFBQSxjQUE2QyxDQUFDLEVBQUUsS0FBSTtBQUN6RTtBQUNPLGVBQWVHLGdCQUFnQixLQUFtRDtRQUFuRCxFQUFFQyxPQUFPLEVBQUVKLE9BQU8sRUFBRUssU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRSxHQUFuRDtJQUNsQyxJQUFJQyxVQUFVYiw0RUFBc0JBLENBQUNTLFNBQVNKLFNBQVNLO0lBQ3ZELElBQUksQ0FBQ0csU0FBUztRQUNWQSxVQUFVLE1BQU1aLDZFQUF1QkEsQ0FBQ1EsU0FBU0osU0FBU0ssV0FBV0MsU0FBU0M7SUFDbEY7SUFDQSxPQUFPQztBQUNYLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vY29yZS9oZWxwZXJzL2luZGV4LmpzPzU3MTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNWYWxpZEVpcDE5MVNpZ25hdHVyZSwgaXNWYWxpZEVpcDEyNzFTaWduYXR1cmUgfSBmcm9tICdAd2FsbGV0Y29ubmVjdC91dGlscyc7XG5jb25zdCBFVEhfQUREUkVTU19QQVRURVJOID0gLzB4W2EtZkEtRjAtOV17NDB9L3U7XG5jb25zdCBFVEhfQ0hBSU5fSURfSU5fU0lXRV9QQVRURVJOID0gL0NoYWluIElEOiAoPzx0ZW1wMT5cXGQrKS91O1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFkZHJlc3NGcm9tTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UubWF0Y2goRVRIX0FERFJFU1NfUEFUVEVSTik/LlswXSB8fCAnJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGFpbklkRnJvbU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIHJldHVybiBgZWlwMTU1OiR7bWVzc2FnZS5tYXRjaChFVEhfQ0hBSU5fSURfSU5fU0lXRV9QQVRURVJOKT8uWzFdIHx8IDF9YDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlTaWduYXR1cmUoeyBhZGRyZXNzLCBtZXNzYWdlLCBzaWduYXR1cmUsIGNoYWluSWQsIHByb2plY3RJZCB9KSB7XG4gICAgbGV0IGlzVmFsaWQgPSBpc1ZhbGlkRWlwMTkxU2lnbmF0dXJlKGFkZHJlc3MsIG1lc3NhZ2UsIHNpZ25hdHVyZSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIGlzVmFsaWQgPSBhd2FpdCBpc1ZhbGlkRWlwMTI3MVNpZ25hdHVyZShhZGRyZXNzLCBtZXNzYWdlLCBzaWduYXR1cmUsIGNoYWluSWQsIHByb2plY3RJZCk7XG4gICAgfVxuICAgIHJldHVybiBpc1ZhbGlkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImlzVmFsaWRFaXAxOTFTaWduYXR1cmUiLCJpc1ZhbGlkRWlwMTI3MVNpZ25hdHVyZSIsIkVUSF9BRERSRVNTX1BBVFRFUk4iLCJFVEhfQ0hBSU5fSURfSU5fU0lXRV9QQVRURVJOIiwiZ2V0QWRkcmVzc0Zyb21NZXNzYWdlIiwibWVzc2FnZSIsIm1hdGNoIiwiZ2V0Q2hhaW5JZEZyb21NZXNzYWdlIiwidmVyaWZ5U2lnbmF0dXJlIiwiYWRkcmVzcyIsInNpZ25hdHVyZSIsImNoYWluSWQiLCJwcm9qZWN0SWQiLCJpc1ZhbGlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/helpers/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/utils/ConstantsUtil.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/core/utils/ConstantsUtil.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstantsUtil: function() { return /* binding */ ConstantsUtil; }\n/* harmony export */ });\nconst ConstantsUtil = {\n    FIVE_MINUTES_IN_MS: 300000\n}; //# sourceMappingURL=ConstantsUtil.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vY29yZS91dGlscy9Db25zdGFudHNVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxnQkFBZ0I7SUFDekJDLG9CQUFvQjtBQUN4QixFQUFFLENBQ0YseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vY29yZS91dGlscy9Db25zdGFudHNVdGlsLmpzPzNhMjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IENvbnN0YW50c1V0aWwgPSB7XG4gICAgRklWRV9NSU5VVEVTX0lOX01TOiAzMDAwMDBcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25zdGFudHNVdGlsLmpzLm1hcCJdLCJuYW1lcyI6WyJDb25zdGFudHNVdGlsIiwiRklWRV9NSU5VVEVTX0lOX01TIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/utils/ConstantsUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/exports/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/exports/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SIWEController: function() { return /* reexport safe */ _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_3__.SIWEController; },\n/* harmony export */   W3mConnectingSiwe: function() { return /* reexport safe */ _scaffold_partials_w3m_connecting_siwe_index_js__WEBPACK_IMPORTED_MODULE_4__.W3mConnectingSiwe; },\n/* harmony export */   W3mConnectingSiweView: function() { return /* reexport safe */ _scaffold_views_w3m_connecting_siwe_view_index_js__WEBPACK_IMPORTED_MODULE_5__.W3mConnectingSiweView; },\n/* harmony export */   createSIWEConfig: function() { return /* binding */ createSIWEConfig; },\n/* harmony export */   formatMessage: function() { return /* reexport safe */ _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.formatMessage; },\n/* harmony export */   getAddressFromMessage: function() { return /* reexport safe */ _core_helpers_index_js__WEBPACK_IMPORTED_MODULE_1__.getAddressFromMessage; },\n/* harmony export */   getChainIdFromMessage: function() { return /* reexport safe */ _core_helpers_index_js__WEBPACK_IMPORTED_MODULE_1__.getChainIdFromMessage; },\n/* harmony export */   getDidAddress: function() { return /* reexport safe */ _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getDidAddress; },\n/* harmony export */   getDidChainId: function() { return /* reexport safe */ _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getDidChainId; },\n/* harmony export */   verifySignature: function() { return /* reexport safe */ _core_helpers_index_js__WEBPACK_IMPORTED_MODULE_1__.verifySignature; }\n/* harmony export */ });\n/* harmony import */ var _src_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/client.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/src/client.js\");\n/* harmony import */ var _core_helpers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/helpers/index.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/helpers/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/controller/SIWEController.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/controller/SIWEController.js\");\n/* harmony import */ var _scaffold_partials_w3m_connecting_siwe_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scaffold/partials/w3m-connecting-siwe/index.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/index.js\");\n/* harmony import */ var _scaffold_views_w3m_connecting_siwe_view_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../scaffold/views/w3m-connecting-siwe-view/index.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/views/w3m-connecting-siwe-view/index.js\");\n\n\n\n\nfunction createSIWEConfig(siweConfig) {\n    return new _src_client_js__WEBPACK_IMPORTED_MODULE_0__.Web3ModalSIWEClient(siweConfig);\n}\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vZXhwb3J0cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ2tEO0FBQ3RCO0FBQ2I7QUFDL0QsU0FBU1EsaUJBQWlCQyxVQUFVO0lBQ3ZDLE9BQU8sSUFBSVQsK0RBQW1CQSxDQUFDUztBQUNuQztBQUNrRTtBQUNFLENBQ3BFLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNtb2RhbC9zaXdlL2Rpc3QvZXNtL2V4cG9ydHMvaW5kZXguanM/NGE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXZWIzTW9kYWxTSVdFQ2xpZW50IH0gZnJvbSAnLi4vc3JjL2NsaWVudC5qcyc7XG5leHBvcnQgeyBnZXRBZGRyZXNzRnJvbU1lc3NhZ2UsIGdldENoYWluSWRGcm9tTWVzc2FnZSwgdmVyaWZ5U2lnbmF0dXJlIH0gZnJvbSAnLi4vY29yZS9oZWxwZXJzL2luZGV4LmpzJztcbmV4cG9ydCB7IGZvcm1hdE1lc3NhZ2UsIGdldERpZENoYWluSWQsIGdldERpZEFkZHJlc3MgfSBmcm9tICdAd2FsbGV0Y29ubmVjdC91dGlscyc7XG5leHBvcnQgeyBTSVdFQ29udHJvbGxlciB9IGZyb20gJy4uL2NvcmUvY29udHJvbGxlci9TSVdFQ29udHJvbGxlci5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU0lXRUNvbmZpZyhzaXdlQ29uZmlnKSB7XG4gICAgcmV0dXJuIG5ldyBXZWIzTW9kYWxTSVdFQ2xpZW50KHNpd2VDb25maWcpO1xufVxuZXhwb3J0ICogZnJvbSAnLi4vc2NhZmZvbGQvcGFydGlhbHMvdzNtLWNvbm5lY3Rpbmctc2l3ZS9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuLi9zY2FmZm9sZC92aWV3cy93M20tY29ubmVjdGluZy1zaXdlLXZpZXcvaW5kZXguanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIldlYjNNb2RhbFNJV0VDbGllbnQiLCJnZXRBZGRyZXNzRnJvbU1lc3NhZ2UiLCJnZXRDaGFpbklkRnJvbU1lc3NhZ2UiLCJ2ZXJpZnlTaWduYXR1cmUiLCJmb3JtYXRNZXNzYWdlIiwiZ2V0RGlkQ2hhaW5JZCIsImdldERpZEFkZHJlc3MiLCJTSVdFQ29udHJvbGxlciIsImNyZWF0ZVNJV0VDb25maWciLCJzaXdlQ29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/exports/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/index.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W3mConnectingSiwe: function() { return /* binding */ W3mConnectingSiwe; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var _web3modal_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3modal/ui */ \"(app-pages-browser)/./node_modules/@web3modal/ui/dist/esm/index.js\");\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit */ \"(app-pages-browser)/./node_modules/lit/index.js\");\n/* harmony import */ var _styles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./styles.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/styles.js\");\n/* harmony import */ var _web3modal_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @web3modal/core */ \"(app-pages-browser)/./node_modules/@web3modal/core/dist/esm/index.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n      <wui-visual-thumbnail\\n        ?borderRadiusFull=\",\n        \"\\n        .imageSrc=\",\n        \"\\n      ></wui-visual-thumbnail>\\n      <wui-visual-thumbnail .imageSrc=\",\n        \"></wui-visual-thumbnail>\\n    \"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nvar __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nlet W3mConnectingSiwe = class W3mConnectingSiwe extends lit__WEBPACK_IMPORTED_MODULE_2__.LitElement {\n    firstUpdated() {\n        var _this_shadowRoot;\n        const visuals = (_this_shadowRoot = this.shadowRoot) === null || _this_shadowRoot === void 0 ? void 0 : _this_shadowRoot.querySelectorAll(\"wui-visual-thumbnail\");\n        if (visuals === null || visuals === void 0 ? void 0 : visuals[0]) {\n            this.createAnimation(visuals[0], \"translate(18px)\");\n        }\n        if (visuals === null || visuals === void 0 ? void 0 : visuals[1]) {\n            this.createAnimation(visuals[1], \"translate(-18px)\");\n        }\n    }\n    render() {\n        var _this_dappImageUrl;\n        return (0,lit__WEBPACK_IMPORTED_MODULE_2__.html)(_templateObject(), true, (_this_dappImageUrl = this.dappImageUrl) === null || _this_dappImageUrl === void 0 ? void 0 : _this_dappImageUrl[0], this.walletImageUrl);\n    }\n    createAnimation(element, translation) {\n        element.animate([\n            {\n                transform: \"translateX(0px)\"\n            },\n            {\n                transform: translation\n            }\n        ], {\n            duration: 1600,\n            easing: \"cubic-bezier(0.56, 0, 0.48, 1)\",\n            direction: \"alternate\",\n            iterations: Infinity\n        });\n    }\n    constructor(){\n        var _OptionsController_state_metadata;\n        super(...arguments);\n        this.dappImageUrl = (_OptionsController_state_metadata = _web3modal_core__WEBPACK_IMPORTED_MODULE_4__.OptionsController.state.metadata) === null || _OptionsController_state_metadata === void 0 ? void 0 : _OptionsController_state_metadata.icons;\n        this.walletImageUrl = _web3modal_core__WEBPACK_IMPORTED_MODULE_4__.StorageUtil.getConnectedWalletImageUrl();\n    }\n};\nW3mConnectingSiwe.styles = _styles_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\nW3mConnectingSiwe = __decorate([\n    (0,_web3modal_ui__WEBPACK_IMPORTED_MODULE_1__.customElement)(\"w3m-connecting-siwe\")\n], W3mConnectingSiwe);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vc2NhZmZvbGQvcGFydGlhbHMvdzNtLWNvbm5lY3Rpbmctc2l3ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsYUFBYSxTQUFLLElBQUksU0FBSSxDQUFDQSxVQUFVLElBQUssU0FBVUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLEdBQUcsRUFBRUMsSUFBSTtJQUNqRixJQUFJQyxJQUFJQyxVQUFVQyxNQUFNLEVBQUVDLElBQUlILElBQUksSUFBSUgsU0FBU0UsU0FBUyxPQUFPQSxPQUFPSyxPQUFPQyx3QkFBd0IsQ0FBQ1IsUUFBUUMsT0FBT0MsTUFBTU87SUFDM0gsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBT0EsUUFBUUMsUUFBUSxLQUFLLFlBQVlMLElBQUlJLFFBQVFDLFFBQVEsQ0FBQ1osWUFBWUMsUUFBUUMsS0FBS0M7U0FDcEgsSUFBSyxJQUFJVSxJQUFJYixXQUFXTSxNQUFNLEdBQUcsR0FBR08sS0FBSyxHQUFHQSxJQUFLLElBQUlILElBQUlWLFVBQVUsQ0FBQ2EsRUFBRSxFQUFFTixJQUFJLENBQUNILElBQUksSUFBSU0sRUFBRUgsS0FBS0gsSUFBSSxJQUFJTSxFQUFFVCxRQUFRQyxLQUFLSyxLQUFLRyxFQUFFVCxRQUFRQyxJQUFHLEtBQU1LO0lBQ2hKLE9BQU9ILElBQUksS0FBS0csS0FBS0MsT0FBT00sY0FBYyxDQUFDYixRQUFRQyxLQUFLSyxJQUFJQTtBQUNoRTtBQUM4QztBQUNQO0FBQ047QUFDZ0M7QUFDakUsSUFBSWMsb0JBQW9CLE1BQU1BLDBCQUEwQkwsMkNBQVVBO0lBTTlETSxlQUFlO1lBQ0s7UUFBaEIsTUFBTUMsV0FBVSx1QkFBSSxDQUFDQyxVQUFVLGNBQWYsd0RBQWlCQyxnQkFBZ0IsQ0FBQztRQUNsRCxJQUFJRixvQkFBQUEsOEJBQUFBLE9BQVMsQ0FBQyxFQUFFLEVBQUU7WUFDZCxJQUFJLENBQUNHLGVBQWUsQ0FBQ0gsT0FBTyxDQUFDLEVBQUUsRUFBRTtRQUNyQztRQUNBLElBQUlBLG9CQUFBQSw4QkFBQUEsT0FBUyxDQUFDLEVBQUUsRUFBRTtZQUNkLElBQUksQ0FBQ0csZUFBZSxDQUFDSCxPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ3JDO0lBQ0o7SUFDQUksU0FBUztZQUlPO1FBSFosT0FBT1YseUNBQUlBLG9CQUVTLE9BQ1IseUJBQUksQ0FBQ1csWUFBWSxjQUFqQiwyREFBbUIsQ0FBQyxFQUFFLEVBRUYsSUFBSSxDQUFDQyxjQUFjO0lBRXZEO0lBQ0FILGdCQUFnQkksT0FBTyxFQUFFQyxXQUFXLEVBQUU7UUFDbENELFFBQVFFLE9BQU8sQ0FBQztZQUFDO2dCQUFFQyxXQUFXO1lBQWtCO1lBQUc7Z0JBQUVBLFdBQVdGO1lBQVk7U0FBRSxFQUFFO1lBQzVFRyxVQUFVO1lBQ1ZDLFFBQVE7WUFDUkMsV0FBVztZQUNYQyxZQUFZQztRQUNoQjtJQUNKO0lBOUJBQyxhQUFjO1lBRVVwQjtRQURwQixLQUFLLElBQUlkO1FBQ1QsSUFBSSxDQUFDdUIsWUFBWSxJQUFHVCxvQ0FBQUEsOERBQWlCQSxDQUFDcUIsS0FBSyxDQUFDQyxRQUFRLGNBQWhDdEIsd0RBQUFBLGtDQUFrQ3VCLEtBQUs7UUFDM0QsSUFBSSxDQUFDYixjQUFjLEdBQUdULHdEQUFXQSxDQUFDdUIsMEJBQTBCO0lBQ2hFO0FBMkJKO0FBQ0F0QixrQkFBa0JILE1BQU0sR0FBR0Esa0RBQU1BO0FBQ2pDRyxvQkFBb0J0QixXQUFXO0lBQzNCZ0IsNERBQWFBLENBQUM7Q0FDakIsRUFBRU07QUFDMEIsQ0FDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vc2NhZmZvbGQvcGFydGlhbHMvdzNtLWNvbm5lY3Rpbmctc2l3ZS9pbmRleC5qcz84M2Y3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQgfSBmcm9tICdAd2ViM21vZGFsL3VpJztcbmltcG9ydCB7IExpdEVsZW1lbnQsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcy5qcyc7XG5pbXBvcnQgeyBPcHRpb25zQ29udHJvbGxlciwgU3RvcmFnZVV0aWwgfSBmcm9tICdAd2ViM21vZGFsL2NvcmUnO1xubGV0IFczbUNvbm5lY3RpbmdTaXdlID0gY2xhc3MgVzNtQ29ubmVjdGluZ1Npd2UgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5kYXBwSW1hZ2VVcmwgPSBPcHRpb25zQ29udHJvbGxlci5zdGF0ZS5tZXRhZGF0YT8uaWNvbnM7XG4gICAgICAgIHRoaXMud2FsbGV0SW1hZ2VVcmwgPSBTdG9yYWdlVXRpbC5nZXRDb25uZWN0ZWRXYWxsZXRJbWFnZVVybCgpO1xuICAgIH1cbiAgICBmaXJzdFVwZGF0ZWQoKSB7XG4gICAgICAgIGNvbnN0IHZpc3VhbHMgPSB0aGlzLnNoYWRvd1Jvb3Q/LnF1ZXJ5U2VsZWN0b3JBbGwoJ3d1aS12aXN1YWwtdGh1bWJuYWlsJyk7XG4gICAgICAgIGlmICh2aXN1YWxzPy5bMF0pIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQW5pbWF0aW9uKHZpc3VhbHNbMF0sICd0cmFuc2xhdGUoMThweCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzdWFscz8uWzFdKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUFuaW1hdGlvbih2aXN1YWxzWzFdLCAndHJhbnNsYXRlKC0xOHB4KScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGh0bWwgYFxuICAgICAgPHd1aS12aXN1YWwtdGh1bWJuYWlsXG4gICAgICAgID9ib3JkZXJSYWRpdXNGdWxsPSR7dHJ1ZX1cbiAgICAgICAgLmltYWdlU3JjPSR7dGhpcy5kYXBwSW1hZ2VVcmw/LlswXX1cbiAgICAgID48L3d1aS12aXN1YWwtdGh1bWJuYWlsPlxuICAgICAgPHd1aS12aXN1YWwtdGh1bWJuYWlsIC5pbWFnZVNyYz0ke3RoaXMud2FsbGV0SW1hZ2VVcmx9Pjwvd3VpLXZpc3VhbC10aHVtYm5haWw+XG4gICAgYDtcbiAgICB9XG4gICAgY3JlYXRlQW5pbWF0aW9uKGVsZW1lbnQsIHRyYW5zbGF0aW9uKSB7XG4gICAgICAgIGVsZW1lbnQuYW5pbWF0ZShbeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCknIH0sIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGlvbiB9XSwge1xuICAgICAgICAgICAgZHVyYXRpb246IDE2MDAsXG4gICAgICAgICAgICBlYXNpbmc6ICdjdWJpYy1iZXppZXIoMC41NiwgMCwgMC40OCwgMSknLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnYWx0ZXJuYXRlJyxcbiAgICAgICAgICAgIGl0ZXJhdGlvbnM6IEluZmluaXR5XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5XM21Db25uZWN0aW5nU2l3ZS5zdHlsZXMgPSBzdHlsZXM7XG5XM21Db25uZWN0aW5nU2l3ZSA9IF9fZGVjb3JhdGUoW1xuICAgIGN1c3RvbUVsZW1lbnQoJ3czbS1jb25uZWN0aW5nLXNpd2UnKVxuXSwgVzNtQ29ubmVjdGluZ1Npd2UpO1xuZXhwb3J0IHsgVzNtQ29ubmVjdGluZ1Npd2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJjdXN0b21FbGVtZW50IiwiTGl0RWxlbWVudCIsImh0bWwiLCJzdHlsZXMiLCJPcHRpb25zQ29udHJvbGxlciIsIlN0b3JhZ2VVdGlsIiwiVzNtQ29ubmVjdGluZ1Npd2UiLCJmaXJzdFVwZGF0ZWQiLCJ2aXN1YWxzIiwic2hhZG93Um9vdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVBbmltYXRpb24iLCJyZW5kZXIiLCJkYXBwSW1hZ2VVcmwiLCJ3YWxsZXRJbWFnZVVybCIsImVsZW1lbnQiLCJ0cmFuc2xhdGlvbiIsImFuaW1hdGUiLCJ0cmFuc2Zvcm0iLCJkdXJhdGlvbiIsImVhc2luZyIsImRpcmVjdGlvbiIsIml0ZXJhdGlvbnMiLCJJbmZpbml0eSIsImNvbnN0cnVjdG9yIiwic3RhdGUiLCJtZXRhZGF0YSIsImljb25zIiwiZ2V0Q29ubmVjdGVkV2FsbGV0SW1hZ2VVcmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/styles.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/styles.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit */ \"(app-pages-browser)/./node_modules/lit/index.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  :host {\\n    display: flex;\\n    justify-content: center;\\n    gap: var(--wui-spacing-2xl);\\n  }\\n\\n  wui-visual-thumbnail:nth-child(1) {\\n    z-index: 1;\\n  }\\n\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((0,lit__WEBPACK_IMPORTED_MODULE_1__.css)(_templateObject())); //# sourceMappingURL=styles.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vc2NhZmZvbGQvcGFydGlhbHMvdzNtLWNvbm5lY3Rpbmctc2l3ZS9zdHlsZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEwQjtBQUMxQiwrREFBZUEsd0NBQUdBLG1CQUFBQSxFQVVoQixDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNtb2RhbC9zaXdlL2Rpc3QvZXNtL3NjYWZmb2xkL3BhcnRpYWxzL3czbS1jb25uZWN0aW5nLXNpd2Uvc3R5bGVzLmpzPzhiOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0JztcbmV4cG9ydCBkZWZhdWx0IGNzcyBgXG4gIDpob3N0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGdhcDogdmFyKC0td3VpLXNwYWNpbmctMnhsKTtcbiAgfVxuXG4gIHd1aS12aXN1YWwtdGh1bWJuYWlsOm50aC1jaGlsZCgxKSB7XG4gICAgei1pbmRleDogMTtcbiAgfVxuYDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlcy5qcy5tYXAiXSwibmFtZXMiOlsiY3NzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/partials/w3m-connecting-siwe/styles.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/views/w3m-connecting-siwe-view/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/scaffold/views/w3m-connecting-siwe-view/index.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W3mConnectingSiweView: function() { return /* binding */ W3mConnectingSiweView; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var _web3modal_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3modal/core */ \"(app-pages-browser)/./node_modules/@web3modal/core/dist/esm/index.js\");\n/* harmony import */ var _web3modal_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3modal/ui */ \"(app-pages-browser)/./node_modules/@web3modal/ui/dist/esm/index.js\");\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit */ \"(app-pages-browser)/./node_modules/lit/index.js\");\n/* harmony import */ var lit_decorators_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/decorators.js */ \"(app-pages-browser)/./node_modules/lit/decorators.js\");\n/* harmony import */ var _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/controller/SIWEController.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/controller/SIWEController.js\");\n/* harmony import */ var _web3modal_wallet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @web3modal/wallet */ \"(app-pages-browser)/./node_modules/@web3modal/wallet/dist/esm/index.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        '\\n      <wui-flex justifyContent=\"center\" .padding=',\n        \">\\n        <w3m-connecting-siwe></w3m-connecting-siwe>\\n      </wui-flex>\\n      <wui-flex\\n        .padding=\",\n        '\\n        gap=\"s\"\\n        justifyContent=\"space-between\"\\n      >\\n        <wui-text variant=\"paragraph-500\" align=\"center\" color=\"fg-100\"\\n          >',\n        \" needs to connect to your wallet</wui-text\\n        >\\n      </wui-flex>\\n      <wui-flex\\n        .padding=\",\n        '\\n        gap=\"s\"\\n        justifyContent=\"space-between\"\\n      >\\n        <wui-text variant=\"small-400\" align=\"center\" color=\"fg-200\"\\n          >Sign this message to prove you own this wallet and proceed. Canceling will disconnect\\n          you.</wui-text\\n        >\\n      </wui-flex>\\n      <wui-flex .padding=',\n        ' gap=\"s\" justifyContent=\"space-between\">\\n        <wui-button\\n          size=\"lg\"\\n          borderRadius=\"xs\"\\n          fullWidth\\n          variant=\"neutral\"\\n          @click=',\n        '\\n          data-testid=\"w3m-connecting-siwe-cancel\"\\n        >\\n          Cancel\\n        </wui-button>\\n        <wui-button\\n          size=\"lg\"\\n          borderRadius=\"xs\"\\n          fullWidth\\n          variant=\"main\"\\n          @click=',\n        \"\\n          ?loading=\",\n        '\\n          data-testid=\"w3m-connecting-siwe-sign\"\\n        >\\n          ',\n        \"\\n        </wui-button>\\n      </wui-flex>\\n    \"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nvar __decorate = undefined && undefined.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\nlet W3mConnectingSiweView = class W3mConnectingSiweView extends lit__WEBPACK_IMPORTED_MODULE_3__.LitElement {\n    render() {\n        this.onRender();\n        var _this_dappName;\n        return (0,lit__WEBPACK_IMPORTED_MODULE_3__.html)(_templateObject(), [\n            \"2xl\",\n            \"0\",\n            \"xxl\",\n            \"0\"\n        ], [\n            \"0\",\n            \"4xl\",\n            \"l\",\n            \"4xl\"\n        ], (_this_dappName = this.dappName) !== null && _this_dappName !== void 0 ? _this_dappName : \"Dapp\", [\n            \"0\",\n            \"3xl\",\n            \"l\",\n            \"3xl\"\n        ], [\n            \"l\",\n            \"xl\",\n            \"xl\",\n            \"xl\"\n        ], this.onCancel.bind(this), this.onSign.bind(this), this.isSigning, this.isSigning ? \"Signing...\" : \"Sign\");\n    }\n    onRender() {\n        if (_core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__.SIWEController.state.session) {\n            _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.ModalController.close();\n        }\n    }\n    async onSign() {\n        this.isSigning = true;\n        _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.EventsController.sendEvent({\n            event: \"CLICK_SIGN_SIWE_MESSAGE\",\n            type: \"track\"\n        });\n        try {\n            _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__.SIWEController.setStatus(\"loading\");\n            const session = await _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__.SIWEController.signIn();\n            _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__.SIWEController.setStatus(\"success\");\n            _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.EventsController.sendEvent({\n                event: \"SIWE_AUTH_SUCCESS\",\n                type: \"track\"\n            });\n            return session;\n        } catch (error) {\n            const preferredAccountType = _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.AccountController.state.preferredAccountType;\n            if (preferredAccountType === _web3modal_wallet__WEBPACK_IMPORTED_MODULE_6__.W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT) {\n                _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.SnackController.showError(\"This application might not support Smart Accounts\");\n            } else {\n                _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.SnackController.showError(\"Signature declined\");\n            }\n            _core_controller_SIWEController_js__WEBPACK_IMPORTED_MODULE_5__.SIWEController.setStatus(\"error\");\n            return _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.EventsController.sendEvent({\n                event: \"SIWE_AUTH_ERROR\",\n                type: \"track\"\n            });\n        } finally{\n            this.isSigning = false;\n        }\n    }\n    async onCancel() {\n        const { isConnected } = _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.AccountController.state;\n        if (isConnected) {\n            await _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.ConnectionController.disconnect();\n            _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.ModalController.close();\n        } else {\n            _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.RouterController.push(\"Connect\");\n        }\n        _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.EventsController.sendEvent({\n            event: \"CLICK_CANCEL_SIWE\",\n            type: \"track\"\n        });\n    }\n    constructor(){\n        var _OptionsController_state_metadata;\n        super(...arguments);\n        this.dappName = (_OptionsController_state_metadata = _web3modal_core__WEBPACK_IMPORTED_MODULE_1__.OptionsController.state.metadata) === null || _OptionsController_state_metadata === void 0 ? void 0 : _OptionsController_state_metadata.name;\n        this.isSigning = false;\n    }\n};\n__decorate([\n    (0,lit_decorators_js__WEBPACK_IMPORTED_MODULE_4__.state)()\n], W3mConnectingSiweView.prototype, \"isSigning\", void 0);\nW3mConnectingSiweView = __decorate([\n    (0,_web3modal_ui__WEBPACK_IMPORTED_MODULE_2__.customElement)(\"w3m-connecting-siwe-view\")\n], W3mConnectingSiweView);\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/scaffold/views/w3m-connecting-siwe-view/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/src/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/dist/esm/src/client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3ModalSIWEClient: function() { return /* binding */ Web3ModalSIWEClient; }\n/* harmony export */ });\n/* harmony import */ var _web3modal_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @web3modal/core */ \"(app-pages-browser)/./node_modules/@web3modal/core/dist/esm/index.js\");\n/* harmony import */ var _web3modal_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3modal/common */ \"(app-pages-browser)/./node_modules/@web3modal/common/dist/esm/index.js\");\n/* harmony import */ var _core_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/utils/ConstantsUtil.js */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/core/utils/ConstantsUtil.js\");\n\n\n\nclass Web3ModalSIWEClient {\n    async getNonce(address) {\n        const nonce = await this.methods.getNonce(address);\n        if (!nonce) {\n            throw new Error(\"siweControllerClient:getNonce - nonce is undefined\");\n        }\n        return nonce;\n    }\n    async getMessageParams() {\n        const params = await this.methods.getMessageParams();\n        return params || {};\n    }\n    createMessage(args) {\n        const message = this.methods.createMessage(args);\n        if (!message) {\n            throw new Error(\"siweControllerClient:createMessage - message is undefined\");\n        }\n        return message;\n    }\n    async verifyMessage(args) {\n        const isValid = await this.methods.verifyMessage(args);\n        return isValid;\n    }\n    async getSession() {\n        const session = await this.methods.getSession();\n        if (!session) {\n            throw new Error(\"siweControllerClient:getSession - session is undefined\");\n        }\n        return session;\n    }\n    async signIn() {\n        var _NetworkController_state_caipNetwork;\n        const { address } = _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.AccountController.state;\n        const nonce = await this.methods.getNonce(address);\n        if (!address) {\n            throw new Error(\"An address is required to create a SIWE message.\");\n        }\n        const chainId = _web3modal_common__WEBPACK_IMPORTED_MODULE_1__.NetworkUtil.caipNetworkIdToNumber((_NetworkController_state_caipNetwork = _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.NetworkController.state.caipNetwork) === null || _NetworkController_state_caipNetwork === void 0 ? void 0 : _NetworkController_state_caipNetwork.id);\n        if (!chainId) {\n            throw new Error(\"A chainId is required to create a SIWE message.\");\n        }\n        const messageParams = await this.getMessageParams();\n        const message = this.methods.createMessage({\n            address: \"eip155:\".concat(chainId, \":\").concat(address),\n            chainId,\n            nonce,\n            version: \"1\",\n            iat: messageParams.iat || new Date().toISOString(),\n            ...messageParams\n        });\n        const type = _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.StorageUtil.getConnectedConnector();\n        if (type === \"AUTH\") {\n            _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.RouterController.pushTransactionStack({\n                view: null,\n                goBack: false,\n                replace: true,\n                onCancel () {\n                    _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.RouterController.replace(\"ConnectingSiwe\");\n                }\n            });\n        }\n        const signature = await _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.ConnectionController.signMessage(message);\n        const isValid = await this.methods.verifyMessage({\n            message,\n            signature\n        });\n        if (!isValid) {\n            throw new Error(\"Error verifying SIWE signature\");\n        }\n        const session = await this.methods.getSession();\n        if (!session) {\n            throw new Error(\"Error verifying SIWE signature\");\n        }\n        if (this.methods.onSignIn) {\n            this.methods.onSignIn(session);\n        }\n        _web3modal_core__WEBPACK_IMPORTED_MODULE_0__.RouterUtil.navigateAfterNetworkSwitch();\n        return session;\n    }\n    async signOut() {\n        var _this_methods_onSignOut, _this_methods;\n        (_this_methods_onSignOut = (_this_methods = this.methods).onSignOut) === null || _this_methods_onSignOut === void 0 ? void 0 : _this_methods_onSignOut.call(_this_methods);\n        return this.methods.signOut();\n    }\n    constructor(siweConfig){\n        const { enabled = true, nonceRefetchIntervalMs = _core_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_2__.ConstantsUtil.FIVE_MINUTES_IN_MS, sessionRefetchIntervalMs = _core_utils_ConstantsUtil_js__WEBPACK_IMPORTED_MODULE_2__.ConstantsUtil.FIVE_MINUTES_IN_MS, signOutOnAccountChange = true, signOutOnDisconnect = true, signOutOnNetworkChange = true, ...siweConfigMethods } = siweConfig;\n        this.options = {\n            enabled,\n            nonceRefetchIntervalMs,\n            sessionRefetchIntervalMs,\n            signOutOnDisconnect,\n            signOutOnAccountChange,\n            signOutOnNetworkChange\n        };\n        this.methods = siweConfigMethods;\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2ViM21vZGFsL3Npd2UvZGlzdC9lc20vc3JjL2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdJO0FBQ3hGO0FBQ2U7QUFDeEQsTUFBTVE7SUFhVCxNQUFNQyxTQUFTQyxPQUFPLEVBQUU7UUFDcEIsTUFBTUMsUUFBUSxNQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDSCxRQUFRLENBQUNDO1FBQzFDLElBQUksQ0FBQ0MsT0FBTztZQUNSLE1BQU0sSUFBSUUsTUFBTTtRQUNwQjtRQUNBLE9BQU9GO0lBQ1g7SUFDQSxNQUFNRyxtQkFBbUI7UUFDckIsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ0gsT0FBTyxDQUFDRSxnQkFBZ0I7UUFDbEQsT0FBT0MsVUFBVSxDQUFDO0lBQ3RCO0lBQ0FDLGNBQWNDLElBQUksRUFBRTtRQUNoQixNQUFNQyxVQUFVLElBQUksQ0FBQ04sT0FBTyxDQUFDSSxhQUFhLENBQUNDO1FBQzNDLElBQUksQ0FBQ0MsU0FBUztZQUNWLE1BQU0sSUFBSUwsTUFBTTtRQUNwQjtRQUNBLE9BQU9LO0lBQ1g7SUFDQSxNQUFNQyxjQUFjRixJQUFJLEVBQUU7UUFDdEIsTUFBTUcsVUFBVSxNQUFNLElBQUksQ0FBQ1IsT0FBTyxDQUFDTyxhQUFhLENBQUNGO1FBQ2pELE9BQU9HO0lBQ1g7SUFDQSxNQUFNQyxhQUFhO1FBQ2YsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ1YsT0FBTyxDQUFDUyxVQUFVO1FBQzdDLElBQUksQ0FBQ0MsU0FBUztZQUNWLE1BQU0sSUFBSVQsTUFBTTtRQUNwQjtRQUNBLE9BQU9TO0lBQ1g7SUFDQSxNQUFNQyxTQUFTO1lBTXVDdEI7UUFMbEQsTUFBTSxFQUFFUyxPQUFPLEVBQUUsR0FBR1YsOERBQWlCQSxDQUFDd0IsS0FBSztRQUMzQyxNQUFNYixRQUFRLE1BQU0sSUFBSSxDQUFDQyxPQUFPLENBQUNILFFBQVEsQ0FBQ0M7UUFDMUMsSUFBSSxDQUFDQSxTQUFTO1lBQ1YsTUFBTSxJQUFJRyxNQUFNO1FBQ3BCO1FBQ0EsTUFBTVksVUFBVW5CLDBEQUFXQSxDQUFDb0IscUJBQXFCLEVBQUN6Qix1Q0FBQUEsOERBQWlCQSxDQUFDdUIsS0FBSyxDQUFDRyxXQUFXLGNBQW5DMUIsMkRBQUFBLHFDQUFxQzJCLEVBQUU7UUFDekYsSUFBSSxDQUFDSCxTQUFTO1lBQ1YsTUFBTSxJQUFJWixNQUFNO1FBQ3BCO1FBQ0EsTUFBTWdCLGdCQUFnQixNQUFNLElBQUksQ0FBQ2YsZ0JBQWdCO1FBQ2pELE1BQU1JLFVBQVUsSUFBSSxDQUFDTixPQUFPLENBQUNJLGFBQWEsQ0FBQztZQUN2Q04sU0FBUyxVQUFxQkEsT0FBWGUsU0FBUSxLQUFXLE9BQVJmO1lBQzlCZTtZQUNBZDtZQUNBbUIsU0FBUztZQUNUQyxLQUFLRixjQUFjRSxHQUFHLElBQUksSUFBSUMsT0FBT0MsV0FBVztZQUNoRCxHQUFHSixhQUFhO1FBQ3BCO1FBQ0EsTUFBTUssT0FBTzdCLHdEQUFXQSxDQUFDOEIscUJBQXFCO1FBQzlDLElBQUlELFNBQVMsUUFBUTtZQUNqQjlCLDZEQUFnQkEsQ0FBQ2dDLG9CQUFvQixDQUFDO2dCQUNsQ0MsTUFBTTtnQkFDTkMsUUFBUTtnQkFDUkMsU0FBUztnQkFDVEM7b0JBQ0lwQyw2REFBZ0JBLENBQUNtQyxPQUFPLENBQUM7Z0JBQzdCO1lBQ0o7UUFDSjtRQUNBLE1BQU1FLFlBQVksTUFBTXZDLGlFQUFvQkEsQ0FBQ3dDLFdBQVcsQ0FBQ3hCO1FBQ3pELE1BQU1FLFVBQVUsTUFBTSxJQUFJLENBQUNSLE9BQU8sQ0FBQ08sYUFBYSxDQUFDO1lBQUVEO1lBQVN1QjtRQUFVO1FBQ3RFLElBQUksQ0FBQ3JCLFNBQVM7WUFDVixNQUFNLElBQUlQLE1BQU07UUFDcEI7UUFDQSxNQUFNUyxVQUFVLE1BQU0sSUFBSSxDQUFDVixPQUFPLENBQUNTLFVBQVU7UUFDN0MsSUFBSSxDQUFDQyxTQUFTO1lBQ1YsTUFBTSxJQUFJVCxNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxJQUFJLENBQUNELE9BQU8sQ0FBQytCLFFBQVEsRUFBRTtZQUN2QixJQUFJLENBQUMvQixPQUFPLENBQUMrQixRQUFRLENBQUNyQjtRQUMxQjtRQUNBbkIsdURBQVVBLENBQUN5QywwQkFBMEI7UUFDckMsT0FBT3RCO0lBQ1g7SUFDQSxNQUFNdUIsVUFBVTtZQUNaO1NBQUEsK0NBQUksQ0FBQ2pDLE9BQU8sRUFBQ2tDLFNBQVMsY0FBdEI7UUFDQSxPQUFPLElBQUksQ0FBQ2xDLE9BQU8sQ0FBQ2lDLE9BQU87SUFDL0I7SUF6RkFFLFlBQVlDLFVBQVUsQ0FBRTtRQUNwQixNQUFNLEVBQUVDLFVBQVUsSUFBSSxFQUFFQyx5QkFBeUIzQyx1RUFBYUEsQ0FBQzRDLGtCQUFrQixFQUFFQywyQkFBMkI3Qyx1RUFBYUEsQ0FBQzRDLGtCQUFrQixFQUFFRSx5QkFBeUIsSUFBSSxFQUFFQyxzQkFBc0IsSUFBSSxFQUFFQyx5QkFBeUIsSUFBSSxFQUFFLEdBQUdDLG1CQUFtQixHQUFHUjtRQUNuUSxJQUFJLENBQUNTLE9BQU8sR0FBRztZQUNYUjtZQUNBQztZQUNBRTtZQUNBRTtZQUNBRDtZQUNBRTtRQUNKO1FBQ0EsSUFBSSxDQUFDM0MsT0FBTyxHQUFHNEM7SUFDbkI7QUErRUosRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzbW9kYWwvc2l3ZS9kaXN0L2VzbS9zcmMvY2xpZW50LmpzP2U3MTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjb3VudENvbnRyb2xsZXIsIE5ldHdvcmtDb250cm9sbGVyLCBDb25uZWN0aW9uQ29udHJvbGxlciwgUm91dGVyVXRpbCwgUm91dGVyQ29udHJvbGxlciwgU3RvcmFnZVV0aWwgfSBmcm9tICdAd2ViM21vZGFsL2NvcmUnO1xuaW1wb3J0IHsgTmV0d29ya1V0aWwgfSBmcm9tICdAd2ViM21vZGFsL2NvbW1vbic7XG5pbXBvcnQgeyBDb25zdGFudHNVdGlsIH0gZnJvbSAnLi4vY29yZS91dGlscy9Db25zdGFudHNVdGlsLmpzJztcbmV4cG9ydCBjbGFzcyBXZWIzTW9kYWxTSVdFQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzaXdlQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgZW5hYmxlZCA9IHRydWUsIG5vbmNlUmVmZXRjaEludGVydmFsTXMgPSBDb25zdGFudHNVdGlsLkZJVkVfTUlOVVRFU19JTl9NUywgc2Vzc2lvblJlZmV0Y2hJbnRlcnZhbE1zID0gQ29uc3RhbnRzVXRpbC5GSVZFX01JTlVURVNfSU5fTVMsIHNpZ25PdXRPbkFjY291bnRDaGFuZ2UgPSB0cnVlLCBzaWduT3V0T25EaXNjb25uZWN0ID0gdHJ1ZSwgc2lnbk91dE9uTmV0d29ya0NoYW5nZSA9IHRydWUsIC4uLnNpd2VDb25maWdNZXRob2RzIH0gPSBzaXdlQ29uZmlnO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBlbmFibGVkLFxuICAgICAgICAgICAgbm9uY2VSZWZldGNoSW50ZXJ2YWxNcyxcbiAgICAgICAgICAgIHNlc3Npb25SZWZldGNoSW50ZXJ2YWxNcyxcbiAgICAgICAgICAgIHNpZ25PdXRPbkRpc2Nvbm5lY3QsXG4gICAgICAgICAgICBzaWduT3V0T25BY2NvdW50Q2hhbmdlLFxuICAgICAgICAgICAgc2lnbk91dE9uTmV0d29ya0NoYW5nZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSBzaXdlQ29uZmlnTWV0aG9kcztcbiAgICB9XG4gICAgYXN5bmMgZ2V0Tm9uY2UoYWRkcmVzcykge1xuICAgICAgICBjb25zdCBub25jZSA9IGF3YWl0IHRoaXMubWV0aG9kcy5nZXROb25jZShhZGRyZXNzKTtcbiAgICAgICAgaWYgKCFub25jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaXdlQ29udHJvbGxlckNsaWVudDpnZXROb25jZSAtIG5vbmNlIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub25jZTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TWVzc2FnZVBhcmFtcygpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgdGhpcy5tZXRob2RzLmdldE1lc3NhZ2VQYXJhbXMoKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtcyB8fCB7fTtcbiAgICB9XG4gICAgY3JlYXRlTWVzc2FnZShhcmdzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1ldGhvZHMuY3JlYXRlTWVzc2FnZShhcmdzKTtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Npd2VDb250cm9sbGVyQ2xpZW50OmNyZWF0ZU1lc3NhZ2UgLSBtZXNzYWdlIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnlNZXNzYWdlKGFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IHRoaXMubWV0aG9kcy52ZXJpZnlNZXNzYWdlKGFyZ3MpO1xuICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U2Vzc2lvbigpIHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGF3YWl0IHRoaXMubWV0aG9kcy5nZXRTZXNzaW9uKCk7XG4gICAgICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaXdlQ29udHJvbGxlckNsaWVudDpnZXRTZXNzaW9uIC0gc2Vzc2lvbiBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9XG4gICAgYXN5bmMgc2lnbkluKCkge1xuICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IEFjY291bnRDb250cm9sbGVyLnN0YXRlO1xuICAgICAgICBjb25zdCBub25jZSA9IGF3YWl0IHRoaXMubWV0aG9kcy5nZXROb25jZShhZGRyZXNzKTtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIGFkZHJlc3MgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIGEgU0lXRSBtZXNzYWdlLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoYWluSWQgPSBOZXR3b3JrVXRpbC5jYWlwTmV0d29ya0lkVG9OdW1iZXIoTmV0d29ya0NvbnRyb2xsZXIuc3RhdGUuY2FpcE5ldHdvcms/LmlkKTtcbiAgICAgICAgaWYgKCFjaGFpbklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgY2hhaW5JZCBpcyByZXF1aXJlZCB0byBjcmVhdGUgYSBTSVdFIG1lc3NhZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZVBhcmFtcyA9IGF3YWl0IHRoaXMuZ2V0TWVzc2FnZVBhcmFtcygpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXRob2RzLmNyZWF0ZU1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWRkcmVzczogYGVpcDE1NToke2NoYWluSWR9OiR7YWRkcmVzc31gLFxuICAgICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEnLFxuICAgICAgICAgICAgaWF0OiBtZXNzYWdlUGFyYW1zLmlhdCB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAuLi5tZXNzYWdlUGFyYW1zXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0eXBlID0gU3RvcmFnZVV0aWwuZ2V0Q29ubmVjdGVkQ29ubmVjdG9yKCk7XG4gICAgICAgIGlmICh0eXBlID09PSAnQVVUSCcpIHtcbiAgICAgICAgICAgIFJvdXRlckNvbnRyb2xsZXIucHVzaFRyYW5zYWN0aW9uU3RhY2soe1xuICAgICAgICAgICAgICAgIHZpZXc6IG51bGwsXG4gICAgICAgICAgICAgICAgZ29CYWNrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsKCkge1xuICAgICAgICAgICAgICAgICAgICBSb3V0ZXJDb250cm9sbGVyLnJlcGxhY2UoJ0Nvbm5lY3RpbmdTaXdlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2lnbk1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCB0aGlzLm1ldGhvZHMudmVyaWZ5TWVzc2FnZSh7IG1lc3NhZ2UsIHNpZ25hdHVyZSB9KTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHZlcmlmeWluZyBTSVdFIHNpZ25hdHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCB0aGlzLm1ldGhvZHMuZ2V0U2Vzc2lvbigpO1xuICAgICAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgdmVyaWZ5aW5nIFNJV0Ugc2lnbmF0dXJlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWV0aG9kcy5vblNpZ25Jbikge1xuICAgICAgICAgICAgdGhpcy5tZXRob2RzLm9uU2lnbkluKHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIFJvdXRlclV0aWwubmF2aWdhdGVBZnRlck5ldHdvcmtTd2l0Y2goKTtcbiAgICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfVxuICAgIGFzeW5jIHNpZ25PdXQoKSB7XG4gICAgICAgIHRoaXMubWV0aG9kcy5vblNpZ25PdXQ/LigpO1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RzLnNpZ25PdXQoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwIl0sIm5hbWVzIjpbIkFjY291bnRDb250cm9sbGVyIiwiTmV0d29ya0NvbnRyb2xsZXIiLCJDb25uZWN0aW9uQ29udHJvbGxlciIsIlJvdXRlclV0aWwiLCJSb3V0ZXJDb250cm9sbGVyIiwiU3RvcmFnZVV0aWwiLCJOZXR3b3JrVXRpbCIsIkNvbnN0YW50c1V0aWwiLCJXZWIzTW9kYWxTSVdFQ2xpZW50IiwiZ2V0Tm9uY2UiLCJhZGRyZXNzIiwibm9uY2UiLCJtZXRob2RzIiwiRXJyb3IiLCJnZXRNZXNzYWdlUGFyYW1zIiwicGFyYW1zIiwiY3JlYXRlTWVzc2FnZSIsImFyZ3MiLCJtZXNzYWdlIiwidmVyaWZ5TWVzc2FnZSIsImlzVmFsaWQiLCJnZXRTZXNzaW9uIiwic2Vzc2lvbiIsInNpZ25JbiIsInN0YXRlIiwiY2hhaW5JZCIsImNhaXBOZXR3b3JrSWRUb051bWJlciIsImNhaXBOZXR3b3JrIiwiaWQiLCJtZXNzYWdlUGFyYW1zIiwidmVyc2lvbiIsImlhdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInR5cGUiLCJnZXRDb25uZWN0ZWRDb25uZWN0b3IiLCJwdXNoVHJhbnNhY3Rpb25TdGFjayIsInZpZXciLCJnb0JhY2siLCJyZXBsYWNlIiwib25DYW5jZWwiLCJzaWduYXR1cmUiLCJzaWduTWVzc2FnZSIsIm9uU2lnbkluIiwibmF2aWdhdGVBZnRlck5ldHdvcmtTd2l0Y2giLCJzaWduT3V0Iiwib25TaWduT3V0IiwiY29uc3RydWN0b3IiLCJzaXdlQ29uZmlnIiwiZW5hYmxlZCIsIm5vbmNlUmVmZXRjaEludGVydmFsTXMiLCJGSVZFX01JTlVURVNfSU5fTVMiLCJzZXNzaW9uUmVmZXRjaEludGVydmFsTXMiLCJzaWduT3V0T25BY2NvdW50Q2hhbmdlIiwic2lnbk91dE9uRGlzY29ubmVjdCIsInNpZ25PdXRPbk5ldHdvcmtDaGFuZ2UiLCJzaXdlQ29uZmlnTWV0aG9kcyIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/dist/esm/src/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla.mjs ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: function() { return /* binding */ getVersion; },\n/* harmony export */   proxy: function() { return /* binding */ proxy; },\n/* harmony export */   ref: function() { return /* binding */ ref; },\n/* harmony export */   snapshot: function() { return /* binding */ snapshot; },\n/* harmony export */   subscribe: function() { return /* binding */ subscribe; },\n/* harmony export */   unstable_buildProxyFunction: function() { return /* binding */ unstable_buildProxyFunction; }\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/proxy-compare/dist/index.modern.js\");\n\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst buildProxyFunction = function() {\n    let objectIs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Object.is, newProxy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : (target, handler)=>new Proxy(target, handler), canProxy = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : (x)=>isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : (promise)=>{\n        switch(promise.status){\n            case \"fulfilled\":\n                return promise.value;\n            case \"rejected\":\n                throw promise.reason;\n            default:\n                throw promise;\n        }\n    }, snapCache = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : /* @__PURE__ */ new WeakMap(), createSnapshot = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : function(target, version) {\n        let handlePromise = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultHandlePromise;\n        const cache = snapCache.get(target);\n        if ((cache == null ? void 0 : cache[0]) === version) {\n            return cache[1];\n        }\n        const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n        (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n        snapCache.set(target, [\n            version,\n            snap\n        ]);\n        Reflect.ownKeys(target).forEach((key)=>{\n            if (Object.getOwnPropertyDescriptor(snap, key)) {\n                return;\n            }\n            const value = Reflect.get(target, key);\n            const desc = {\n                value,\n                enumerable: true,\n                // This is intentional to avoid copying with proxy-compare.\n                // It's still non-writable, so it avoids assigning a value.\n                configurable: true\n            };\n            if (refSet.has(value)) {\n                (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n            } else if (value instanceof Promise) {\n                delete desc.value;\n                desc.get = ()=>handlePromise(value);\n            } else if (proxyStateMap.has(value)) {\n                const [target2, ensureVersion] = proxyStateMap.get(value);\n                desc.value = createSnapshot(target2, ensureVersion(), handlePromise);\n            }\n            Object.defineProperty(snap, key, desc);\n        });\n        return Object.preventExtensions(snap);\n    }, proxyCache = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : /* @__PURE__ */ new WeakMap(), versionHolder = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : [\n        1,\n        1\n    ], proxyFunction = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : (initialObject)=>{\n        if (!isObject(initialObject)) {\n            throw new Error(\"object required\");\n        }\n        const found = proxyCache.get(initialObject);\n        if (found) {\n            return found;\n        }\n        let version = versionHolder[0];\n        const listeners = /* @__PURE__ */ new Set();\n        const notifyUpdate = function(op) {\n            let nextVersion = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ++versionHolder[0];\n            if (version !== nextVersion) {\n                version = nextVersion;\n                listeners.forEach((listener)=>listener(op, nextVersion));\n            }\n        };\n        let checkVersion = versionHolder[1];\n        const ensureVersion = function() {\n            let nextCheckVersion = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ++versionHolder[1];\n            if (checkVersion !== nextCheckVersion && !listeners.size) {\n                checkVersion = nextCheckVersion;\n                propProxyStates.forEach((param)=>{\n                    let [propProxyState] = param;\n                    const propVersion = propProxyState[1](nextCheckVersion);\n                    if (propVersion > version) {\n                        version = propVersion;\n                    }\n                });\n            }\n            return version;\n        };\n        const createPropListener = (prop)=>(op, nextVersion)=>{\n                const newOp = [\n                    ...op\n                ];\n                newOp[1] = [\n                    prop,\n                    ...newOp[1]\n                ];\n                notifyUpdate(newOp, nextVersion);\n            };\n        const propProxyStates = /* @__PURE__ */ new Map();\n        const addPropListener = (prop, propProxyState)=>{\n            if (( false ? 0 : void 0) !== \"production\" && propProxyStates.has(prop)) {\n                throw new Error(\"prop listener already exists\");\n            }\n            if (listeners.size) {\n                const remove = propProxyState[3](createPropListener(prop));\n                propProxyStates.set(prop, [\n                    propProxyState,\n                    remove\n                ]);\n            } else {\n                propProxyStates.set(prop, [\n                    propProxyState\n                ]);\n            }\n        };\n        const removePropListener = (prop)=>{\n            var _a;\n            const entry = propProxyStates.get(prop);\n            if (entry) {\n                propProxyStates.delete(prop);\n                (_a = entry[1]) == null ? void 0 : _a.call(entry);\n            }\n        };\n        const addListener = (listener)=>{\n            listeners.add(listener);\n            if (listeners.size === 1) {\n                propProxyStates.forEach((param, prop)=>{\n                    let [propProxyState, prevRemove] = param;\n                    if (( false ? 0 : void 0) !== \"production\" && prevRemove) {\n                        throw new Error(\"remove already exists\");\n                    }\n                    const remove = propProxyState[3](createPropListener(prop));\n                    propProxyStates.set(prop, [\n                        propProxyState,\n                        remove\n                    ]);\n                });\n            }\n            const removeListener = ()=>{\n                listeners.delete(listener);\n                if (listeners.size === 0) {\n                    propProxyStates.forEach((param, prop)=>{\n                        let [propProxyState, remove] = param;\n                        if (remove) {\n                            remove();\n                            propProxyStates.set(prop, [\n                                propProxyState\n                            ]);\n                        }\n                    });\n                }\n            };\n            return removeListener;\n        };\n        const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n        const handler = {\n            deleteProperty (target, prop) {\n                const prevValue = Reflect.get(target, prop);\n                removePropListener(prop);\n                const deleted = Reflect.deleteProperty(target, prop);\n                if (deleted) {\n                    notifyUpdate([\n                        \"delete\",\n                        [\n                            prop\n                        ],\n                        prevValue\n                    ]);\n                }\n                return deleted;\n            },\n            set (target, prop, value, receiver) {\n                const hasPrevValue = Reflect.has(target, prop);\n                const prevValue = Reflect.get(target, prop, receiver);\n                if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n                    return true;\n                }\n                removePropListener(prop);\n                if (isObject(value)) {\n                    value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n                }\n                let nextValue = value;\n                if (value instanceof Promise) {\n                    value.then((v)=>{\n                        value.status = \"fulfilled\";\n                        value.value = v;\n                        notifyUpdate([\n                            \"resolve\",\n                            [\n                                prop\n                            ],\n                            v\n                        ]);\n                    }).catch((e)=>{\n                        value.status = \"rejected\";\n                        value.reason = e;\n                        notifyUpdate([\n                            \"reject\",\n                            [\n                                prop\n                            ],\n                            e\n                        ]);\n                    });\n                } else {\n                    if (!proxyStateMap.has(value) && canProxy(value)) {\n                        nextValue = proxyFunction(value);\n                    }\n                    const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n                    if (childProxyState) {\n                        addPropListener(prop, childProxyState);\n                    }\n                }\n                Reflect.set(target, prop, nextValue, receiver);\n                notifyUpdate([\n                    \"set\",\n                    [\n                        prop\n                    ],\n                    value,\n                    prevValue\n                ]);\n                return true;\n            }\n        };\n        const proxyObject = newProxy(baseObject, handler);\n        proxyCache.set(initialObject, proxyObject);\n        const proxyState = [\n            baseObject,\n            ensureVersion,\n            createSnapshot,\n            addListener\n        ];\n        proxyStateMap.set(proxyObject, proxyState);\n        Reflect.ownKeys(initialObject).forEach((key)=>{\n            const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n            if (\"value\" in desc) {\n                proxyObject[key] = initialObject[key];\n                delete desc.value;\n                delete desc.writable;\n            }\n            Object.defineProperty(baseObject, key, desc);\n        });\n        return proxyObject;\n    };\n    return [\n        // public functions\n        proxyFunction,\n        // shared state\n        proxyStateMap,\n        refSet,\n        // internal things\n        objectIs,\n        newProxy,\n        canProxy,\n        defaultHandlePromise,\n        snapCache,\n        createSnapshot,\n        proxyCache,\n        versionHolder\n    ];\n};\nconst [defaultProxyFunction] = buildProxyFunction();\nfunction proxy() {\n    let initialObject = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    let promise;\n    const ops = [];\n    const addListener = proxyState[3];\n    let isListenerActive = false;\n    const listener = (op)=>{\n        ops.push(op);\n        if (notifyInSync) {\n            callback(ops.splice(0));\n            return;\n        }\n        if (!promise) {\n            promise = Promise.resolve().then(()=>{\n                promise = void 0;\n                if (isListenerActive) {\n                    callback(ops.splice(0));\n                }\n            });\n        }\n    };\n    const removeListener = addListener(listener);\n    isListenerActive = true;\n    return ()=>{\n        isListenerActive = false;\n        removeListener();\n    };\n}\nfunction snapshot(proxyObject, handlePromise) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    const [target, ensureVersion, createSnapshot] = proxyState;\n    return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n    refSet.add(obj);\n    return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla/utils.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla/utils.mjs ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addComputed: function() { return /* binding */ addComputed_DEPRECATED; },\n/* harmony export */   derive: function() { return /* binding */ derive; },\n/* harmony export */   devtools: function() { return /* binding */ devtools; },\n/* harmony export */   proxyMap: function() { return /* binding */ proxyMap; },\n/* harmony export */   proxySet: function() { return /* binding */ proxySet; },\n/* harmony export */   proxyWithComputed: function() { return /* binding */ proxyWithComputed_DEPRECATED; },\n/* harmony export */   proxyWithHistory: function() { return /* binding */ proxyWithHistory; },\n/* harmony export */   subscribeKey: function() { return /* binding */ subscribeKey; },\n/* harmony export */   underive: function() { return /* binding */ underive; },\n/* harmony export */   unstable_deriveSubscriptions: function() { return /* binding */ unstable_deriveSubscriptions; },\n/* harmony export */   watch: function() { return /* binding */ watch; }\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla.mjs\");\n\nfunction subscribeKey(proxyObject, key, callback, notifyInSync) {\n    let prevValue = proxyObject[key];\n    return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, ()=>{\n        const nextValue = proxyObject[key];\n        if (!Object.is(prevValue, nextValue)) {\n            callback(prevValue = nextValue);\n        }\n    }, notifyInSync);\n}\nlet currentCleanups;\nfunction watch(callback, options) {\n    let alive = true;\n    const cleanups = /* @__PURE__ */ new Set();\n    const subscriptions = /* @__PURE__ */ new Map();\n    const cleanup = ()=>{\n        if (alive) {\n            alive = false;\n            cleanups.forEach((clean)=>clean());\n            cleanups.clear();\n            subscriptions.forEach((unsubscribe)=>unsubscribe());\n            subscriptions.clear();\n        }\n    };\n    const revalidate = ()=>{\n        if (!alive) {\n            return;\n        }\n        cleanups.forEach((clean)=>clean());\n        cleanups.clear();\n        const proxiesToSubscribe = /* @__PURE__ */ new Set();\n        const parent = currentCleanups;\n        currentCleanups = cleanups;\n        try {\n            const cleanupReturn = callback((proxyObject)=>{\n                proxiesToSubscribe.add(proxyObject);\n                return proxyObject;\n            });\n            if (cleanupReturn) {\n                cleanups.add(cleanupReturn);\n            }\n        } finally{\n            currentCleanups = parent;\n        }\n        subscriptions.forEach((unsubscribe, proxyObject)=>{\n            if (proxiesToSubscribe.has(proxyObject)) {\n                proxiesToSubscribe.delete(proxyObject);\n            } else {\n                subscriptions.delete(proxyObject);\n                unsubscribe();\n            }\n        });\n        proxiesToSubscribe.forEach((proxyObject)=>{\n            const unsubscribe = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, revalidate, options == null ? void 0 : options.sync);\n            subscriptions.set(proxyObject, unsubscribe);\n        });\n    };\n    if (currentCleanups) {\n        currentCleanups.add(cleanup);\n    }\n    revalidate();\n    return cleanup;\n}\nconst DEVTOOLS = Symbol();\nfunction devtools(proxyObject, options) {\n    if (typeof options === \"string\") {\n        console.warn(\"string name option is deprecated, use { name }. https://github.com/pmndrs/valtio/pull/400\");\n        options = {\n            name: options\n        };\n    }\n    const { enabled, name = \"\", ...rest } = options || {};\n    let extension;\n    try {\n        extension = (enabled != null ? enabled : ( false ? 0 : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n    } catch (e) {}\n    if (!extension) {\n        if (( false ? 0 : void 0) !== \"production\" && enabled) {\n            console.warn(\"[Warning] Please install/enable Redux devtools extension\");\n        }\n        return;\n    }\n    let isTimeTraveling = false;\n    const devtools2 = extension.connect({\n        name,\n        ...rest\n    });\n    const unsub1 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, (ops)=>{\n        const action = ops.filter((param)=>{\n            let [_, path] = param;\n            return path[0] !== DEVTOOLS;\n        }).map((param)=>{\n            let [op, path] = param;\n            return \"\".concat(op, \":\").concat(path.map(String).join(\".\"));\n        }).join(\", \");\n        if (!action) {\n            return;\n        }\n        if (isTimeTraveling) {\n            isTimeTraveling = false;\n        } else {\n            const snapWithoutDevtools = Object.assign({}, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n            delete snapWithoutDevtools[DEVTOOLS];\n            devtools2.send({\n                type: action,\n                updatedAt: /* @__PURE__ */ new Date().toLocaleString()\n            }, snapWithoutDevtools);\n        }\n    });\n    const unsub2 = devtools2.subscribe((message)=>{\n        var _a, _b, _c, _d, _e, _f;\n        if (message.type === \"ACTION\" && message.payload) {\n            try {\n                Object.assign(proxyObject, JSON.parse(message.payload));\n            } catch (e) {\n                console.error(\"please dispatch a serializable value that JSON.parse() and proxy() support\\n\", e);\n            }\n        }\n        if (message.type === \"DISPATCH\" && message.state) {\n            if (((_a = message.payload) == null ? void 0 : _a.type) === \"JUMP_TO_ACTION\" || ((_b = message.payload) == null ? void 0 : _b.type) === \"JUMP_TO_STATE\") {\n                isTimeTraveling = true;\n                const state = JSON.parse(message.state);\n                Object.assign(proxyObject, state);\n            }\n            proxyObject[DEVTOOLS] = message;\n        } else if (message.type === \"DISPATCH\" && ((_c = message.payload) == null ? void 0 : _c.type) === \"COMMIT\") {\n            devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        } else if (message.type === \"DISPATCH\" && ((_d = message.payload) == null ? void 0 : _d.type) === \"IMPORT_STATE\") {\n            const actions = (_e = message.payload.nextLiftedState) == null ? void 0 : _e.actionsById;\n            const computedStates = ((_f = message.payload.nextLiftedState) == null ? void 0 : _f.computedStates) || [];\n            isTimeTraveling = true;\n            computedStates.forEach((param, index)=>{\n                let { state } = param;\n                const action = actions[index] || \"No action found\";\n                Object.assign(proxyObject, state);\n                if (index === 0) {\n                    devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n                } else {\n                    devtools2.send(action, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n                }\n            });\n        }\n    });\n    devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n    return ()=>{\n        unsub1();\n        unsub2 == null ? void 0 : unsub2();\n    };\n}\nconst sourceObjectMap = /* @__PURE__ */ new WeakMap();\nconst derivedObjectMap = /* @__PURE__ */ new WeakMap();\nconst markPending = (sourceObject, callback)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        sourceObjectEntry[0].forEach((subscription)=>{\n            const { d: derivedObject } = subscription;\n            if (sourceObject !== derivedObject) {\n                markPending(derivedObject);\n            }\n        });\n        ++sourceObjectEntry[2];\n        if (callback) {\n            sourceObjectEntry[3].add(callback);\n        }\n    }\n};\nconst checkPending = (sourceObject, callback)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry == null ? void 0 : sourceObjectEntry[2]) {\n        sourceObjectEntry[3].add(callback);\n        return true;\n    }\n    return false;\n};\nconst unmarkPending = (sourceObject)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        --sourceObjectEntry[2];\n        if (!sourceObjectEntry[2]) {\n            sourceObjectEntry[3].forEach((callback)=>callback());\n            sourceObjectEntry[3].clear();\n        }\n        sourceObjectEntry[0].forEach((subscription)=>{\n            const { d: derivedObject } = subscription;\n            if (sourceObject !== derivedObject) {\n                unmarkPending(derivedObject);\n            }\n        });\n    }\n};\nconst addSubscription = (subscription)=>{\n    const { s: sourceObject, d: derivedObject } = subscription;\n    let derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    if (!derivedObjectEntry) {\n        derivedObjectEntry = [\n            /* @__PURE__ */ new Set()\n        ];\n        derivedObjectMap.set(subscription.d, derivedObjectEntry);\n    }\n    derivedObjectEntry[0].add(subscription);\n    let sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (!sourceObjectEntry) {\n        const subscriptions = /* @__PURE__ */ new Set();\n        const unsubscribe = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(sourceObject, (ops)=>{\n            subscriptions.forEach((subscription2)=>{\n                const { d: derivedObject2, c: callback, n: notifyInSync, i: ignoreKeys } = subscription2;\n                if (sourceObject === derivedObject2 && ops.every((op)=>op[1].length === 1 && ignoreKeys.includes(op[1][0]))) {\n                    return;\n                }\n                if (subscription2.p) {\n                    return;\n                }\n                markPending(sourceObject, callback);\n                if (notifyInSync) {\n                    unmarkPending(sourceObject);\n                } else {\n                    subscription2.p = Promise.resolve().then(()=>{\n                        delete subscription2.p;\n                        unmarkPending(sourceObject);\n                    });\n                }\n            });\n        }, true);\n        sourceObjectEntry = [\n            subscriptions,\n            unsubscribe,\n            0,\n            /* @__PURE__ */ new Set()\n        ];\n        sourceObjectMap.set(sourceObject, sourceObjectEntry);\n    }\n    sourceObjectEntry[0].add(subscription);\n};\nconst removeSubscription = (subscription)=>{\n    const { s: sourceObject, d: derivedObject } = subscription;\n    const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].delete(subscription);\n    if ((derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].size) === 0) {\n        derivedObjectMap.delete(derivedObject);\n    }\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        const [subscriptions, unsubscribe] = sourceObjectEntry;\n        subscriptions.delete(subscription);\n        if (!subscriptions.size) {\n            unsubscribe();\n            sourceObjectMap.delete(sourceObject);\n        }\n    }\n};\nconst listSubscriptions = (derivedObject)=>{\n    const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    if (derivedObjectEntry) {\n        return Array.from(derivedObjectEntry[0]);\n    }\n    return [];\n};\nconst unstable_deriveSubscriptions = {\n    add: addSubscription,\n    remove: removeSubscription,\n    list: listSubscriptions\n};\nfunction derive(derivedFns, options) {\n    const proxyObject = (options == null ? void 0 : options.proxy) || (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({});\n    const notifyInSync = !!(options == null ? void 0 : options.sync);\n    const derivedKeys = Object.keys(derivedFns);\n    derivedKeys.forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(proxyObject, key)) {\n            throw new Error(\"object property already defined\");\n        }\n        const fn = derivedFns[key];\n        let lastDependencies = null;\n        const evaluate = ()=>{\n            if (lastDependencies) {\n                if (Array.from(lastDependencies).map((param)=>{\n                    let [p] = param;\n                    return checkPending(p, evaluate);\n                }).some((isPending)=>isPending)) {\n                    return;\n                }\n                if (Array.from(lastDependencies).every((param)=>{\n                    let [p, entry] = param;\n                    return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.getVersion)(p) === entry.v;\n                })) {\n                    return;\n                }\n            }\n            const dependencies = /* @__PURE__ */ new Map();\n            const get = (p)=>{\n                dependencies.set(p, {\n                    v: (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.getVersion)(p)\n                });\n                return p;\n            };\n            const value = fn(get);\n            const subscribeToDependencies = ()=>{\n                dependencies.forEach((entry, p)=>{\n                    var _a;\n                    const lastSubscription = (_a = lastDependencies == null ? void 0 : lastDependencies.get(p)) == null ? void 0 : _a.s;\n                    if (lastSubscription) {\n                        entry.s = lastSubscription;\n                    } else {\n                        const subscription = {\n                            s: p,\n                            // sourceObject\n                            d: proxyObject,\n                            // derivedObject\n                            k: key,\n                            // derived key\n                            c: evaluate,\n                            // callback\n                            n: notifyInSync,\n                            i: derivedKeys\n                        };\n                        addSubscription(subscription);\n                        entry.s = subscription;\n                    }\n                });\n                lastDependencies == null ? void 0 : lastDependencies.forEach((entry, p)=>{\n                    if (!dependencies.has(p) && entry.s) {\n                        removeSubscription(entry.s);\n                    }\n                });\n                lastDependencies = dependencies;\n            };\n            if (value instanceof Promise) {\n                value.finally(subscribeToDependencies);\n            } else {\n                subscribeToDependencies();\n            }\n            proxyObject[key] = value;\n        };\n        evaluate();\n    });\n    return proxyObject;\n}\nfunction underive(proxyObject, options) {\n    const keysToDelete = (options == null ? void 0 : options.delete) ? /* @__PURE__ */ new Set() : null;\n    listSubscriptions(proxyObject).forEach((subscription)=>{\n        const { k: key } = subscription;\n        if (!(options == null ? void 0 : options.keys) || options.keys.includes(key)) {\n            removeSubscription(subscription);\n            if (keysToDelete) {\n                keysToDelete.add(key);\n            }\n        }\n    });\n    if (keysToDelete) {\n        keysToDelete.forEach((key)=>{\n            delete proxyObject[key];\n        });\n    }\n}\nfunction addComputed_DEPRECATED(proxyObject, computedFns_FAKE) {\n    let targetObject = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : proxyObject;\n    if (( false ? 0 : void 0) !== \"production\") {\n        console.warn(\"addComputed is deprecated. Please consider using `derive`. Falling back to emulation with derive. https://github.com/pmndrs/valtio/pull/201\");\n    }\n    const derivedFns = {};\n    Object.keys(computedFns_FAKE).forEach((key)=>{\n        derivedFns[key] = (get)=>computedFns_FAKE[key](get(proxyObject));\n    });\n    return derive(derivedFns, {\n        proxy: targetObject\n    });\n}\nfunction proxyWithComputed_DEPRECATED(initialObject, computedFns) {\n    if (( false ? 0 : void 0) !== \"production\") {\n        console.warn('proxyWithComputed is deprecated. Please follow \"Computed Properties\" guide in docs.');\n    }\n    Object.keys(computedFns).forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(initialObject, key)) {\n            throw new Error(\"object property already defined\");\n        }\n        const computedFn = computedFns[key];\n        const { get, set } = typeof computedFn === \"function\" ? {\n            get: computedFn\n        } : computedFn;\n        const desc = {};\n        desc.get = ()=>get((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        if (set) {\n            desc.set = (newValue)=>set(proxyObject, newValue);\n        }\n        Object.defineProperty(initialObject, key, desc);\n    });\n    const proxyObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(initialObject);\n    return proxyObject;\n}\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nlet refSet;\nconst deepClone = (obj)=>{\n    if (!refSet) {\n        refSet = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.unstable_buildProxyFunction)()[2];\n    }\n    if (!isObject(obj) || refSet.has(obj)) {\n        return obj;\n    }\n    const baseObject = Array.isArray(obj) ? [] : Object.create(Object.getPrototypeOf(obj));\n    Reflect.ownKeys(obj).forEach((key)=>{\n        baseObject[key] = deepClone(obj[key]);\n    });\n    return baseObject;\n};\nfunction proxyWithHistory(initialValue) {\n    let skipSubscribe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    const proxyObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        value: initialValue,\n        history: (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.ref)({\n            wip: void 0,\n            // to avoid infinite loop\n            snapshots: [],\n            index: -1\n        }),\n        clone: deepClone,\n        canUndo: ()=>proxyObject.history.index > 0,\n        undo: ()=>{\n            if (proxyObject.canUndo()) {\n                proxyObject.value = proxyObject.history.wip = proxyObject.clone(proxyObject.history.snapshots[--proxyObject.history.index]);\n            }\n        },\n        canRedo: ()=>proxyObject.history.index < proxyObject.history.snapshots.length - 1,\n        redo: ()=>{\n            if (proxyObject.canRedo()) {\n                proxyObject.value = proxyObject.history.wip = proxyObject.clone(proxyObject.history.snapshots[++proxyObject.history.index]);\n            }\n        },\n        saveHistory: ()=>{\n            proxyObject.history.snapshots.splice(proxyObject.history.index + 1);\n            proxyObject.history.snapshots.push((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject).value);\n            ++proxyObject.history.index;\n        },\n        subscribe: ()=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, (ops)=>{\n                if (ops.every((op)=>op[1][0] === \"value\" && (op[0] !== \"set\" || op[2] !== proxyObject.history.wip))) {\n                    proxyObject.saveHistory();\n                }\n            })\n    });\n    proxyObject.saveHistory();\n    if (!skipSubscribe) {\n        proxyObject.subscribe();\n    }\n    return proxyObject;\n}\nfunction proxySet(initialValues) {\n    const set = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        data: Array.from(new Set(initialValues)),\n        has (value) {\n            return this.data.indexOf(value) !== -1;\n        },\n        add (value) {\n            let hasProxy = false;\n            if (typeof value === \"object\" && value !== null) {\n                hasProxy = this.data.indexOf((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(value)) !== -1;\n            }\n            if (this.data.indexOf(value) === -1 && !hasProxy) {\n                this.data.push(value);\n            }\n            return this;\n        },\n        delete (value) {\n            const index = this.data.indexOf(value);\n            if (index === -1) {\n                return false;\n            }\n            this.data.splice(index, 1);\n            return true;\n        },\n        clear () {\n            this.data.splice(0);\n        },\n        get size () {\n            return this.data.length;\n        },\n        forEach (cb) {\n            this.data.forEach((value)=>{\n                cb(value, value, this);\n            });\n        },\n        get [Symbol.toStringTag] () {\n            return \"Set\";\n        },\n        toJSON () {\n            return new Set(this.data);\n        },\n        [Symbol.iterator] () {\n            return this.data[Symbol.iterator]();\n        },\n        values () {\n            return this.data.values();\n        },\n        keys () {\n            return this.data.values();\n        },\n        entries () {\n            return new Set(this.data).entries();\n        }\n    });\n    Object.defineProperties(set, {\n        data: {\n            enumerable: false\n        },\n        size: {\n            enumerable: false\n        },\n        toJSON: {\n            enumerable: false\n        }\n    });\n    Object.seal(set);\n    return set;\n}\nfunction proxyMap(entries) {\n    const map = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        data: Array.from(entries || []),\n        has (key) {\n            return this.data.some((p)=>p[0] === key);\n        },\n        set (key, value) {\n            const record = this.data.find((p)=>p[0] === key);\n            if (record) {\n                record[1] = value;\n            } else {\n                this.data.push([\n                    key,\n                    value\n                ]);\n            }\n            return this;\n        },\n        get (key) {\n            var _a;\n            return (_a = this.data.find((p)=>p[0] === key)) == null ? void 0 : _a[1];\n        },\n        delete (key) {\n            const index = this.data.findIndex((p)=>p[0] === key);\n            if (index === -1) {\n                return false;\n            }\n            this.data.splice(index, 1);\n            return true;\n        },\n        clear () {\n            this.data.splice(0);\n        },\n        get size () {\n            return this.data.length;\n        },\n        toJSON () {\n            return new Map(this.data);\n        },\n        forEach (cb) {\n            this.data.forEach((p)=>{\n                cb(p[1], p[0], this);\n            });\n        },\n        keys () {\n            return this.data.map((p)=>p[0]).values();\n        },\n        values () {\n            return this.data.map((p)=>p[1]).values();\n        },\n        entries () {\n            return new Map(this.data).entries();\n        },\n        get [Symbol.toStringTag] () {\n            return \"Map\";\n        },\n        [Symbol.iterator] () {\n            return this.entries();\n        }\n    });\n    Object.defineProperties(map, {\n        data: {\n            enumerable: false\n        },\n        size: {\n            enumerable: false\n        },\n        toJSON: {\n            enumerable: false\n        }\n    });\n    Object.seal(map);\n    return map;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@web3modal/siwe/node_modules/valtio/esm/vanilla/utils.mjs\n"));

/***/ })

}]);